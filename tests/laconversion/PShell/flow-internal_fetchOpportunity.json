{
    
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Catch_Scope": {
                "actions": {
                    "Response_in_Catch": {
                        "inputs": {
                            "body": {
                                "Message": "@concat('Some error occurred while processing the request. Please find more details using tracking id : ', workflow()['run']['name'])",
                                "Status": "Failure"
                            },
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "statusCode": 500
                        },
                        "kind": "Http",
                        "runAfter": {},
                        "type": "Response"
                    },
                    "Terminate_in_Catch": {
                        "inputs": {
                            "runStatus": "Failed"
                        },
                        "runAfter": {
                            "Response_in_Catch": [
                                "Succeeded"
                            ]
                        },
                        "type": "Terminate"
                    }
                },
                "runAfter": {
                    "Try_Scope": [
                        "Failed",
                        "Skipped",
                        "TimedOut"
                    ]
                },
                "type": "Scope"
            },
            "Compose_to_trim_OpportunityId": {
                "inputs": "@trim(variables('varOpportunityId'))",
                "runAfter": {
                    "Initialize_variable_IntakeTemp": [
                        "Succeeded"
                    ],
                    "Initialize_variable_initalizeWhereClauseAppend": [
                        "Succeeded"
                    ],
                    "Initialize_variable_OpportunityId": [
                        "Succeeded"
                    ],
                    "Initialize_variable_whereClause": [
                        "Succeeded"
                    ]
                },
                "type": "Compose"
            },
            "Initialize_variable_IntakeTemp": {
                "inputs": {
                    "variables": [
                        {
                            "name": "IntakeTemp",
                            "type": "string"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_OpportunityId": {
                "inputs": {
                    "variables": [
                        {
                            "name": "varOpportunityId",
                            "type": "string",
                            "value": "@{triggerBody()?['opportunityId']}"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_initalizeWhereClauseAppend": {
                "inputs": {
                    "variables": [
                        {
                            "name": "initalizeWhereClauseAppend",
                            "type": "string",
                            "value": "@{null}"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_whereClause": {
                "inputs": {
                    "variables": [
                        {
                            "name": "whereClause",
                            "type": "string"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Try_Scope": {
                "actions": {
                    "Condition_check_for_statusCode": {
                        "actions": {
                            "Condition_for_EUR_statusCode": {
                                "actions": {
                                    "Compose_to_remove_S4SOrder_Intake_EUR__c": {
                                        "inputs": "@removeProperty(json(variables('IntakeTemp')),'S4SOrder_Intake_EUR__c')",
                                        "runAfter": {},
                                        "type": "Compose"
                                    },
                                    "Set_variable": {
                                        "inputs": {
                                            "name": "IntakeTemp",
                                            "value": "@{setProperty(outputs('Compose_to_remove_S4SOrder_Intake_EUR__c'),'S4SOrder_Intake_EUR__c',body('safeAbsoluteValue_for_S4SOrder_Intake_EUR__c'))}"
                                        },
                                        "runAfter": {
                                            "Compose_to_remove_S4SOrder_Intake_EUR__c": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable"
                                    }
                                },
                                "else": {
                                    "actions": {
                                        "Error_Response_for_EUR": {
                                            "inputs": {
                                                "body": {
                                                    "OpportunityId": "@{variables('varOpportunityId')}",
                                                    "error details": "@{body('safeAbsoluteValue_for_S4SOrder_Intake_EUR__c')}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "statusCode": "@outputs('safeAbsoluteValue_for_S4SOrder_Intake_EUR__c')?['statusCode']"
                                            },
                                            "kind": "Http",
                                            "runAfter": {},
                                            "type": "Response"
                                        },
                                        "Terminate_EUR": {
                                            "inputs": {
                                                "runStatus": "Failed"
                                            },
                                            "runAfter": {
                                                "Error_Response_for_EUR": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Terminate"
                                        }
                                    }
                                },
                                "expression": {
                                    "and": [
                                        {
                                            "equals": [
                                                "@outputs('safeAbsoluteValue_for_S4SOrder_Intake_EUR__c')?['statusCode']",
                                                200
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "safeAbsoluteValue_for_S4SOrder_Intake_EUR__c": [
                                        "Succeeded",
                                        "Failed"
                                    ]
                                },
                                "type": "If"
                            },
                            "Condition_for_Intacke_C_statusCode": {
                                "actions": {
                                    "Compose_to_Remove_S4SOrder_Intake__c": {
                                        "inputs": "@removeProperty(json(variables('IntakeTemp')),'S4SOrder_Intake__c')",
                                        "runAfter": {},
                                        "type": "Compose"
                                    },
                                    "Set_variable_S4SOrder_Intake__c": {
                                        "inputs": {
                                            "name": "IntakeTemp",
                                            "value": "@{setProperty(outputs('Compose_to_remove_S4SOrder_Intake__c'),'S4SOrder_Intake__c',body('safeAbsoluteValue_for_S4SOrder_Intake__c'))}"
                                        },
                                        "runAfter": {
                                            "Compose_to_Remove_S4SOrder_Intake__c": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable"
                                    }
                                },
                                "else": {
                                    "actions": {
                                        "Error_Response_for_Intake_C": {
                                            "inputs": {
                                                "body": {
                                                    "OpportunityId": "@{variables('varOpportunityId')}",
                                                    "error details": "@{body('safeAbsoluteValue_for_S4SOrder_Intake__c')}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "statusCode": "@outputs('safeAbsoluteValue_for_S4SOrder_Intake__c')?['statusCode']"
                                            },
                                            "kind": "Http",
                                            "runAfter": {},
                                            "type": "Response"
                                        },
                                        "Terminate_Intake_C": {
                                            "inputs": {
                                                "runStatus": "Failed"
                                            },
                                            "runAfter": {
                                                "Error_Response_for_Intake_C": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Terminate"
                                        }
                                    }
                                },
                                "expression": {
                                    "and": [
                                        {
                                            "equals": [
                                                "@outputs('safeAbsoluteValue_for_S4SOrder_Intake__c')?['statusCode']",
                                                200
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "safeAbsoluteValue_for_S4SOrder_Intake__c": [
                                        "Succeeded",
                                        "Failed"
                                    ]
                                },
                                "type": "If"
                            },
                            "Condition_for_USD_statusCode": {
                                "actions": {
                                    "Compose_to_remove_S4SOrder_Intake_USD__c": {
                                        "inputs": "@removeProperty(json(variables('IntakeTemp')),'S4SOrder_Intake_USD__c')",
                                        "runAfter": {},
                                        "type": "Compose"
                                    },
                                    "Set_variable_S4SOrder_Intake_USD__c": {
                                        "inputs": {
                                            "name": "IntakeTemp",
                                            "value": "@{setProperty(outputs('Compose_to_remove_S4SOrder_Intake_USD__c'),'S4SOrder_Intake_USD__c',body('safeAbsoluteValue_for_S4SOrder_Intake_USD__c'))}"
                                        },
                                        "runAfter": {
                                            "Compose_to_remove_S4SOrder_Intake_USD__c": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable"
                                    }
                                },
                                "else": {
                                    "actions": {
                                        "Error_Response_for_USD": {
                                            "inputs": {
                                                "body": {
                                                    "OpportunityId": "@{variables('varOpportunityId')}",
                                                    "error details": "@{body('safeAbsoluteValue_for_S4SOrder_Intake_USD__c')}"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json"
                                                },
                                                "statusCode": "@outputs('safeAbsoluteValue_for_S4SOrder_Intake_USD__c')?['statusCode']"
                                            },
                                            "kind": "Http",
                                            "runAfter": {},
                                            "type": "Response"
                                        },
                                        "Terminate_USD": {
                                            "inputs": {
                                                "runStatus": "Failed"
                                            },
                                            "runAfter": {
                                                "Error_Response_for_USD": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Terminate"
                                        }
                                    }
                                },
                                "expression": {
                                    "and": [
                                        {
                                            "equals": [
                                                "@outputs('safeAbsoluteValue_for_S4SOrder_Intake_USD__c')?['statusCode']",
                                                200
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "safeAbsoluteValue_for_S4SOrder_Intake_USD__c": [
                                        "Succeeded",
                                        "Failed"
                                    ]
                                },
                                "type": "If"
                            },
                            "Set_variable_IntakeTemp": {
                                "inputs": {
                                    "name": "IntakeTemp",
                                    "value": "@{body('Execute_a_SOQL_query')?['records']?[0]}"
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                            },
                            "safeAbsoluteValue_for_S4SOrder_Intake_EUR__c": {
                                "inputs": {
                                    "body": "@body('Execute_a_SOQL_query')?['records']?[0]?['S4SOrder_Intake_EUR__c']",
                                    "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                            "id": "${shellSafeAbsoluteValue_logicApp_id}"
                                        }
                                    },
                                    "retryPolicy": {
                                        "type": "none"
                                    }
                                },
                                "runAfter": {
                                    "Set_variable_IntakeTemp": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Workflow"
                            },
                            "safeAbsoluteValue_for_S4SOrder_Intake_USD__c": {
                                "inputs": {
                                    "body": "@body('Execute_a_SOQL_query')?['records']?[0]?['S4SOrder_Intake_USD__c']",
                                    "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                            "id": "${shellSafeAbsoluteValue_logicApp_id}"
                                        }
                                    },
                                    "retryPolicy": {
                                        "type": "none"
                                    }
                                },
                                "runAfter": {},
                                "type": "Workflow"
                            },
                            "safeAbsoluteValue_for_S4SOrder_Intake__c": {
                                "inputs": {
                                    "body": "@body('Execute_a_SOQL_query')?['records']?[0]?['S4SOrder_Intake__c']",
                                    "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                            "id": "${shellSafeAbsoluteValue_logicApp_id}"
                                        }
                                    },
                                    "retryPolicy": {
                                        "type": "none"
                                    }
                                },
                                "runAfter": {},
                                "type": "Workflow"
                            }
                        },
                        "else": {
                            "actions": {
                                "Error_Response": {
                                    "inputs": {
                                        "body": {
                                            "OpportunityId": "@{variables('varOpportunityId')}",
                                            "error details": "@{body('Execute_a_SOQL_query')?['message']}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "statusCode": "@outputs('Execute_a_SOQL_query')?['statusCode']"
                                    },
                                    "kind": "Http",
                                    "runAfter": {},
                                    "type": "Response"
                                },
                                "Error_Terminate": {
                                    "inputs": {
                                        "runStatus": "Failed"
                                    },
                                    "runAfter": {
                                        "Error_Response": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Terminate"
                                }
                            }
                        },
                        "expression": {
                            "and": [
                                {
                                    "equals": [
                                        "@outputs('Execute_a_SOQL_query')?['statusCode']",
                                        200
                                    ]
                                },
                                {
                                    "greater": [
                                        "@body('Execute_a_SOQL_query')?['totalSize']",
                                        0
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "Execute_a_SOQL_query": [
                                "Succeeded",
                                "Failed"
                            ]
                        },
                        "type": "If"
                    },
                    "Condition_to_check_OpportunityId": {
                        "actions": {
                            "Compose_final_whereClause": {
                                "inputs": "@concat(variables('whereClause'),variables('initalizeWhereClauseAppend'))",
                                "runAfter": {
                                    "Condition_to_check_initalizeWhereClauseAppend_existance": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Compose"
                            },
                            "Condition_to_check_initalizeWhereClauseAppend_existance": {
                                "actions": {
                                    "Set_variable_for_OpportunityId_only": {
                                        "inputs": {
                                            "name": "initalizeWhereClauseAppend",
                                            "value": "Id = '@{outputs('Compose_to_trim_OpportunityId')}'"
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                    }
                                },
                                "else": {
                                    "actions": {
                                        "Set_variable_initalizeWhereClauseAppend": {
                                            "inputs": {
                                                "name": "initalizeWhereClauseAppend",
                                                "value": "and Id = '@{outputs('Compose_to_trim_OpportunityId')}'"
                                            },
                                            "runAfter": {},
                                            "type": "SetVariable"
                                        }
                                    }
                                },
                                "expression": {
                                    "and": [
                                        {
                                            "not": {
                                                "equals": [
                                                    "@variables('initalizeWhereClauseAppend')",
                                                    "''"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "runAfter": {},
                                "type": "If"
                            }
                        },
                        "expression": {
                            "and": [
                                {
                                    "not": {
                                        "equals": [
                                            "@outputs('Compose_to_trim_OpportunityId')",
                                            "@null"
                                        ]
                                    }
                                },
                                {
                                    "not": {
                                        "equals": [
                                            "@outputs('Compose_to_trim_OpportunityId')",
                                            "@string('')"
                                        ]
                                    }
                                }
                            ]
                        },
                        "runAfter": {
                            "Condition_to_check_opportunityReferenceId": [
                                "Succeeded"
                            ]
                        },
                        "type": "If"
                    },
                    "Condition_to_check_opportunityReferenceId": {
                        "actions": {
                            "Set_variable_initializeWhereClauseAppend": {
                                "inputs": {
                                    "name": "initalizeWhereClauseAppend",
                                    "value": "''"
                                },
                                "runAfter": {
                                    "Set_variable_whereClause_with_opportunityReferenceId": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "SetVariable"
                            },
                            "Set_variable_whereClause_with_opportunityReferenceId": {
                                "inputs": {
                                    "name": "whereClause",
                                    "value": "S4SReference_ID__c = '@{triggerBody()?['opportunityReferenceId']}'"
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                            }
                        },
                        "expression": {
                            "and": [
                                {
                                    "not": {
                                        "equals": [
                                            "@triggerBody()?['opportunityReferenceId']",
                                            "@null"
                                        ]
                                    }
                                },
                                {
                                    "not": {
                                        "equals": [
                                            "@triggerBody()?['opportunityReferenceId']",
                                            "@string('')"
                                        ]
                                    }
                                }
                            ]
                        },
                        "runAfter": {},
                        "type": "If"
                    },
                    "Execute_a_SOQL_query": {
                        "inputs": {
                            "body": {
                                "query": "select \nId,IsDeleted,AccountId,RecordTypeId,IsPrivate,Name,Description,StageName,Amount,Probability,ExpectedRevenue,TotalOpportunityQuantity,CloseDate,Type,NextStep,LeadSource,IsClosed,IsWon,ForecastCategory,ForecastCategoryName,CurrencyIsoCode,CampaignId,HasOpportunityLineItem,Pricebook2Id,OwnerId,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastActivityDate,FiscalQuarter,FiscalYear,Fiscal,LastViewedDate,LastReferencedDate,SyncedQuoteId,ContractId,HasOpenActivity,HasOverdueTask,Budget_Confirmed__c,Discovery_Completed__c,ROI_Analysis_Completed__c,Loss_Reason__c,S4SAcceptance_Closure__c,S4SAccount_Industry__c,S4SAlternative_Opportunity__c,S4SAmount_Financed__c,S4SAssigned_parental_Opportunity__c,S4SB2A_Outcome__c,S4SB2A_type__c,S4SBid_approval_PM040__c,S4SBooking_Funding_Date__c,S4SBusiness_Model_ZRG__c,S4SBusiness_Unit__c,S4SCAPEX__c,S4SChance_of_Execution__c,S4SChance_of_Success__c,S4SCity__c,S4SClosing_Date__c,S4SCommission_Country_1__c,S4SCommission_Country_2__c,S4SCommission_Country_3__c,S4SCommission_Country_4__c,S4SCommission_Percentage_1__c,S4SCommission_Percentage_2__c,S4SCommission_Percentage_3__c,S4SCommission_Percentage_4__c,S4SCompetitors__c,S4SContract_Duration_Month__c,S4SCorp_Lead_Country__c,S4SCountry_of_Installation__c,S4SCreated_from_Lead__c,S4SCross_Border_International_Business__c,S4SCustomer_Agreement_for_Data_Transfer__c,S4SCustomer_Rate__c,S4SDiscussion_in_PEF_Deal_Flow_Call__c,S4SDist_Channel__c,S4SDistribution_channel__c,S4SDivision__c,S4SEUR_Exchange_Rate__c,S4SEnd_Account_Account__c,S4SEnd_Account_Industry__c,S4SEnd_Account__c,S4SExpiry_Date_Risk_Approval__c,S4SField_of_Activity__c,S4SFinance_Product_Label__c,S4SFinancing_Demand_Division__c,S4SFinancing_Need__c,S4SFinancing_Product__c,S4SFunding_limit__c,S4SGross_Margin__c,S4SHas_Children__c,S4SIBIT__c,S4SInitial_Purchase_Price__c,S4SInstallation__c,S4SInternal_Interest_Rate__c,S4SIntroducer_Sales__c,S4SInvesting_ARE__c,S4SInvolded_Siemens_Entities__c,S4SInvolved_Competence_Center__c,S4SMain_Reason__c,S4SMarked_for_Deletion__c,S4SOPEX__c,S4SOPPORTUNITY_LegacyID__c,S4SOffer_Reference_ID__c,S4SOpportunity_Industry_Search__c,S4SOpportunity_Industry__c,S4SOpportunity_Type__c,S4SOrder_Intake_EUR__c,S4SOrder_Intake_USD__c,DB_Competitor__c,S4SOverdue_Time__c,S4SOwn_Content_Own_BU_Products__c,S4SOwn_Content_Own_DIV_Products__c,S4SOwn_Content_Own_DIV_Services__c,S4SOwn_Content_Siemens_Products_Services__c,S4SPEF_Advisory_Scope__c,S4SPM040_Released_Gross_Margin__c,S4SPM040_Released_Profit_EBIT__c,S4SPM040_Released_Risk_Contigency__c,S4SPM040_Released_Volume__c,S4SPM040_Transfer_date__c,S4SPM070_Transfer_Date__c,S4SPM070_Won_lost_Gross_Margin__c,S4SPM070_Won_lost_Profit_EBIT__c,S4SPM070_Won_lost_Risk_Contigency__c,S4SPM070_Won_lost_Volume__c,S4SAccount_Name_International__c,S4SPotential_Siemens_Volume__c,S4SPrevious_Stage__c,S4SPrevious_Status__c,S4SPrevious_System_Unique_ID__c,S4SPrimary_BookingItemID__c,S4SPrimary_CompetitorID__c,S4SProposed_to_COF__c,S4SProposed_to_Debt__c,S4SProposed_to_Equity__c,S4SROE__c,S4SReason_not_won__c,S4SReference_ID__c,S4SRelevant_for_Forecast__c,S4SSFS_Account_Rating_Date__c,S4SSFS_Account_Rating_Type__c,\nS4SSFS_Account_Rating__c,S4SSFS_Confidential__c,S4SSFS_Opportunity_Rating_Date__c,S4SSFS_Opportunity_Rating_Type__c,S4SSFS_Opportunity_Rating__c,S4SSOC_Category__c,S4SSale_Country__c,S4SSales_Branch__c,S4SSales_Department__c,S4SSales_District__c,S4SSales_Office__c,S4SSales_Status__c,S4SSales_Subregion__c,S4SSales_Territory__c,S4SSales_Type__c,S4SSalesforce_ID__c,S4SSenior_Leverage__c,S4SSite__c,S4SSolution_Support_End_Date__c,\nS4SSource__c,S4SSpread__c,S4SStart_project_PM080__c,S4SStatus_since__c,S4SStrategic_Priority__c,S4STarget_IRR__c,S4STerritory_Structure__c,S4STerritory__c,S4SThereof_SPV_SFS_Inc__c,S4STimestamp_to_COF__c,S4STimestamp_to_Debt__c,S4STimestamp_to_Equity__c,S4STotal_Debt_of_Opportunity__c,\nS4STotal_Equity_incl_Shareholder_Loans__c,S4STotal_Investment__c,S4STotal_Leverage__c,S4STotal_OI_Recurring_Business__c,S4STotal_Product_Amount_EUR__c,S4STotal_Product_Amount_USD__c,S4STotal_Project_Value__c,S4SType_of_Transaction__c,S4SUSD_Exchange_Rate__c,S4SWeighted_Order_Intake_EUR__c,S4SWeighted_Order_Intake_USD__c,S4SWeighted_Order_Intake__c,S4SWinner__c,S4SZip_Code__c,S4SBooking_Line_Item_Count__c,\nS4SCompetitorCount__c,S4SOrder_Intake__c,S4SPrimaryCompetitorCount__c,S4SPrimaryLineItemCount__c,S4STotal_SFS_Amount_to_fund_at_close__c,S4STotal_of_All_Tranches__c,S4STotal_of_Allocated_Amount__c,S4STotal_of_Approved_Amount__c,S4STotal_of_Requested_Amount__c,S4SAsset_Group__c,S4SAsset_Type__c,S4SBuy_America_n__c,S4SCOF_Country__c,S4SCategorization__c,S4SConfidentiality_Status__c,S4SContract_Schedule__c,S4SContract__c,S4SContractual_Insurance_requirements__c,S4SGovernmental_Agency__c,S4SGovernmental_Entity_Government_Funded__c,S4SInsurance_Database_ID__c,S4SIntroducer_Account_Name__c,S4SLOA_ID_Number__c,S4SOpportunity_Amount_EUR__c,S4SOpportunity_Amount_USD__c,S4SOur_Role__c,S4SPlanning_Tool__c,S4SProject_Volume__c,S4SRate_Spread__c,S4SSAP_Number__c,S4SSFS_Equity_Share__c,S4SSiemens_Equity__c,S4SWeighted_Total_Product_Amount_EUR__c,S4SWeighted_Total_Product_Amount_USD__c,S4SWeighted_Total_Product_Amount__c,S4SAdvisory_Volume__c,S4S_Total_SFS_Amount_Rollup__c,S4SApproval_Check__c,\nS4SApproval_Pending__c,S4SCreate_COMPAS_Quote__c,S4SExternal_Source__c,S4SLast_Sync_with_COMPAS__c,S4SOrder_Intake_Opportunity_Amount__c,S4SOriginal_Project_Solution_Opportunity__c,S4SProject_Category__c,S4SSystem_Installation_Type__c,S4SUserId__c,S4SWeighted_Opportunity_Amount__c,\nS4SWeighted_Order_Intake_Opp_Amount__c,S4SFinance_Product_Type__c,S4SSold_To_SAP__c,Account.Id,Account.Name,Account.Type,Account.S4SIfA__c,Owner.LastName,Owner.FirstName,Owner.Division,Owner.Email,Owner.FederationIdentifier,Owner.S4SGID_Technical__c,Owner.S4SGID__c,S4SEnd_Account__r.Id,S4SEnd_Account__r.Name,S4SEnd_Account__r.Type,S4SEnd_Account__r.S4SIfA__c from Opportunity where @{outputs('Compose_final_whereClause')}"
                            },
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/soql/executesoqlquery",
                            "retryPolicy": {
                                "type": "none"
                            }
                        },
                        "runAfter": {
                            "Condition_to_check_OpportunityId": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection"
                    },
                    "Final_Response": {
                        "inputs": {
                            "body": {
                                "records": [
                                    "@json(variables('IntakeTemp'))"
                                ]
                            },
                            "headers": {
                                "Content-Type": "application/json",
                                "EUR": "@{body('safeAbsoluteValue_for_S4SOrder_Intake_EUR__c')}",
                                "IntakeC": "@{body('safeAbsoluteValue_for_S4SOrder_Intake__c')}",
                                "USD": "@{body('safeAbsoluteValue_for_S4SOrder_Intake_USD__c')}"
                            },
                            "statusCode": 200
                        },
                        "kind": "Http",
                        "runAfter": {
                            "Condition_check_for_statusCode": [
                                "Succeeded"
                            ]
                        },
                        "type": "Response"
                    }
                },
                "runAfter": {
                    "Compose_to_trim_OpportunityId": [
                        "Succeeded"
                    ]
                },
                "trackedProperties": {
                    "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'external')}",
                    "citizenName": "c00031",
                    "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
                    "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'PShell')}",
                    "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
                    "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
                    "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'fetchOpportunity')}",
                    "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}"
                },
                "type": "Scope"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
            "$connections": {
                "defaultValue": {},
                "type": "Object"
            }
        },
        "triggers": {
            "manual": {
                "inputs": {},
                "kind": "Http",
                "type": "Request"
            }
        }
}