{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "Initialize_variable_ZeroResults": {
            "inputs": {
                "variables": [
                    {
                        "name": "ZeroResults",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_finalResponse": {
            "inputs": {
                "variables": [
                    {
                        "name": "finalResponse",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_trimmedString": {
            "inputs": {
                "variables": [
                    {
                        "name": "trimmedString",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_whereClause": {
            "inputs": {
                "variables": [
                    {
                        "name": "whereClause",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Scope-Catch": {
            "actions": {
                "Error_Response": {
                    "inputs": {
                        "body": {
                            "Message": "@concat('Some error occurred while processing the request. Please find more details using tracking id : ', workflow()['run']['name'])",
                            "Status": "Failure"
                        },
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "statusCode": 500
                    },
                    "kind": "Http",
                    "runAfter": {},
                    "type": "Response"
                },
                "Terminate_in_Catch": {
                    "inputs": {
                        "runStatus": "Failed"
                    },
                    "runAfter": {
                        "Error_Response": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                }
            },
            "runAfter": {
                "Scope-Try": [
                    "Failed",
                    "Skipped",
                    "TimedOut"
                ]
            },
            "type": "Scope"
        },
        "Scope-Try": {
            "actions": {
                "Check_trimmedString": {
                    "actions": {
                        "Set_variable_whereClause": {
                            "inputs": {
                                "name": "whereClause",
                                "value": "S4SACCOUNT__C= '@{variables('trimmedString')}' "
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@variables('trimmedString')",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@variables('trimmedString')",
                                        "@string('')"
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Set_variable_trimmedString": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Compose_to_get_AccountId": {
                    "inputs": "@triggerBody()?['accountId']",
                    "runAfter": {},
                    "type": "Compose"
                },
                "Compose_FinalResponse": {
                    "inputs": "@if(equals(variables('finalResponse'),''),concat('{\"SIE_SF4S_fetchIdentNumberResponse\":[',variables('ZeroResults'),']}'),concat('{\"SIE_SF4S_fetchIdentNumberResponse\":[',variables('finalResponse'),']}'))",
                    "runAfter": {
                        "For_each_record_in_Query_Output": [
                            "Succeeded"
                        ]
                    },
                    "type": "Compose"
                },
                "Execute_a_SOQL_query": {
                    "inputs": {
                        "body": {
                            "query": "select \nId,IsDeleted,Name,CurrencyIsoCode,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastActivityDate,LastViewedDate,LastReferencedDate,S4SAccount__c,S4SExternal_ID__c,S4SIdentification_Number__c,S4SIfA__c,S4SLocal_Source_System__c,S4SPrimary__c,S4SSource_System__c,S4SSubtype__c,S4SType__c,S4SCompany_Code__c,S4SMarked_for_Deletion__c,S4SOrder_Block__c,S4SSAP_Account_Group__c,S4SSales_Org__c,S4SExternal_Source__c from S4SIdentification_Number__c where @{variables('whereClause')}"
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/soql/executesoqlquery"
                    },
                    "runAfter": {
                        "Check_trimmedString": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "For_each_record_in_Query_Output": {
                    "actions": {
                        "Compose_Response_from_QueryResult": {
                            "inputs": {
                                "CreatedById": "@{items('For_each_record_in_Query_Output')?['CreatedById']}",
                                "CreatedDate": "@replace(coalesce(items('For_each_record_in_Query_Output')?['CreatedDate'], ''), '+00:00', '.000Z')",
                                "CurrencyIsoCode": "@{items('For_each_record_in_Query_Output')?['CurrencyIsoCode']}",
                                "Id": "@{items('For_each_record_in_Query_Output')?['Id']}",
                                "IsDeleted": "@{items('For_each_record_in_Query_Output')?['IsDeleted']}",
                                "LastActivityDate": "@replace(coalesce(items('For_each_record_in_Query_Output')?['LastActivityDate'], ''), '+00:00', '.000Z')",
                                "LastModifiedById": "@{items('For_each_record_in_Query_Output')?['LastModifiedById']}",
                                "LastModifiedDate": "@replace(coalesce(items('For_each_record_in_Query_Output')?['LastModifiedDate'], ''), '+00:00', '.000Z')",
                                "LastReferencedDate": "@replace(coalesce(items('For_each_record_in_Query_Output')?['LastReferencedDate'], ''), '+00:00', '.000Z')",
                                "LastViewedDate": "@replace(coalesce(items('For_each_record_in_Query_Output')?['LastViewedDate'], ''), '+00:00', '.000Z')",
                                "Name": "@{items('For_each_record_in_Query_Output')?['Name']}",
                                "S4SAccount__c": "@{items('For_each_record_in_Query_Output')?['S4SAccount__c']}",
                                "S4SCompany_Code__c": "@{items('For_each_record_in_Query_Output')?['S4SCompany_Code__c']}",
                                "S4SExternal_ID__c": "@{items('For_each_record_in_Query_Output')?['S4SExternal_ID__c']}",
                                "S4SIdentification_Number__c": "@{items('For_each_record_in_Query_Output')?['S4SIdentification_Number__c']}",
                                "S4SIfA__c": "@{items('For_each_record_in_Query_Output')?['S4SIfA__c']}",
                                "S4SLocal_Source_System__c": "@{items('For_each_record_in_Query_Output')?['S4SLocal_Source_System__c']}",
                                "S4SMarked_for_Deletion__c": "@{items('For_each_record_in_Query_Output')?['S4SMarked_for_Deletion__c']}",
                                "S4SOrder_Block__c": "@{items('For_each_record_in_Query_Output')?['S4SOrder_Block__c']}",
                                "S4SPrimary__c": "@{items('For_each_record_in_Query_Output')?['S4SPrimary__c']}",
                                "S4SSAP_Account_Group__c": "@{items('For_each_record_in_Query_Output')?['S4SSAP_Account_Group__c']}",
                                "S4SSales_Org__c": "@{items('For_each_record_in_Query_Output')?['S4SSales_Org__c']}",
                                "S4SSource_System__c": "@{items('For_each_record_in_Query_Output')?['S4SSource_System__c']}",
                                "S4SSubtype__c": "@{items('For_each_record_in_Query_Output')?['S4SSubtype__c']}",
                                "S4SType__c": "@{items('For_each_record_in_Query_Output')?['S4SType__c']}",
                                "SystemModstamp": "@replace(coalesce(items('For_each_record_in_Query_Output')?['SystemModstamp'], ''), '+00:00', '.000Z')"
                            },
                            "runAfter": {},
                            "type": "Compose"
                        },
                        "Compose_to_add_result_to_FinalResponse": {
                            "inputs": "@if(equals(variables('finalResponse'),''),outputs('Compose_Response_from_QueryResult'),concat(variables('finalResponse'),',',outputs('Compose_Response_from_QueryResult')))",
                            "runAfter": {
                                "Compose_Response_from_QueryResult": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose"
                        },
                        "Set_variable_finalResponse": {
                            "inputs": {
                                "name": "finalResponse",
                                "value": "@{outputs('Compose_to_add_result_to_FinalResponse')}"
                            },
                            "runAfter": {
                                "Compose_to_add_result_to_FinalResponse": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable"
                        }
                    },
                    "foreach": "@body('Execute_a_SOQL_query')['records']",
                    "runAfter": {
                        "Execute_a_SOQL_query": [
                            "Succeeded"
                        ]
                    },
                    "runtimeConfiguration": {
                        "concurrency": {
                            "repetitions": 1
                        }
                    },
                    "type": "Foreach"
                },
                "Final_Response": {
                    "inputs": {
                        "body": "@json(outputs('Compose_FinalResponse'))",
                        "statusCode": 200
                    },
                    "kind": "http",
                    "runAfter": {
                        "Compose_FinalResponse": [
                            "Succeeded"
                        ]
                    },
                    "type": "Response"
                },
                "Set_variable_trimmedString": {
                    "inputs": {
                        "name": "trimmedString",
                        "value": "@{trim(outputs('Compose_to_get_AccountId'))}"
                    },
                    "runAfter": {
                        "Compose_to_get_AccountId": [
                            "Succeeded"
                        ]
                    },
                    "type": "SetVariable"
                }
            },
            "runAfter": {
                "Initialize_variable_ZeroResults": [
                    "Succeeded"
                ],
                "Initialize_variable_finalResponse": [
                    "Succeeded"
                ],
                "Initialize_variable_trimmedString": [
                    "Succeeded"
                ],
                "Initialize_variable_whereClause": [
                    "Succeeded"
                ]
            },
            "trackedProperties": {
                "citizenName": "c00031",
                "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'PShell')}",
                "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
                "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
                "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'fetchIdentificationNumber')}",
                "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'external')}",
                "parentWorkflow" : "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}"
            },
            "type": "Scope"
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
        "$connections": {
            "defaultValue": {},
            "type": "Object"
        }
    },
    "triggers": {
        "manual": {
            "inputs": {},
            "kind": "Http",
            "type": "Request"
        }
    }
}