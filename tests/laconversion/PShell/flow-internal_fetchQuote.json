{
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Initialize_where_clause": {
                "inputs": {
                    "variables": [
                        {
                            "name": "BookingWhere Clause",
                            "type": "string",
                            "value": "@{null}"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_OpportunityId": {
                "inputs": {
                    "variables": [
                        {
                            "name": "OpportunityId",
                            "type": "string",
                            "value": "@{triggerBody()?['records']?[0]?['Id']}"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_SOQLquery_fetchQuote": {
                "inputs": {
                    "variables": [
                        {
                            "name": "varSQLfetchQuote",
                            "type": "string",
                            "value": "select Id,OwnerId,IsDeleted,Name,CurrencyIsoCode,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastViewedDate,LastReferencedDate,OpportunityId,Pricebook2Id,ContactId,QuoteNumber,IsSyncing,ShippingHandling,Tax,Status,ExpirationDate,Description,Subtotal,TotalPrice,LineItemCount,BillingStreet,BillingCity,BillingState,BillingPostalCode,BillingCountry,BillingStateCode,BillingCountryCode,BillingLatitude,BillingLongitude,BillingGeocodeAccuracy,ShippingStreet,ShippingCity,ShippingState,ShippingPostalCode,ShippingCountry,ShippingStateCode,ShippingCountryCode,ShippingLatitude,ShippingLongitude,ShippingGeocodeAccuracy,QuoteToStreet,QuoteToCity,QuoteToState,QuoteToPostalCode,QuoteToCountry,QuoteToStateCode,QuoteToCountryCode,QuoteToLatitude,QuoteToLongitude,QuoteToGeocodeAccuracy,AdditionalStreet,AdditionalCity,AdditionalState,AdditionalPostalCode,AdditionalCountry,AdditionalStateCode,AdditionalCountryCode,AdditionalLatitude,AdditionalLongitude,AdditionalGeocodeAccuracy,BillingName,ShippingName,QuoteToName,AdditionalName,Email,Phone,Fax,ContractId,AccountId,Discount,GrandTotal,CanCreateQuoteLineItems,S4SFollow_Up_Date__c,S4SMain_Offer__c,S4SOffer_Date__c,S4SOffer_Engineer__c,S4SOffer_ID__c,S4SQUOTE_LegacyID__c,S4SSales_Margin__c,S4SSource_System__c,S4SValid_until__c,S4SVolume__c,S4SExternal_Source__c from Quote\n"
                        }
                    ]
                },
                "runAfter": {
                    "Initialize_OpportunityId": [
                        "Succeeded"
                    ]
                },
                "type": "InitializeVariable"
            },
            "Initialize_variable_error_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "SoapErrorResponse",
                            "type": "string",
                            "value": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap-env:Header/><soap-env:Body><soap-env:Fault><faultcode>soap-env:Server</faultcode><faultstring>{errormessagedetails}</faultstring><detail/></soap-env:Fault></soap-env:Body></soap-env:Envelope>"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Scope-Catch": {
                "actions": {
                    "Failed_Response": {
                        "inputs": {
                            "body": "@replace(variables('SoapErrorResponse'),'{errormessagedetails}',concat('Some error occurred while connection. Please find more details using tracking id : ', workflow()['run']['name']))",
                            "headers": {
                                "Content-Type": "application/xml"
                            },
                            "statusCode": 500
                        },
                        "kind": "Http",
                        "runAfter": {},
                        "type": "Response"
                    },
                    "Terminate_in_Catch": {
                        "inputs": {
                            "runStatus": "Failed"
                        },
                        "runAfter": {
                            "Failed_Response": [
                                "Succeeded"
                            ]
                        },
                        "type": "Terminate"
                    }
                },
                "runAfter": {
                    "Scope-Try": [
                        "Failed",
                        "Skipped",
                        "TimedOut"
                    ]
                },
                "type": "Scope"
            },
            "Scope-Try": {
                "actions": {
                    "Condition_to_check_OpportunityId": {
                        "actions": {
                            "Set_opportunityId_where_clause_append": {
                                "inputs": {
                                    "name": "BookingWhere Clause",
                                    "value": "@{concat('OpportunityId= ',string(''''),variables('opportunityId'),string(''''))}"
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                            }
                        },
                        "expression": {
                            "and": [
                                {
                                    "not": {
                                        "equals": [
                                            "@variables('OpportunityId')",
                                            "@null"
                                        ]
                                    }
                                },
                                {
                                    "not": {
                                        "equals": [
                                            "@variables('OpportunityId')",
                                            "@string('')"
                                        ]
                                    }
                                }
                            ]
                        },
                        "runAfter": {},
                        "type": "If"
                    },
                    "Execute_Booking_Line_SOQL_query": {
                        "inputs": {
                            "body": {
                                "query": "@{variables('varSQLfetchQuote')} where @{variables('BookingWhere Clause')}"
                            },
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/soql/executesoqlquery",
                            "retryPolicy": {
                                "type": "none"
                            }
                        },
                        "runAfter": {
                            "Condition_to_check_OpportunityId": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection"
                    },
                    "Final_Response": {
                        "inputs": {
                            "body": "@body('Execute_Booking_Line_SOQL_query')",
                            "statusCode": 200
                        },
                        "kind": "Http",
                        "runAfter": {
                            "Execute_Booking_Line_SOQL_query": [
                                "Succeeded"
                            ]
                        },
                        "type": "Response"
                    }
                },
                "runAfter": {
                    "Initialize_where_clause": [
                        "Succeeded"
                    ],
                    "Initialize_SOQLquery_fetchQuote": [
                        "Succeeded"
                    ],
                    "Initialize_variable_error_response": [
                        "Succeeded"
                    ]
                },
                "trackedProperties": {
                    "apimRouting": "external",
                    "citizenName": "c00031",
                    "correlationId": "not-defined",
                    "interfaceName": "PShell",
                    "interfacePartner": "not-defined",
                    "interfaceVersion": "not-defined",
                    "operationName": "internal_fetchQuote",
                    "parentWorkflow": "not-defined"
                },
                "type": "Scope"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
            "$connections": {
                "defaultValue": {},
                "type": "Object"
            }
        },
        "triggers": {
            "manual": {
                "inputs": {},
                "kind": "Http",
                "type": "Request"
            }
        }
}