{
	"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
	"actions": {
		"Catch_Scope": {
			"actions": {
				"Response_in_Catch": {
					"inputs": {
						"statusCode": 500
					},
					"kind": "Http",
					"runAfter": {},
					"type": "Response"
				},
				"Terminate_in_Catch": {
					"inputs": {
						"runStatus": "Failed"
					},
					"runAfter": {
						"Response_in_Catch": [
							"Succeeded"
						]
					},
					"type": "Terminate"
				}
			},
			"runAfter": {
				"Try_Scope": [
					"Failed",
					"Skipped",
					"TimedOut"
				]
			},
			"type": "Scope"
		},
		"Initialize_variable-Response": {
			"inputs": {
				"variables": [
					{
						"name": "InputRequest",
						"type": "string",
						"value": "@{xml(triggerBody())}"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable-responsemap": {
			"inputs": {
				"variables": [
					{
						"name": "responseMap",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_-_xmlstring": {
			"inputs": {
				"variables": [
					{
						"name": "xmlstring",
						"type": "string",
						"value": "@{triggerBody()}"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_Id": {
			"inputs": {
				"variables": [
					{
						"name": "Id",
						"type": "string",
						"value": "@{triggerBody()?['Opportunity']?['Id']}"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_QuoteFinalResponse": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertQuoteFinalResponse",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertBookingLine_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertBookingLine_response",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertInvolvedAccounts_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertInvolvedAccounts_response",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertOpp_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertOpp_response",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertProxOpp_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertProxOpp_response",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertQuoteLine_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertQuoteLine_response",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertQuote_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertQuote_response",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_UpsertoppLine_response": {
			"inputs": {
				"variables": [
					{
						"name": "UpsertoppLine_response",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Try_Scope": {
			"actions": {
				"Check-SIE_SF4S_upsertOfferReq_Opportunity_quote": {
					"actions": {
						"For_each-Quote": {
							"actions": {
								"Append_to_array_QuoteFinal_response": {
									"inputs": {
										"name": "UpsertQuoteFinalResponse",
										"value": "@json(concat('{\"quote\":',variables('UpsertQuote_response'),',\"quoteLine\":',variables('UpsertQuoteLine_response')))"
									},
									"runAfter": {
										"Check_-_Opportunity_quote_quoteLine": [
											"Succeeded"
										]
									},
									"type": "AppendToArrayVariable"
								},
								"Check_-_Opportunity_quote_quoteLine": {
									"actions": {
										"For_each-QuoteLine": {
											"actions": {
												"Append_to_array_QuoteLine_response": {
													"inputs": {
														"name": "UpsertQuoteLine_response",
														"value": "@json(variables('responseMap'))"
													},
													"runAfter": {
														"Condition_check_UpsertQuoteLine_status": [
															"Succeeded"
														]
													},
													"type": "AppendToArrayVariable"
												},
												"Condition_check_UpsertQuoteLine_status": {
													"actions": {
														"Set_variable_ResponseMapp_UpsertQuoteLine_success": {
															"inputs": {
																"name": "responseMap",
																"value": "{\n            \"SIE_SF4S_upsertResponse\": {\n              \"Id\": \"@{body('Insert_or_Update_QuoteLine')?['Id']}\",\n              \"created\": \"@{if(empty(items('For_each-QuoteLine')?['Id']),'true','false')}\",\n              \"Status\": \"true\"\n            }\n          }"
															},
															"runAfter": {},
															"type": "SetVariable"
														}
													},
													"else": {
														"actions": {
															"Set_variable_ResponseMapp_UpsertQuoteLine_failure": {
																"inputs": {
																	"name": "responseMap",
																	"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n              \"Status\": \"false\",\n              \"Message\": \"@{body('Insert_or_Update_QuoteLine')?['message']}\"\n         }"
																},
																"runAfter": {},
																"type": "SetVariable"
															}
														}
													},
													"expression": {
														"and": [
															{
																"equals": [
																	"@outputs('Insert_or_Update_QuoteLine')['statusCode']",
																	200
																]
															}
														]
													},
													"runAfter": {
														"Insert_or_Update_QuoteLine": [
															"Succeeded",
															"Failed"
														]
													},
													"type": "If"
												},
												"Insert_or_Update_QuoteLine": {
													"inputs": {
														"body": "@json(string(if(empty(json(body('JsonRemoveNullOrEmptyFunc_in_QuoteLine')?['result']?['restructuredJson'])?['Id']),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(body('JsonRemoveNullOrEmptyFunc_in_QuoteLine')?['result']?['restructuredJson']),'IsDeleted'))),'CurrencyIsoCode'))),'SystemModstamp'))),'LastViewedDate'))),'LastReferencedDate'))),'SortOrder'))),'ListPrice'))),'Subtotal'))),'TotalPrice'),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(body('JsonRemoveNullOrEmptyFunc_in_QuoteLine')?['result']?['restructuredJson']),'QuoteId'))),'IsDeleted'))),'CurrencyIsoCode'))),'SystemModstamp'))),'LastViewedDate'))),'LastReferencedDate'))),'SortOrder'))),'ListPrice'))),'Subtotal'))),'TotalPrice'))),'PricebookEntryId'))),'Product2Id'))))",
														"host": {
															"triggerName": "manual",
															"workflow": {
																"id": "${Spiridon_internal_insert_update_quoteline_logicAppId}"
															}
														},
														"retryPolicy": {
															"type": "none"
														}
													},
													"runAfter": {
														"JsonRemoveNullOrEmptyFunc_in_QuoteLine": [
															"Succeeded"
														]
													},
													"type": "Workflow"
												},
												"JsonRemoveNullOrEmptyFunc_in_QuoteLine": {
													"inputs": {
														"body": {
															"CorrelationId": "@{triggerOutputs()['headers']?['correlationid']}",
															"InputRequestBase64": "@{base64(if(empty(items('For_each-QuoteLine')?['QuoteId']),setProperty(items('For_each-QuoteLine'),'QuoteId',body('Insert_or_Update_Quote')?['Id']),items('For_each-QuoteLine')))}",
															"InterfaceName": "internal_insert_update_quoteline_upsertOpportunityPshell",
															"Username": "@{triggerOutputs()['headers']?['Username']}",
															"operation": "JsonRemoveNullOrEmpty"
														},
														"authentication": {
															"type": "Raw",
															"value": "[parameters('functionAppKey')]"
														},
														"function": {
															"id": "[concat(parameters('funcApp'), '/functions/JsonRemoveNullOrEmptyFunc')]"
														}
													},
													"runAfter": {},
													"type": "Function"
												}
											},
											"foreach": "@items('For_each-Quote')?['quoteline']",
											"runAfter": {},
											"runtimeConfiguration": {
												"concurrency": {
													"repetitions": 1
												}
											},
											"type": "Foreach"
										}
									},
									"expression": {
										"and": [
											{
												"not": {
													"equals": [
														"@items('For_each-Quote')?['quoteline']",
														"@string('')"
													]
												}
											},
											{
												"not": {
													"equals": [
														"@items('For_each-Quote')?['quoteline']",
														"@null"
													]
												}
											},
											{
												"equals": [
													"@outputs('Insert_or_Update_Quote')['statusCode']",
													200
												]
											}
										]
									},
									"runAfter": {
										"Set_variable_upsertQuote_sub_response_": [
											"Succeeded"
										]
									},
									"type": "If"
								},
								"Condition_Upsert_Quote_status": {
									"actions": {
										"Set_variable_responseMap_Quote_succes": {
											"inputs": {
												"name": "responseMap",
												"value": "{\n            \"SIE_SF4S_upsertResponse\": {\n              \"Id\": \"@{body('Insert_or_Update_Quote')?['Id']}\",\n              \"created\": \"@{if(empty(items('For_each-Quote')?['quote']?['Quote']?['Id']),'true','false')}\",\n              \"Status\": \"true\"\n            }\n          }"
											},
											"runAfter": {},
											"type": "SetVariable"
										}
									},
									"else": {
										"actions": {
											"Set_variable_responseMap_Quote_Failure": {
												"inputs": {
													"name": "responseMap",
													"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n          \"Status\": \"false\",\n           \"Message\": \"@{body('Insert_or_Update_Quote')?['message']}\"\n          }"
												},
												"runAfter": {},
												"type": "SetVariable"
											}
										}
									},
									"expression": {
										"and": [
											{
												"equals": [
													"@outputs('Insert_or_Update_Quote')['statusCode']",
													200
												]
											}
										]
									},
									"runAfter": {
										"Insert_or_Update_Quote": [
											"Succeeded",
											"Failed"
										]
									},
									"type": "If"
								},
								"Insert_or_Update_Quote": {
									"inputs": {
										"body": "@if(empty(items('For_each-Quote')?['quote']?['Quote']?['OpportunityId']),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(setProperty(items('For_each-Quote')?['quote']?['Quote'],'OpportunityId',body('Insert_Or_Update_opportunity')?['Id']))),'CreatedDate'))),'CreatedById'))),'LastModifiedDate'))),'LastModifiedById'))),'AccountId'),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(items('For_each-Quote')?['quote']?['Quote'])),'CreatedDate'))),'CreatedById'))),'LastModifiedDate'))),'LastModifiedById'))),'AccountId'))",
										"host": {
											"triggerName": "manual",
											"workflow": {
												"id": "[parameters('internal_insert_update_quote_logicAppId')]"
											}
										},
										"retryPolicy": {
											"type": "none"
										}
									},
									"runAfter": {},
									"type": "Workflow"
								},
								"Set_variable_upsertQuote_sub_response_": {
									"inputs": {
										"name": "UpsertQuote_response",
										"value": "@{json(variables('responseMap'))}"
									},
									"runAfter": {
										"Condition_Upsert_Quote_status": [
											"Succeeded"
										]
									},
									"type": "SetVariable"
								}
							},
							"foreach": "@triggerBody()?['Opportunity']?['quote']",
							"runAfter": {},
							"runtimeConfiguration": {
								"concurrency": {
									"repetitions": 1
								}
							},
							"type": "Foreach"
						}
					},
					"expression": {
						"and": [
							{
								"not": {
									"equals": [
										"@xpath(xml(triggerBody()),'.//Opportunity/quote')?[0]",
										"@null"
									]
								}
							},
							{
								"not": {
									"equals": [
										"@xpath(xml(triggerBody()),'.//Opportunity/quote')?[0]",
										"@string('')"
									]
								}
							}
						]
					},
					"runAfter": {
						"Check_-_SIE_SF4S_upsertResponse_Status": [
							"Succeeded"
						]
					},
					"type": "If"
				},
				"Check_-_SIE_SF4S_upsertResponse_Status": {
					"actions": {
						"Check_-_Opportunity_bookingLine": {
							"actions": {
								"for_each_BookingLine": {
									"actions": {
										"Append_response_to_Array_variable_BookingLine": {
											"inputs": {
												"name": "UpsertBookingLine_response",
												"value": "@json(variables('responseMap'))"
											},
											"runAfter": {
												"_Check_UpsertBookingLine_status": [
													"Succeeded"
												]
											},
											"type": "AppendToArrayVariable"
										},
										"Insert_or_Update_BookingLine": {
											"inputs": {
												"body": "@json(string(if(empty(json(body('JsonRemoveNullOrEmptyFunc')?['result']?['restructuredJson'])?['Id']),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(body('JsonRemoveNullOrEmptyFunc')?['result']?['restructuredJson']),'IsDeleted'))),'SystemModstamp'))),'LastActivityDate'))),'S4SWeighted_Order_Intake__c'))),'S4SBusiness_Segment__c'))),'S4SBusiness_Sub_Segment__c'))),'S4SBusiness_Unit__c'))),'S4SDivisions__c'))),'S4SGCK__c'))),'S4SOrder_Intake_EUR__c'))),'S4SOrder_Intake_USD__c'))),'S4SWeighted_Order_Intake_EUR__c'))),'S4SWeighted_Order_Intake_USD__c'))),'S4SPCK__c'))),'S4SSPG__c'),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(body('JsonRemoveNullOrEmptyFunc')?['result']?['restructuredJson']),'S4SOpportunity__c'))),'IsDeleted'))),'SystemModstamp'))),'LastActivityDate'))),'S4SWeighted_Order_Intake__c'))),'S4SBusiness_Segment__c'))),'S4SBusiness_Sub_Segment__c'))),'S4SBusiness_Unit__c'))),'S4SDivisions__c'))),'S4SGCK__c'))),'S4SOrder_Intake_EUR__c'))),'S4SOrder_Intake_USD__c'))),'S4SWeighted_Order_Intake_EUR__c'))),'S4SWeighted_Order_Intake_USD__c'))),'S4SPCK__c'))),'S4SSPG__c'))))",
												"host": {
													"triggerName": "manual",
													"workflow": {
														"id": "${Spiridon_internal_insert_update_bookingline_logicAppId}"
													}
												},
												"retryPolicy": {
													"type": "none"
												}
											},
											"runAfter": {
												"JsonRemoveNullOrEmptyFunc": [
													"Succeeded"
												]
											},
											"type": "Workflow"
										},
										"JsonRemoveNullOrEmptyFunc": {
											"inputs": {
												"body": {
													"CorrelationId": "@{triggerOutputs()['headers']?['correlationid']}",
													"InputRequestBase64": "@{base64(if(empty(items('for_each_BookingLine')?['S4SOpportunity__c']),setProperty(items('for_each_BookingLine'),'S4SOpportunity__c',body('Insert_Or_Update_opportunity')?['Id']),items('for_each_BookingLine')))}",
													"InterfaceName": "internal_insert_update_bookingline_upsertOpportunityPshell",
													"Username": "@{triggerOutputs()['headers']?['Username']}",
													"operation": "JsonRemoveNullOrEmpty"
												},
												"authentication": {
													"type": "Raw",
													"value": "[parameters('functionAppKey')]"
												},
												"function": {
													"id": "[concat(parameters('funcApp'), '/functions/JsonRemoveNullOrEmptyFunc')]"
												}
											},
											"runAfter": {},
											"type": "Function"
										},
										"_Check_UpsertBookingLine_status": {
											"actions": {
												"Set_variable_responseMap": {
													"inputs": {
														"name": "responseMap",
														"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n          \"Id\": \"@{body('Insert_or_Update_BookingLine')?['Id']}\",\n          \"created\": \"@{if(empty(items('for_each_BookingLine')?['Id']),'true','false')}\",\n          \"Status\": \"true\"\n        }\n      }"
													},
													"runAfter": {},
													"type": "SetVariable"
												}
											},
											"else": {
												"actions": {
													"Set_variable_resposneMap_failure_case": {
														"inputs": {
															"name": "responseMap",
															"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n          \"Status\": \"false\",\n          \"Message\": \"@{body('Insert_or_Update_BookingLine')?['message']}\"\n     }\n}"
														},
														"runAfter": {},
														"type": "SetVariable"
													}
												}
											},
											"expression": {
												"and": [
													{
														"equals": [
															"@outputs('Insert_or_Update_BookingLine')['statusCode']",
															200
														]
													}
												]
											},
											"runAfter": {
												"Insert_or_Update_BookingLine": [
													"Succeeded",
													"Failed"
												]
											},
											"type": "If"
										}
									},
									"foreach": "@triggerBody()?['Opportunity']?['bookingLine']",
									"runAfter": {},
									"runtimeConfiguration": {
										"concurrency": {
											"repetitions": 1
										}
									},
									"type": "Foreach"
								}
							},
							"expression": {
								"and": [
									{
										"not": {
											"equals": [
												"@xpath(xml(triggerBody()),'.//Opportunity/bookingLine')?[0]",
												"@null"
											]
										}
									},
									{
										"not": {
											"equals": [
												"@xpath(xml(triggerBody()),'.//Opportunity/bookingLine')?[0]",
												"@string('')"
											]
										}
									}
								]
							},
							"runAfter": {
								"Set_variable_UpsertOpp_response_succes": [
									"Succeeded"
								]
							},
							"type": "If"
						},
						"Check_-_SIE_SF4S_upsertOfferReq_Opportunity_involvedAccounts": {
							"actions": {
								"for_each_involvedAccount": {
									"actions": {
										"Append_to_array_variable_Inv_Acc_Response": {
											"inputs": {
												"name": "UpsertInvolvedAccounts_response",
												"value": "@json(variables('responseMap'))"
											},
											"runAfter": {
												"Check_involveaccount_Upsert_Status": [
													"Succeeded"
												]
											},
											"type": "AppendToArrayVariable"
										},
										"Check_involveaccount_Upsert_Status": {
											"actions": {
												"Set_variable_responseMap_Inv_Acc_success": {
													"inputs": {
														"name": "responseMap",
														"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n          \"Id\": \"@{body('Insert_or_Update_InvolvedAccounts')?['Id']}\",\n          \"created\": \"@{if(empty(items('for_each_involvedAccount')?['Id']), 'true', 'false')}\",\n          \"Status\": \"true\"\n        }\n      }"
													},
													"runAfter": {},
													"type": "SetVariable"
												}
											},
											"else": {
												"actions": {
													"Set_variable_responseMap_Inv_Acc_failure": {
														"inputs": {
															"name": "responseMap",
															"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n         \"Status\": \"false\",\n          \"Message\": \"@{body('Insert_or_Update_InvolvedAccounts')?['message']}\"\n     }\n}"
														},
														"runAfter": {},
														"type": "SetVariable"
													}
												}
											},
											"expression": {
												"and": [
													{
														"equals": [
															"@outputs('Insert_or_Update_InvolvedAccounts')['statusCode']",
															200
														]
													}
												]
											},
											"runAfter": {
												"Insert_or_Update_InvolvedAccounts": [
													"Succeeded",
													"Failed"
												]
											},
											"type": "If"
										},
										"Insert_or_Update_InvolvedAccounts": {
											"inputs": {
												"body": "@json(string(if(empty(json(body('JsonRemoveNullOrEmptyFunc_3')?['result']?['restructuredJson'])?['Id']),removeProperty(json(string(removeProperty(json(string(removeProperty(json(body('JsonRemoveNullOrEmptyFunc_3')?['result']?['restructuredJson']),'IsDeleted'))),'SystemModstamp'))),'LastActivityDate'),removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(body('JsonRemoveNullOrEmptyFunc_3')?['result']?['restructuredJson']),'S4SOpportunity__c'))),'S4SAccount_Name__c'))),'IsDeleted'))),'SystemModstamp'))),'LastActivityDate'))))",
												"host": {
													"triggerName": "manual",
													"workflow": {
														"id": "${goi_internal_insert_update_InvolvedAccounts_logicAppId}"
													}
												},
												"retryPolicy": {
													"type": "none"
												}
											},
											"runAfter": {
												"JsonRemoveNullOrEmptyFunc_3": [
													"Succeeded"
												]
											},
											"type": "Workflow"
										},
										"JsonRemoveNullOrEmptyFunc_3": {
											"inputs": {
												"body": {
													"CorrelationId": "@{triggerOutputs()['headers']?['correlationid']}",
													"InputRequestBase64": "@{base64(if(empty(items('for_each_involvedAccount')?['S4SOpportunity__c']),setProperty(items('for_each_involvedAccount'),'S4SOpportunity__c',body('Insert_Or_Update_opportunity')?['Id']),items('for_each_involvedAccount')))}",
													"InterfaceName": "internal_insert_update_involvedaccounts_upsertOpportunityPshell",
													"Username": "@{triggerOutputs()['headers']?['Username']}",
													"operation": "JsonRemoveNullOrEmpty"
												},
												"authentication": {
													"type": "Raw",
													"value": "[parameters('functionAppKey')]"
												},
												"function": {
													"id": "[concat(parameters('funcApp'), '/functions/JsonRemoveNullOrEmptyFunc')]"
												},
												"retryPolicy": {
													"type": "none"
												}
											},
											"runAfter": {},
											"type": "Function"
										}
									},
									"foreach": "@triggerBody()?['Opportunity']?['involvedAccounts']",
									"runAfter": {},
									"runtimeConfiguration": {
										"concurrency": {
											"repetitions": 1
										}
									},
									"type": "Foreach"
								}
							},
							"expression": {
								"and": [
									{
										"not": {
											"equals": [
												"@xpath(xml(triggerBody()),'.//Opportunity/involvedAccounts')?[0]",
												"@null"
											]
										}
									},
									{
										"not": {
											"equals": [
												"@xpath(xml(triggerBody()),'.//Opportunity/involvedAccounts')?[0]",
												"@string('')"
											]
										}
									}
								]
							},
							"runAfter": {
								"Check_-_Opportunity_bookingLine": [
									"Succeeded"
								]
							},
							"type": "If"
						},
						"Set_variable_UpsertOpp_response_succes": {
							"inputs": {
								"name": "UpsertOpp_response",
								"value": "{\n         \"SIE_SF4S_upsertResponse\": {\n        \"Id\": \"@{body('Insert_Or_Update_opportunity')?['Id']}\",\n        \"created\": \"@{if(empty(variables('Id')), 'true', 'false')}\",\n        \"Status\": \"true\"\n      }"
							},
							"runAfter": {},
							"type": "SetVariable"
						},
						"check-_SIE_SF4S_upsertOfferReq_Opportunity_opportunityLine": {
							"actions": {
								"For_each-OpportunityLine": {
									"actions": {
										"each-Opportunity_opportunityLine": {
											"actions": {
												"Append_to_array_variable": {
													"inputs": {
														"name": "UpsertoppLine_response",
														"value": "@json(variables('responseMap'))"
													},
													"runAfter": {
														"Check_UpsertOppLineItem_status": [
															"Succeeded"
														]
													},
													"type": "AppendToArrayVariable"
												},
												"Check_UpsertOppLineItem_status": {
													"actions": {
														"Set_variable_responseMap_OppLineItem": {
															"inputs": {
																"name": "responseMap",
																"value": "{\n            \"SIE_SF4S_upsertResponse\": {\n              \"Id\": \"@{body('Insert_or_Update-SIE_SF4S_upsertOppLineItem')?['Id']}\",\n              \"created\": \"@{if(empty(items('each-Opportunity_opportunityLine')?['Id']),'true','false')}\",\n              \"Status\": \"true\"\n            }\n          }"
															},
															"runAfter": {},
															"type": "SetVariable"
														}
													},
													"else": {
														"actions": {
															"Set_variable_responseMap_OppLineItem_Failure": {
																"inputs": {
																	"name": "responseMap",
																	"value": " {\n        \"SIE_SF4S_upsertResponse\": {\n          \"Status\": \"false\",\n          \"Message\": \"@{body('Insert_or_Update-SIE_SF4S_upsertOppLineItem')?['error']?['innerError']?['message']}\"\n     }\n}"
																},
																"runAfter": {},
																"type": "SetVariable"
															}
														}
													},
													"expression": {
														"and": [
															{
																"equals": [
																	"@outputs('Insert_or_Update-SIE_SF4S_upsertOppLineItem')?['statusCode']",
																	200
																]
															}
														]
													},
													"runAfter": {
														"Insert_or_Update-SIE_SF4S_upsertOppLineItem": [
															"Succeeded",
															"Failed"
														]
													},
													"type": "If"
												},
												"Insert_or_Update-SIE_SF4S_upsertOppLineItem": {
													"inputs": {
														"body": {
															"Description": "@{items('each-Opportunity_opportunityLine')?['Description']}",
															"Discount": "@items('each-Opportunity_opportunityLine')?['Discount']",
															"Quantity": "@items('each-Opportunity_opportunityLine')?['Quantity']",
															"S4SCategory__c": "@{items('each-Opportunity_opportunityLine')?['S4SCategory__c']}",
															"ServiceDate": "@{items('each-Opportunity_opportunityLine')?['ServiceDate']}",
															"TotalPrice": "@items('each-Opportunity_opportunityLine')?['TotalPrice']",
															"UnitPrice": "@items('each-Opportunity_opportunityLine')?['UnitPrice']"
														},
														"host": {
															"connection": {
																"name": "@parameters('$connections')['salesForceConnection']['connectionId']"
															}
														},
														"method": "patch",
														"path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('OpportunityLineItem'))}/externalIdFields/@{encodeURIComponent(encodeURIComponent('Id'))}/@{encodeURIComponent(encodeURIComponent(items('each-Opportunity_opportunityLine')?['Id']))}",
														"retryPolicy": {
															"type": "none"
														}
													},
													"runAfter": {},
													"type": "ApiConnection"
												}
											},
											"foreach": "@item()?['OpportunityLineItem']",
											"runAfter": {},
											"type": "Foreach"
										}
									},
									"foreach": "@triggerBody()?['Opportunity']?['opportunityLine']",
									"runAfter": {},
									"runtimeConfiguration": {
										"concurrency": {
											"repetitions": 1
										}
									},
									"type": "Foreach"
								}
							},
							"expression": {
								"and": [
									{
										"not": {
											"equals": [
												"@xpath(xml(triggerBody()),'.//Opportunity/opportunityLine')?[0]",
												"@null"
											]
										}
									},
									{
										"not": {
											"equals": [
												"@xpath(xml(triggerBody()),'.//Opportunity/opportunityLine')?[0]",
												"@string('')"
											]
										}
									}
								]
							},
							"runAfter": {
								"Check_-_SIE_SF4S_upsertOfferReq_Opportunity_involvedAccounts": [
									"Succeeded"
								]
							},
							"type": "If"
						}
					},
					"else": {
						"actions": {
							"Error_Response": {
								"inputs": {
									"body": "@variables('UpsertOpp_response')",
									"headers": {
										"Content-Type": "application/json"
									},
									"statusCode": "@outputs('Insert_Or_Update_opportunity')['statusCode']"
								},
								"kind": "http",
								"runAfter": {
									"Set_variable_UpsertOpp_response_failure": [
										"Succeeded"
									]
								},
								"type": "Response"
							},
							"Set_variable_UpsertOpp_response_failure": {
								"inputs": {
									"name": "UpsertOpp_response",
									"value": "{\n    \"Opportunity\": {\n      \"SIE_SF4S_upsertResponse\": {\n        \"Status\": \"false\",\n       \"Message\": \"@{body('Insert_Or_Update_opportunity')?['message']}\"\n         }\n      }\n}"
								},
								"runAfter": {},
								"type": "SetVariable"
							},
							"Error_Terminate": {
								"inputs": {
									"runStatus": "Failed"
								},
								"runAfter": {
									"Error_Response": [
										"Succeeded"
									]
								},
								"type": "Terminate"
							}
						}
					},
					"expression": {
						"or": [
							{
								"equals": [
									"@outputs('Insert_Or_Update_opportunity')['statusCode']",
									200
								]
							},
							{
								"equals": [
									"@outputs('Insert_Or_Update_opportunity')['statusCode']",
									201
								]
							}
						]
					},
					"runAfter": {
						"Insert_Or_Update_opportunity": [
							"Succeeded",
							"Failed"
						]
					},
					"type": "If"
				},
				"Compose_response": {
					"inputs": {
						"SIE_SF4S_upsertOppObjectsRes": {
							"Opportunity": "@json(variables('UpsertOpp_response'))",
							"bookingLine": "@variables('UpsertBookingLine_response')",
							"involvedAccounts": "@variables('UpsertInvolvedAccounts_response')",
							"oppLine": "@variables('UpsertoppLine_response')",
							"quote": "@variables('UpsertQuoteFinalResponse')"
						}
					},
					"runAfter": {
						"Check-SIE_SF4S_upsertOfferReq_Opportunity_quote": [
							"Succeeded",
							"Failed"
						]
					},
					"type": "Compose"
				},
				"Insert_Or_Update_opportunity": {
					"inputs": {
						"body": "@json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(string(removeProperty(json(variables('xmlstring'))['Opportunity'],'bookingLine'))),'involvedAccounts'))),'quote'))),'opportunityLine'))),'S4STranche'))),'opportunityTeamMember'))),'ProximityOpportunity'))),'fieldsToNull')))",
						"host": {
							"triggerName": "manual",
							"workflow": {
								"id": "[parameters('InsertUpdateOpportunity_logicApp_id')]"
							}
						},
						"method": "patch",
						"path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('Opportunity'))}/externalIdFields/@{encodeURIComponent(encodeURIComponent('S4SOPPORTUNITY_LegacyID__c'))}/@{encodeURIComponent(encodeURIComponent(xpath(xml(triggerBody()),'.//S4SOPPORTUNITY_LegacyID__c/text()')?[0]))}",
						"retryPolicy": {
							"type": "none"
						}
					},
					"runAfter": {},
					"type": "Workflow"
				},
				"RemoveNullOrEmpty_from_Response": {
					"inputs": {
						"body": {
							"CorrelationId": "@{triggerOutputs()['headers']?['correlationid']}",
							"InputRequestBase64": "@{base64(outputs('Compose_response'))}",
							"InterfaceName": "upsertOpportunityPshell",
							"Username": "@{triggerOutputs()['headers']?['Username']}",
							"operation": "JsonRemoveNullOrEmpty"
						},
						"authentication": {
							"type": "Raw",
							"value": "[parameters('functionAppKey')]"
						},
						"function": {
							"id": "[concat(parameters('funcApp'), '/functions/JsonRemoveNullOrEmptyFunc')]"
						}
					},
					"runAfter": {
						"Compose_response": [
							"Succeeded"
						]
					},
					"type": "Function"
				},
				"Final_Response": {
					"inputs": {
						"body": "@json(body('RemoveNullOrEmpty_from_Response')?['result']?['restructuredJson'])",
						"statusCode": 200
					},
					"kind": "Http",
					"runAfter": {
						"RemoveNullOrEmpty_from_Response": [
							"Succeeded"
						]
					},
					"type": "Response"
				}
			},
			"runAfter": {
				"Initialize_variable-Response": [
					"Succeeded"
				],
				"Initialize_variable-responsemap": [
					"Succeeded"
				],
				"Initialize_variable_-_xmlstring": [
					"Succeeded"
				],
				"Initialize_variable_Id": [
					"Succeeded"
				],
				"Initialize_variable_QuoteFinalResponse": [
					"Succeeded"
				],
				"Initialize_variable_UpsertBookingLine_response": [
					"Succeeded"
				],
				"Initialize_variable_UpsertInvolvedAccounts_response": [
					"Succeeded"
				],
				"Initialize_variable_UpsertOpp_response": [
					"Succeeded"
				],
				"Initialize_variable_UpsertProxOpp_response": [
					"Succeeded"
				],
				"Initialize_variable_UpsertQuoteLine_response": [
					"Succeeded"
				],
				"Initialize_variable_UpsertQuote_response": [
					"Succeeded"
				],
				"Initialize_variable_UpsertoppLine_response": [
					"Succeeded"
				]
			},
			"trackedProperties": {
				"apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'external')}",
				"citizenName": "c00031",
				"correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
				"interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'PShell')}",
				"interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
				"interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
				"operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'upsertOppObjects')}",
				"parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
				"clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
				"clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
			},
			"type": "Scope"
		}
	},
	"contentVersion": "1.0.0.0",
	"outputs": {},
	"parameters": {
		"$connections": {
			"defaultValue": {},
			"type": "Object"
		}
	},
	"triggers": {
		"manual": {
			"inputs": {
				"schema": {}
			},
			"kind": "Http",
			"type": "Request"
		}
	}
}