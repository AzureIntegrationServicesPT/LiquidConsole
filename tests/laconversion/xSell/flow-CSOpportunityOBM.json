{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "Catch": {
            "actions": {
                "Reply_Error": {
                    "inputs": {
                        "body": "@replace(variables('Response'),'##RESULT##','0')",
                        "statusCode": 500
                    },
                    "kind": "Http",
                    "runAfter": {},
                    "type": "Response"
                },
                "Terminate_Failed": {
                    "inputs": {
                        "runStatus": "Failed"
                    },
                    "runAfter": {
                        "Reply_Error": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                }
            },
            "runAfter": {
                "Try": [
                    "Failed"
                ]
            },
            "type": "Scope"
        },
        "Convert_Input_to_Json": {
            "inputs": {
                "variables": [
                    {
                        "name": "requestJson",
                        "type": "string",
                        "value": "@{json(xml(triggerBody()))}"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "GetConfiguration": {
            "inputs": {
                "body": {
                    "key": "obm-config"
                },
                "host": {
                    "triggerName": "manual",
                    "workflow": {
                        "id": "${getConfiguration_logicAppId}"
                    }
                },
                "retryPolicy": {
                    "type": "none"
                }
            },
            "runAfter": {},
             "runtimeConfiguration": {
                    "secureData": {
                        "properties": [
                            "outputs"
                        ]
                    }
                },
            "type": "Workflow"
        },
        "Initialize_Response": {
            "inputs": {
                "variables": [
                    {
                        "name": "Response",
                        "type": "string",
                        "value": "<soapenv:Envelope \nxmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>##RESULT##</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable": {
            "inputs": {
                "variables": [
                    {
                        "name": "Notifications",
                        "type": "array"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Try": {
            "actions": {
                "Compose": {
                    "inputs": "@if(greater(int(xpath(xml(triggerBody()), 'count(/*[local-name()=\"soapenv:Envelope\"]/*[local-name()=\"soapenv:Body\"]/*[local-name()=\"notifications\"]/*[local-name()=\"Notification\"])')),1),body('Parse_JSON')?['soapenv:Envelope']?['soapenv:Body']?['notifications']?['Notification'],createArray(body('Parse_JSON')?['soapenv:Envelope']?['soapenv:Body']?['notifications']?['Notification']))",
                    "runAfter": {
                        "Parse_JSON": [
                            "Succeeded"
                        ]
                    },
                    "type": "Compose"
                },
                "For_each": {
                    "actions": {
                        "Send_Update": {
                            "inputs": {
                                "authentication": {
                                    "password": "@json(body('GetConfiguration'))?['CrossSelling']?['password']",
                                    "type": "Basic",
                                    "username": "@json(body('GetConfiguration'))?['CrossSelling']?['userName']"
                                },
                                "body": {
                                    "leadId": "@items('For_Each')?['sObject']?['sf:S4SExpert_Based_Cross_Selling_ID__c']",
                                    "remindPeriod": "@items('For_Each')?['sObject']?['sf:S4SFollow_Up_Duration__c']",
                                    "siesalesId": "@items('For_Each')?['sObject']?['sf:Id']",
                                    "statusId": "@items('For_Each')?['sObject']?['sf:S4SStage__c']"
                                },
                                "headers": {
                                    "Content-Type": "application/json"
                                },
                                "method": "POST",
                                "uri": "@{concat(json(body('GetConfiguration'))?['CrossSelling']['url'], items('For_Each')?['sObject']?['sf:S4SExpert_Based_Cross_Selling_ID__c'], '/', items('For_Each')?['sObject']?['sf:Id'], '/statuses')}"
                            },
                            "runAfter": {},
                            "type": "Http"
                        }
                    },
                    "foreach": "@variables('Notifications')",
                    "runAfter": {
                        "Set_variable": [
                            "Succeeded"
                        ]
                    },
                    "runtimeConfiguration": {
                        "concurrency": {
                            "repetitions": 1
                        }
                    },
                    "type": "Foreach"
                },
                "Parse_JSON": {
                    "inputs": {
                        "content": "@variables('requestJson')",
                        "schema": {
                            "properties": {
                                "?xml": {
                                    "properties": {
                                        "@@encoding": {
                                            "type": "string"
                                        },
                                        "@@version": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "Envelope": {
                                    "properties": {
                                        "@@xmlns": {
                                            "type": "string"
                                        },
                                        "Body": {
                                            "properties": {
                                                "notifications": {
                                                    "properties": {
                                                        "@@xmlns": {
                                                            "type": "string"
                                                        },
                                                        "@@xmlns:xsi": {
                                                            "type": "string"
                                                        },
                                                        "ActionId": {
                                                            "type": "string"
                                                        },
                                                        "EnterpriseUrl": {
                                                            "type": "string"
                                                        },
                                                        "Notification": {
                                                            "items": {
                                                                "properties": {
                                                                    "Id": {
                                                                        "type": "string"
                                                                    },
                                                                    "sObject": {
                                                                        "properties": {
                                                                            "Id": {
                                                                                "properties": {
                                                                                    "#text": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "@@xmlns": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "S4SExpert_Based_Cross_Selling_ID__c": {
                                                                                "properties": {
                                                                                    "#text": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "@@xmlns": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "S4SFollow_Up_Duration__c": {
                                                                                "properties": {
                                                                                    "#text": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "@@xmlns": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "S4SStage__c": {
                                                                                "properties": {
                                                                                    "#text": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "@@xmlns": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "fieldsToNull": {
                                                                                "properties": {
                                                                                    "#text": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "@@xmlns": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "Id",
                                                                    "sObject"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": [
                                                                "array",
                                                                "object"
                                                            ]
                                                        },
                                                        "OrganizationId": {
                                                            "type": "string"
                                                        },
                                                        "PartnerUrl": {
                                                            "type": "string"
                                                        },
                                                        "SessionId": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "runAfter": {},
                    "type": "ParseJson"
                },
                "Response": {
                    "inputs": {
                        "body": "@replace(variables('Response'),'##RESULT##','1')",
                        "statusCode": 200
                    },
                    "kind": "Http",
                    "runAfter": {
                        "For_each": [
                            "Succeeded"
                        ]
                    },
                    "type": "Response"
                },
                "Set_variable": {
                    "inputs": {
                        "name": "Notifications",
                        "value": "@outputs('Compose')"
                    },
                    "runAfter": {
                        "Compose": [
                            "Succeeded"
                        ]
                    },
                    "type": "SetVariable"
                }
            },
            "runAfter": {
                "Convert_Input_to_Json": [
                    "Succeeded"
                ],
                "GetConfiguration": [
                    "Succeeded"
                ],
                "Initialize_Response": [
                    "Succeeded"
                ],
                "Initialize_variable": [
                    "Succeeded"
                ]
            },
            "type": "Scope"
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {},
    "triggers": {
        "manual": {
            "inputs": {},
            "kind": "Http",
            "type": "Request"
        }
    }
}