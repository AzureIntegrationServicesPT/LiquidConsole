{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
    "Initialize_SiteKeyArray": {
        "inputs": {
            "variables": [
                {
                    "name": "sitekeyArray",
                    "type": "array"
                }
            ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
    },
    "Initialize_isSitekeyValid": {
        "inputs": {
            "variables": [
                {
                    "name": "isSitekeyValid",
                    "type": "boolean",
                    "value": false
                }
            ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
    },
    "Scope_-_Catch": {
        "actions": {
            "Send_error": {
                "inputs": {
                    "body": {
                        "status": "failure"
                    },
                    "statusCode": 500
                },
                "kind": "Http",
                "runAfter": {},
                "type": "Response"
            },
            "Terminate_Failed": {
                "inputs": {
                    "runStatus": "Failed"
                },
                "runAfter": {
                    "Send_error": [
                        "Succeeded"
                    ]
                },
                "type": "Terminate"
            }
        },
        "runAfter": {
            "Scope_-_Try": [
                "Failed",
                "Skipped",
                "TimedOut"
            ]
        },
        "type": "Scope"
    },
    "Scope_-_Fetch_Configuration": {
        "actions": {
            "GetConfiguration": {
                "inputs": {
                    "body": {
                        "key": "web-sso-config"
                    },
                    "host": {
                        "triggerName": "manual",
                        "workflow": {
                            "id": "${getConfiguration_logicAppId}"
                        }
                    },
                    "retryPolicy": {
                        "type": "none"
                    }
                },
                "runAfter": {},
                "type": "Workflow"
            }
        },
        "runAfter": {
            "Initialize_SiteKeyArray": [
                "Succeeded"
            ],
            "Initialize_isSitekeyValid": [
                "Succeeded"
            ],
            "output": [
                "Succeeded"
            ],
            "varResponse": [
                "Succeeded"
            ]
        },
        "type": "Scope"
    },
    "Scope_-_Try": {
        "actions": {
            "For_each": {
                "actions": {
                    "For_each_UID": {
                        "actions": {
                            "Check_if_Sitekey_is_valid": {
                                "actions": {
                                    "Scope-Add_Or_Remove_Membership": {
                                        "actions": {
                                            "Check_membership_status": {
                                                "actions": {
                                                    "Prepare_Remove_Response": {
                                                        "inputs": {
                                                            "name": "varResponse",
                                                            "value": {
                                                                "AttributeInfo": "@{json(xml(body('Remove_membership')))?['s:Envelope']?['s:Body']?['RemoveResponse']?['RemoveResult']?['a:Error']?['a:Description']}",
                                                                "AttributeKey": "@{json(xml(body('Remove_membership')))?['s:Envelope']?['s:Body']?['RemoveResponse']?['RemoveResult']?['a:Error']?['a:Code']}",
                                                                "Message": " @{json(xml(body('Remove_membership')))?['s:Envelope']?['s:Body']?['RemoveResponse']?['RemoveResult']?['a:Error']?['a:Key']}",
                                                                "Step": "Remove Authorisation"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Remove_membership": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "AppendToArrayVariable"
                                                    },
                                                    "Remove_membership": {
                                                        "inputs": {
                                                            "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\" xmlns:ext=\"http://schemas.datacontract.org/2004/07/ExtranetRoleManagement.webservice\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <tem:Remove>\n         <!--Optional:-->\n         <tem:role>\n            <!--Optional:-->\n            <ext:RoleName>@{if(equals(outputs('Split_Sitekey')?[0],'Highspot'),'partner',json(body('GetConfiguration'))?['authorisation_roleName'])}</ext:RoleName>\n            <!--Optional:-->\n            <ext:RoleType>@{json(body('GetConfiguration'))?['authorisation_roleType']}</ext:RoleType>\n            <!--Optional:-->\n            <ext:SiteKey>@{outputs('Split_Sitekey')?[1]}</ext:SiteKey>\n            <!--Optional:-->\n            <ext:SystemKey>@{outputs('Split_Sitekey')?[0]}</ext:SystemKey>\n         </tem:role>\n         <!--Optional:-->\n         <tem:account>\n            <!--Optional:-->\n            <ext:SSOUID>@{items('For_each_UID')}</ext:SSOUID>\n         </tem:account>\n         <!--Optional:-->\n         <tem:authorisation>\n            <!--Optional:-->\n            <ext:SecurityToken>@{if(equals(outputs('Split_Sitekey')?[0],'Highspot'),json(body('GetConfiguration'))?['authorisation_token_highspot'],json(body('GetConfiguration'))?['authorisation_token'])}</ext:SecurityToken>\n         </tem:authorisation>\n      </tem:Remove>\n   </soapenv:Body>\n</soapenv:Envelope>",
                                                            "headers": {
                                                                "Content-Type": "text/xml; charset=UTF-8",
                                                                "Host": "@{json(body('GetConfiguration'))?['host']}",
                                                                "SOAPAction": "http://tempuri.org/IAuthorisation/Remove"
                                                            },
                                                            "method": "POST",
                                                            "uri": "@{json(body('GetConfiguration'))?['baseUrl']}/@{json(body('GetConfiguration'))?['authUrl']}"
                                                        },
                                                        "runAfter": {},
                                                        "type": "Http"
                                                    }
                                                },
                                                "else": {
                                                    "actions": {
                                                        "Add_membership": {
                                                            "inputs": {
                                                                "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\" xmlns:ext=\"http://schemas.datacontract.org/2004/07/ExtranetRoleManagement.webservice\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <tem:Add>\n         <!--Optional:-->\n         <tem:role>\n            <!--Optional:-->\n            <ext:RoleName>@{if(equals(outputs('Split_Sitekey')?[0],'Highspot'),'partner',json(body('GetConfiguration'))?['authorisation_roleName'])}</ext:RoleName>\n            <!--Optional:-->\n            <ext:RoleType>@{json(body('GetConfiguration'))?['authorisation_roleType']}</ext:RoleType>\n            <!--Optional:-->\n            <ext:SiteKey>@{outputs('Split_Sitekey')?[1]}</ext:SiteKey>\n            <!--Optional:-->\n            <ext:SystemKey>@{outputs('Split_Sitekey')?[0]}</ext:SystemKey>\n         </tem:role>\n         <!--Optional:-->\n         <tem:account>\n            <!--Optional:-->\n            <ext:SSOUID>@{items('For_each_UID')}</ext:SSOUID>\n         </tem:account>\n         <!--Optional:-->\n         <tem:authorisation>\n            <!--Optional:-->\n            <ext:SecurityToken>@{if(equals(outputs('Split_Sitekey')?[0],'Highspot'),json(body('GetConfiguration'))?['authorisation_token_highspot'],json(body('GetConfiguration'))?['authorisation_token'])}</ext:SecurityToken>\n         </tem:authorisation>\n      </tem:Add>\n   </soapenv:Body>\n</soapenv:Envelope>",
                                                                "headers": {
                                                                    "Content-Type": "text/xml; charset=UTF-8",
                                                                    "Host": "@{json(body('GetConfiguration'))?['host']}",
                                                                    "SOAPAction": "http://tempuri.org/IAuthorisation/Add"
                                                                },
                                                                "method": "POST",
                                                                "uri": "@{json(body('GetConfiguration'))?['baseUrl']}/@{json(body('GetConfiguration'))?['authUrl']}"
                                                            },
                                                            "runAfter": {},
                                                            "type": "Http"
                                                        },
                                                        "Prepare_Add_Response": {
                                                            "inputs": {
                                                                "name": "varResponse",
                                                                "value": {
                                                                    "AttributeInfo": "@{json(xml(body('Add_membership')))?['s:Envelope']?['s:Body']?['AddResponse']?['AddResult']?['a:Error']?['a:Description']}",
                                                                    "AttributeKey": "@{json(xml(body('Add_membership')))?['s:Envelope']?['s:Body']?['AddResponse']?['AddResult']?['a:Error']?['a:Code']}",
                                                                    "Message": " @{json(xml(body('Add_membership')))?['s:Envelope']?['s:Body']?['AddResponse']?['AddResult']?['a:Error']?['a:Key']}",
                                                                    "Step": "Add Authorisation"
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Add_membership": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "AppendToArrayVariable"
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "or": [
                                                        {
                                                            "equals": [
                                                                "@items('For_each')?['MembershipStatus']",
                                                                "@string('Deleted')"
                                                            ]
                                                        },
                                                        {
                                                            "equals": [
                                                                "@items('For_each')?['MembershipStatus']",
                                                                "@string('Cancelled')"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "runAfter": {},
                                                "type": "If"
                                            },
                                            "Set_Output": {
                                                "inputs": {
                                                    "name": "output",
                                                    "value": "{\n\"ErrorMessage\" :@{variables('varResponse')}\n}"
                                                },
                                                "runAfter": {
                                                    "Check_membership_status": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    }
                                },
                                "else": {
                                    "actions": {
                                        "Log_output": {
                                            "inputs": {
                                                "name": "output",
                                                "value": "{\n\"ErrorMessage\" :\"Site Key is invalid. Missing / \"\n}"
                                            },
                                            "runAfter": {},
                                            "type": "SetVariable"
                                        }
                                    }
                                },
                                "expression": {
                                    "or": [
                                        {
                                            "greaterOrEquals": [
                                                "@length(outputs('Split_Sitekey'))",
                                                2
                                            ]
                                        }
                                    ]
                                },
                                "runAfter": {
                                    "Split_Sitekey": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "If"
                            },
                            "Split_Sitekey": {
                                "inputs": "@split(items('For_each')?['SiteKey'],'/')",
                                "runAfter": {},
                                "type": "Compose"
                            }
                        },
                        "foreach": "@items('For_each')?['ContactUID']",
                        "runAfter": {},
                        "type": "Foreach"
                    }
                },
                "foreach": "@triggerBody()?['PartnerMembership']",
                "runAfter": {},
                "type": "Foreach"
            },
            "Response": {
                "inputs": {
                    "body": {
                        "status": "success"
                    },
                    "headers": {
                        "Content-Type": "application/json"
                    },
                    "statusCode": 200
                },
                "kind": "Http",
                "runAfter": {
                    "For_each": [
                        "Succeeded"
                    ]
                },
                "type": "Response"
            }
        },
        "runAfter": {
            "Scope_-_Fetch_Configuration": [
                "Succeeded"
            ]
        },
        "trackedProperties": {
            "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'not-defined')}",
            "citizenName": "c00031",
            "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
            "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'webSSO')}",
            "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
            "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'non-defined')}",
            "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'webSSOInitiateModuleSync')}",
            "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
            "clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
            "clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
            },
        "type": "Scope"
    },
    "output": {
        "inputs": {
            "variables": [
                {
                    "name": "output",
                    "type": "string"
                }
            ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
    },
    "varResponse": {
        "inputs": {
            "variables": [
                {
                    "name": "varResponse",
                    "type": "array"
                }
            ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
    }
},
"contentVersion": "1.0.0.0",
"outputs": {},
"parameters": {},
"triggers": {
    "manual": {
        "inputs": {
            "schema": {
                "properties": {
                    "PartnerMembership": {
                        "items": {
                            "properties": {
                                "ContactUID": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "MembershipStatus": {
                                    "type": "string"
                                },
                                "SiteKey": {
                                    "type": "string"
                                },
                                "SiteName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ContactUID",
                                "SiteKey",
                                "SiteName",
                                "MembershipStatus"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            }
        },
        "kind": "Http",
        "type": "Request"
    }
}
}