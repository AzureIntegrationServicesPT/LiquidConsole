{
	"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
	"actions": {
		"Catch-Scope": {
			"actions": {
				"Copy_file_to_error": {
					"inputs": {
						"headers": {
							"ReadFileMetadataFromServer": true
						},
						"host": {
							"connection": {
								"name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
							}
						},
						"method": "post",
						"path": "/datasets/default/copyFile",
						"queries": {
							"destination": "@parameters('ErrorPath')",
							"overwrite": false,
							"queryParametersSingleEncoded": true,
							"source": "@triggerBody()?['Path']"
						}
					},
					"runAfter": {},
					"type": "ApiConnection"
				},
				"Delete_file_from_Incoming_directory_-Failed": {
					"inputs": {
						"headers": {
							"SkipDeleteIfFileNotFoundOnServer": true
						},
						"host": {
							"connection": {
								"name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
							}
						},
						"method": "delete",
						"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(triggerBody()?['Path']))}"
					},
					"runAfter": {
						"logic-c00031-NonSFS_internal_sf4sLog-weu-dev_-_Failed": [
							"Succeeded"
						]
					},
					"type": "ApiConnection"
				},
				"Terminate_-_Failed": {
					"inputs": {
						"runError": {
							"message": "Error while proccessing a file"
						},
						"runStatus": "Failed"
					},
					"runAfter": {
						"Delete_file_from_Incoming_directory_-Failed": [
							"Succeeded",
							"TimedOut",
							"Failed"
						]
					},
					"type": "Terminate"
				},
				"logic-c00031-NonSFS_internal_sf4sLog-weu-dev_-_Failed": {
					"inputs": {
						"body": {
							"message": "DebitorUpload interface failed",
							"severity": "INFO"
						},
						"headers": {
							"interfaceName": "DebitorUpload",
							"runID": "@{workflow()['run']['name']}"
						},
						"host": {
							"triggerName": "manual",
							"workflow": {
								"id": "${nonsfs_internal_sf4sLog_logicAppId}"
							}
						}
					},
					"runAfter": {
						"Copy_file_to_error": [
							"Succeeded"
						]
					},
					"type": "Workflow"
				}
			},
			"runAfter": {
				"Try-Scope": [
					"TimedOut",
					"Skipped",
					"Failed"
				]
			},
			"type": "Scope"
		},
		"Try-Scope": {
			"actions": {
				"Condition_on_file_MediaType": {
					"actions": {
						"BlobToZipConverterFunction": {
							"inputs": {
								"body": {
									"blobContainerName": "@{parameters('BlobContainerName')}",
									"incomingBlobPath": "@{workflow()['run']['name']}/incoming",
									"incominigBlobName": "@{triggerBody()?['Name']}",
									"outcomingBlobPath": "@{workflow()['run']['name']}/zip"
								},
								"authentication": {
									"type": "Raw",
									"value": "[parameters('functionAppKey')]"
								},
								"function": {
									"id": "[concat(parameters('funcApp'), '/functions/BlobToZipConverterFunction')]"
								}
							},
							"runAfter": {
								"Create_blob_(V2)": [
									"Succeeded"
								]
							},
							"type": "Function"
						},
						"Create_blob_(V2)": {
							"inputs": {
								"body": "@body('Get_incoming_file_content')",
								"headers": {
									"ReadFileMetadataFromServer": true
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
									}
								},
								"method": "post",
								"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('${st_name}'))}/files",
								"queries": {
									"folderPath": "@{parameters('blobContainerName')}/@{workflow()['run']['name']}/incoming",
									"name": "@triggerBody()?['Name']",
									"queryParametersSingleEncoded": true
								}
							},
							"runAfter": {
								"Get_incoming_file_content": [
									"Succeeded"
								]
							},
							"runtimeConfiguration": {
								"contentTransfer": {
									"transferMode": "Chunked"
								}
							},
							"type": "ApiConnection"
						},
						"Create_file_in_working_directory": {
							"inputs": {
								"body": "@body('Get_zip_blob_content_(V2)')",
								"headers": {
									"ReadFileMetadataFromServer": false
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
									}
								},
								"method": "post",
								"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
								"queries": {
									"folderPath": "@parameters('WorkingPath')",
									"name": "@{substring(triggerBody()?['Name'], 0, sub(length(triggerBody()?['Name']), 4))}(@{convertTimeZone(utcNow(), 'UTC', 'Central Europe Standard Time')}).zip",
									"queryParametersSingleEncoded": true
								}
							},
							"runAfter": {
								"Get_zip_blob_content_(V2)": [
									"Succeeded"
								]
							},
							"runtimeConfiguration": {
								"contentTransfer": {
									"transferMode": "Chunked",
									"uploadChunkSizeInMB": 49
								}
							},
							"type": "ApiConnection"
						},
						"Delete_blob_(V2)": {
							"inputs": {
								"headers": {
									"SkipDeleteIfFileNotFoundOnServer": false
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
									}
								},
								"method": "delete",
								"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(parameters('BlobContainerName'),'/',body('BlobToZipConverterFunction')?['Value']))}"
							},
							"runAfter": {
								"Create_file_in_working_directory": [
									"Succeeded"
								]
							},
							"type": "ApiConnection"
						},
						"Delete_file_from_Incoming_dir": {
							"inputs": {
								"headers": {
									"SkipDeleteIfFileNotFoundOnServer": false
								},
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
									}
								},
								"method": "delete",
								"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(triggerBody()?['Path']))}"
							},
							"runAfter": {
								"logic-c00031-NonSFS_internal_sf4sLog-weu-dev": [
									"Succeeded"
								]
							},
							"type": "ApiConnection"
						},
						"Get_incoming_file_content": {
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
									}
								},
								"method": "get",
								"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(triggerBody()?['Path']))}/content",
								"queries": {
									"inferContentType": false
								}
							},
							"runAfter": {},
							"runtimeConfiguration": {
								"contentTransfer": {
									"downloadChunkSizeInMB": 49,
									"transferMode": "NotSpecified"
								}
							},
							"type": "ApiConnection"
						},
						"Get_zip_blob_content_(V2)": {
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
									}
								},
								"method": "get",
								"path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(parameters('BlobContainerName'),'/',body('BlobToZipConverterFunction')?['Value']))}/content"
							},
							"runAfter": {
								"BlobToZipConverterFunction": [
									"Succeeded"
								]
							},
							"type": "ApiConnection"
						},
						"Put_a_message_on_a_queue_(V2)": {
							"inputs": {
								"body": "{\n\"interafaceName\" : \"DebitorUpload\",\n\"runID\" : \"@{workflow()['run']['name']}\",\n\"blobContainerName\" : \"@{parameters('BlobContainerName')}\",\n\"blobName\" :\"@{body('Create_blob_(V2)')?['Name']}\",\n\"fileName\": \"@{body('Create_file_in_working_directory')?['Name']}\",\n\"fileID\" : \"@{body('Create_file_in_working_directory')?['Id']}\",\n\"maxRows\" : 5000,\n  \"fileSeperator\": \";\",\n  \"fileHeaders\": \"SourceSystem;Type;Subtype;IdentificationNumber;Primary;IFA;LocalSourceSystem\"\n}\n",
								"host": {
									"connection": {
										"name": "@parameters('$connections')['queueConnection']['connectionId']"
									}
								},
								"method": "post",
								"path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent('${st_name}'))}/queues/@{encodeURIComponent('debitoroesqueue')}/messages"
							},
							"runAfter": {
								"Delete_blob_(V2)": [
									"Succeeded"
								]
							},
							"type": "ApiConnection"
						},
						"logic-c00031-NonSFS_internal_sf4sLog-weu-dev": {
							"inputs": {
								"body": {
									"message": "DebitorUpload interface file trigger executed successfully and created queue message for function",
									"severity": "INFO"
								},
								"headers": {
									"interfaceName": "DebitorUpload",
									"runID": "@{workflow()['run']['name']}"
								},
								"host": {
									"triggerName": "manual",
									"workflow": {
										"id": "${nonsfs_internal_sf4sLog_logicAppId}"
									}
								}
							},
							"runAfter": {
								"Put_a_message_on_a_queue_(V2)": [
									"Succeeded"
								]
							},
							"type": "Workflow"
						}
					},
					"else": {
						"actions": {
							"Terminate_-_Invalid_Media_Type": {
								"inputs": {
									"runError": {
										"message": "File extension is not correct"
									},
									"runStatus": "Failed"
								},
								"runAfter": {},
								"type": "Terminate"
							}
						}
					},
					"expression": {
						"and": [
							{
								"contains": [
									"@triggerBody()?['MediaType']",
									"@parameters('Filter')"
								]
							}
						]
					},
					"runAfter": {},
					"type": "If"
				}
			},
			"runAfter": {},
			"trackedProperties": {
				"apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'not-defined')}",
				"citizenName": "c00031",
				"correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
				"interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'DebitorUpload')}",
				"interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
				"interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
				"operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'DebitorUploadCH')}",
				"parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
				"clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
				"clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
			},
			"type": "Scope"
		}
	},
	"contentVersion": "1.0.0.0",
	"outputs": {},
	"parameters": {
		"$connections": {
			"defaultValue": {},
			"type": "Object"
		},
		"BlobContainerName": {
			"defaultValue": "sftp-container-c00031-debitorupload",
			"type": "String"
		},
		"ErrorPath": {
			"defaultValue": "/sftp-container-c00031/sftp-c00031/Debitors/in/Debitors/CH/error",
			"type": "String"
		},
		"Filter": {
			"defaultValue": "text/csv",
			"type": "String"
		},
		"IncomingPath": {
			"defaultValue": "/sftp-container-c00031/sftp-c00031/Debitors/in/Debitors/CH/incoming",
			"type": "String"
		},
		"InterfaceRootPath": {
			"defaultValue": "/sftp-container-c00031/sftp-c00031/Debitors/in/Debitors/",
			"type": "String"
		},
		"MaxRows": {
			"defaultValue": 5000,
			"type": "Int"
		},
		"WorkingPath": {
			"defaultValue": "/sftp-container-c00031/sftp-c00031/Debitors/in/Debitors/CH/working",
			"type": "String"
		}
	},
	"triggers": {
		"When_files_are_added_or_modified_(properties_only)": {
			"evaluatedRecurrence": {
				"frequency": "Minute",
				"interval": 20
			},
			"inputs": {
				"host": {
					"connection": {
						"name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
					}
				},
				"method": "get",
				"path": "/datasets/default/triggers/batch/onupdatedfile",
				"queries": {
					"checkBothCreatedAndModifiedDateTime": false,
					"folderId": "@parameters('incomingPath')",
					"maxFileCount": 1
				}
			},
			"recurrence": {
				"frequency": "Minute",
				"interval": 20
			},
			"runtimeConfiguration": {
				"concurrency": {
					"runs": 5
				}
			},
			"splitOn": "@triggerBody()",
			"type": "ApiConnection"
		}
	}
}