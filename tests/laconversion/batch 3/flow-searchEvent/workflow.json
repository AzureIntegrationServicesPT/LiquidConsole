{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Catch_Scope": {
        "actions": {
          "Response_in_Catch": {
            "inputs": {
              "body": {
                "errormessagedetails": "@concat('Some error occurred while connection. Please find more details using tracking id : ', workflow()['run']['name'])"
              },
              "headers": {
                "Content-Type": "application/json"
              },
              "statusCode": 500
            },
            "kind": "Http",
            "runAfter": {},
            "type": "Response"
          },
          "Terminate_2": {
            "inputs": {
              "runStatus": "Failed"
            },
            "runAfter": {
              "Response_in_Catch": [
                "Succeeded"
              ]
            },
            "type": "Terminate"
          }
        },
        "runAfter": {
          "Try_Scope": [
            "Failed"
          ]
        },
        "type": "Scope"
      },
      "Initialize_ZeroResultsVariable": {
        "inputs": {
          "variables": [
            {
              "name": "ZeroResults",
              "type": "string",
              "value": "{\"AccountId\":\"\", \"OpportunityId\":\"\"}"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_finalWhereClause": {
        "inputs": {
          "variables": [
            {
              "name": "finalWhereClause",
              "type": "string",
              "value": "@{''}"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_trimmedWildcard": {
        "inputs": {
          "variables": [
            {
              "name": "trimmedWildcard",
              "type": "string",
              "value": "@{''}"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_value_WhatIdsubString": {
        "inputs": {
          "variables": [
            {
              "name": "WhatIdsubString",
              "type": "string"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_variable_finalEventResponse": {
        "inputs": {
          "variables": [
            {
              "name": "finalEventResponse",
              "type": "string"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_whereClause": {
        "inputs": {
          "variables": [
            {
              "name": "whereClause",
              "type": "string",
              "value": "@{''}"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_wildcardLength": {
        "inputs": {
          "variables": [
            {
              "name": "wildcardLength",
              "type": "integer",
              "value": 0
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Try_Scope": {
        "actions": {
          "Activity_Event_check": {
            "actions": {
              "ActivityId": {
                "actions": {
                  "Set_whereClause_for_ActivityId": {
                    "inputs": {
                      "name": "whereClause",
                      "value": "Id='@{outputs('Compose')['ActivityId']}'"
                    },
                    "runAfter": {},
                    "type": "SetVariable"
                  }
                },
                "else": {
                  "actions": {
                    "S4STASK_LegacyID__c_check": {
                      "actions": {
                        "Set_whereClause_for_S4STask_LegacyID__c": {
                          "inputs": {
                            "name": "whereClause",
                            "value": "S4STask_LegacyID__c='@{outputs('Compose')?['S4STASK_LegacyID__c']}'"
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "else": {
                        "actions": {
                          "Subject_check": {
                            "actions": {
                              "Condition": {
                                "actions": {
                                  "Set_whereClause_for_Subject": {
                                    "inputs": {
                                      "name": "whereClause",
                                      "value": "Subject like '@{outputs('compose')?['Subject']}'"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Response": {
                                      "inputs": {
                                        "body": {
                                          "Message": "Too short search criteria."
                                        },
                                        "headers": {
                                          "Content-Type": "application/json"
                                        },
                                        "statusCode": 404
                                      },
                                      "kind": "Http",
                                      "runAfter": {},
                                      "type": "Response"
                                    },
                                    "Terminate_1": {
                                      "inputs": {
                                        "runError": {
                                          "code": "404",
                                          "message": "Too short search criteria."
                                        },
                                        "runStatus": "Failed"
                                      },
                                      "runAfter": {
                                        "Response": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Terminate"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "greaterOrEquals": [
                                        "@variables('wildcardLength')",
                                        2
                                      ]
                                    }
                                  ]
                                },
                                "runAfter": {
                                  "length_of_trimmedWildcard": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "If"
                              },
                              "Remove_*": {
                                "inputs": {
                                  "name": "trimmedWildcard",
                                  "value": "@{replace(outputs('compose')?['Subject'],'*','')}"
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                              },
                              "length_of_trimmedWildcard": {
                                "inputs": {
                                  "name": "wildcardLength",
                                  "value": "@length(variables('trimmedWildcard'))"
                                },
                                "runAfter": {
                                  "Remove_*": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable"
                              }
                            },
                            "else": {
                              "actions": {
                                "Response_2": {
                                  "inputs": {
                                    "body": {
                                      "Message": "Input parameters not provided!"
                                    },
                                    "headers": {
                                      "Content-Type": "application/json"
                                    },
                                    "statusCode": 422
                                  },
                                  "kind": "Http",
                                  "runAfter": {},
                                  "type": "Response"
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "not": {
                                    "equals": [
                                      "@outputs('compose')?['Subject']",
                                      "@''"
                                    ]
                                  }
                                },
                                {
                                  "not": {
                                    "equals": [
                                      "@outputs('compose')?['Subject']",
                                      "@null"
                                    ]
                                  }
                                }
                              ]
                            },
                            "runAfter": {},
                            "type": "If"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@outputs('Compose')?['S4STASK_LegacyID__c']",
                                "@''"
                              ]
                            }
                          },
                          {
                            "not": {
                              "equals": [
                                "@outputs('Compose')?['S4STASK_LegacyID__c']",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "runAfter": {},
                      "type": "If"
                    }
                  }
                },
                "expression": {
                  "and": [
                    {
                      "not": {
                        "equals": [
                          "@outputs('Compose')?['ActivityId']",
                          "@''"
                        ]
                      }
                    },
                    {
                      "not": {
                        "equals": [
                          "@outputs('Compose')?['ActivityId']",
                          "@string('null')"
                        ]
                      }
                    }
                  ]
                },
                "runAfter": {},
                "type": "If"
              }
            },
            "else": {
              "actions": {
                "Error_Response": {
                  "inputs": {
                    "body": {
                      "Message": "Input parameters not provided!"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "statusCode": 422
                  },
                  "kind": "Http",
                  "runAfter": {},
                  "type": "Response"
                }
              }
            },
            "expression": {
              "and": [
                {
                  "not": {
                    "equals": [
                      "@outputs('Compose')",
                      "@string('null')"
                    ]
                  }
                },
                {
                  "not": {
                    "equals": [
                      "@outputs('Compose')",
                      "@null"
                    ]
                  }
                }
              ]
            },
            "runAfter": {
              "Compose": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Compose": {
            "inputs": "@triggerBody()?['Event']",
            "runAfter": {},
            "type": "Compose"
          },
          "whereClause_check": {
            "actions": {
              "Compose_Response": {
                "inputs": "@if(equals(variables('finalEventResponse'),''),concat('{\"Event\":[',variables('ZeroResults'),']}'),concat('{\"Event\":[',variables('finalEventResponse'),']}'))",
                "runAfter": {
                  "Condition_to_check_statusCode": [
                    "Succeeded"
                  ]
                },
                "type": "Compose"
              },
              "Condition_to_check_statusCode": {
                "actions": {
                  "For_each": {
                    "actions": {
                      "Substring_of_WhatId": {
                        "inputs": {
                          "name": "WhatIdsubString",
                          "value": "@{if(equals(item()?['WhatId'],null),'',substring(items('For_each')?['WhatId'],0,3))}"
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      },
                      "if_Substring_is_equal_to_001": {
                        "actions": {
                          "Compose_2": {
                            "inputs": {
                              "AccountId": "@{items('For_each')?['WhatId']}",
                              "Activity": "Event",
                              "ActivityDate": "@{items('For_each')?['ActivityDate']}",
                              "ActivityId": "@{items('For_each')?['Id']}",
                              "Assigned_to_ID": "@{items('For_each')?['Owner']?['Id']}",
                              "Assigned_to_Name": "@{items('For_each')?['Owner']?['Name']}",
                              "ContactId": "@{items('For_each')?['Who']?['Id']}",
                              "CreateDate": "@{items('For_each')?['CreatedDate']}",
                              "Delegated_by_ID": "@{items('For_each')?['S4SDelegated_By__r']?['Id']}",
                              "Delegated_by_Name": "@{items('For_each')?['S4SDelegated_By__r']?['Name']}",
                              "Description": "@{items('For_each')?['Description']}",
                              "EndDateTime": "@{items('For_each')?['EndDateTime']}",
                              "IsAllDayEvent": "@{items('For_each')?['IsAllDayEvent']}",
                              "IsRecurrence2": "@{items('For_each')?['IsRecurrence2']}",
                              "LastModifiedDate": "@{items('For_each')?['LastModifiedDate']}",
                              "Location": "@{items('For_each')?['Location']}",
                              "OpportunityId": "",
                              "S4SAdditional_Information__c": "@{items('For_each')?['S4SAdditional_Information__c']}",
                              "S4SBU__c": "@{items('For_each')?['S4SBU__c']}",
                              "S4SCompleted_Date__c": "@{items('For_each')?['S4SCompleted_Date__c']}",
                              "S4SDivision__c": "@{items('For_each')?['S4SDivision__c']}",
                              "S4SEVENT_LegacyID__c": "@{items('For_each')?['S4SEVENT_LegacyID__c']}",
                              "S4SOpportunity_Milestone__c": "@{items('For_each')?['S4SOpportunity_Milestone__c']}",
                              "S4SOther_Topics__c": "@{items('For_each')?['S4SOther_Topics__c']}",
                              "S4SReason__c": "@{items('For_each')?['S4SReason__c']}",
                              "S4SStatus__c": "@{items('For_each')?['S4SStatus__c']}",
                              "S4STraining_Topic__c": "@{items('For_each')?['S4STraining_Topic__c']}",
                              "StartDateTime": "@{items('For_each')?['StartDateTime']}",
                              "Subject": "@{items('For_each')?['Subject']}",
                              "Type": "@{items('For_each')?['Type']}"
                            },
                            "runAfter": {},
                            "type": "Compose"
                          },
                          "Compose__MultiRecord": {
                            "inputs": "@if(equals(variables('finalEventResponse'),''),outputs('Compose_2'),concat(variables('finalEventResponse'),',',outputs('Compose_2')))",
                            "runAfter": {
                              "Compose_2": [
                                "Succeeded"
                              ]
                            },
                            "type": "Compose"
                          },
                          "Set_variable": {
                            "inputs": {
                              "name": "finalEventResponse",
                              "value": "@{outputs('Compose__MultiRecord')}"
                            },
                            "runAfter": {
                              "Compose__MultiRecord": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable"
                          }
                        },
                        "else": {
                          "actions": {
                            "if_substring_is_equal_to_006": {
                              "actions": {
                                "Compose_3": {
                                  "inputs": {
                                    "AccountId": "",
                                    "Activity": "Event",
                                    "ActivityDate": "@{items('For_each')?['ActivityDate']}",
                                    "ActivityId": "@{items('For_each')?['Id']}",
                                    "Assigned_to_ID": "@{items('For_each')?['Owner']?['Id']}",
                                    "Assigned_to_Name": "@{items('For_each')?['Owner']?['Name']}",
                                    "ContactId": "@{items('For_each')?['Who']?['Id']}",
                                    "CreateDate": "@{items('For_each')?['CreatedDate']}",
                                    "Delegated_by_ID": "@{items('For_each')?['S4SDelegated_By__r']?['Id']}",
                                    "Delegated_by_Name": "@{items('For_each')?['S4SDelegated_By__r']?['Name']}",
                                    "Description": "@{items('For_each')?['Description']}",
                                    "EndDateTime": "@{items('For_each')?['EndDateTime']}",
                                    "IsAllDayEvent": "@{items('For_each')?['IsAllDayEvent']}",
                                    "IsRecurrence2": "@{items('For_each')?['IsRecurrence2']}",
                                    "LastModifiedDate": "@{items('For_each')?['LastModifiedDate']}",
                                    "Location": "@{items('For_each')?['Location']}",
                                    "OpportunityId": "@{items('For_each')?['WhatId']}",
                                    "S4SAdditional_Information__c": "@{items('For_each')?['S4SAdditional_Information__c']}",
                                    "S4SBU__c": "@{items('For_each')?['S4SBU__c']}",
                                    "S4SCompleted_Date__c": "@{items('For_each')?['S4SCompleted_Date__c']}",
                                    "S4SDivision__c": "@{items('For_each')?['S4SDivision__c']}",
                                    "S4SEVENT_LegacyID__c": "@{items('For_each')?['S4SEVENT_LegacyID__c']}",
                                    "S4SOpportunity_Milestone__c": "@{items('For_each')?['S4SOpportunity_Milestone__c']}",
                                    "S4SOther_Topics__c": "@{items('For_each')?['S4SOther_Topics__c']}",
                                    "S4SReason__c": "@{items('For_each')?['S4SReason__c']}",
                                    "S4SStatus__c": "@{items('For_each')?['S4SStatus__c']}",
                                    "S4STraining_Topic__c": "@{items('For_each')?['S4STraining_Topic__c']}",
                                    "StartDateTime": "@{items('For_each')?['StartDateTime']}",
                                    "Subject": "@{items('For_each')?['Subject']}",
                                    "Type": "@{items('For_each')?['Type']}"
                                  },
                                  "runAfter": {},
                                  "type": "Compose"
                                },
                                "Compose_MultiRecord2": {
                                  "inputs": "@if(equals(variables('finalEventResponse'),''),outputs('Compose_3'),concat(variables('finalEventResponse'),',',outputs('Compose_3')))",
                                  "runAfter": {
                                    "Compose_3": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Compose"
                                },
                                "Set_variable_2": {
                                  "inputs": {
                                    "name": "finalEventResponse",
                                    "value": "@{outputs('Compose_MultiRecord2')}"
                                  },
                                  "runAfter": {
                                    "Compose_MultiRecord2": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Compose_4": {
                                    "inputs": {
                                      "AccountId": "",
                                      "Activity": "Event",
                                      "ActivityDate": "@{items('For_each')?['ActivityDate']}",
                                      "ActivityId": "@{items('For_each')?['Id']}",
                                      "Assigned_to_ID": "@{items('For_each')?['Owner']?['Id']}",
                                      "Assigned_to_Name": "@{items('For_each')?['Owner']?['Name']}",
                                      "ContactId": "@{items('For_each')?['Who']?['Id']}",
                                      "CreateDate": "@{items('For_each')?['CreatedDate']}",
                                      "Delegated_by_ID": "@{items('For_each')?['S4SDelegated_By__r']?['Id']}",
                                      "Delegated_by_Name": "@{items('For_each')?['S4SDelegated_By__r']?['Name']}",
                                      "Description": "@{items('For_each')?['Description']}",
                                      "EndDateTime": "@{items('For_each')?['EndDateTime']}",
                                      "IsAllDayEvent": "@{items('For_each')?['IsAllDayEvent']}",
                                      "IsRecurrence2": "@{items('For_each')?['IsRecurrence2']}",
                                      "LastModifiedDate": "@{items('For_each')?['LastModifiedDate']}",
                                      "Location": "@{items('For_each')?['Location']}",
                                      "OpportunityId": "",
                                      "S4SAdditional_Information__c": "@{items('For_each')?['S4SAdditional_Information__c']}",
                                      "S4SBU__c": "@{items('For_each')?['S4SBU__c']}",
                                      "S4SCompleted_Date__c": "@{items('For_each')?['S4SCompleted_Date__c']}",
                                      "S4SDivision__c": "@{items('For_each')?['S4SDivision__c']}",
                                      "S4SEVENT_LegacyID__c": "@{items('For_each')?['S4SEVENT_LegacyID__c']}",
                                      "S4SOpportunity_Milestone__c": "@{items('For_each')?['S4SOpportunity_Milestone__c']}",
                                      "S4SOther_Topics__c": "@{items('For_each')?['S4SOther_Topics__c']}",
                                      "S4SReason__c": "@{items('For_each')?['S4SReason__c']}",
                                      "S4SStatus__c": "@{items('For_each')?['S4SStatus__c']}",
                                      "S4STraining_Topic__c": "@{items('For_each')?['S4STraining_Topic__c']}",
                                      "StartDateTime": "@{items('For_each')?['StartDateTime']}",
                                      "Subject": "@{items('For_each')?['Subject']}",
                                      "Type": "@{items('For_each')?['Type']}"
                                    },
                                    "runAfter": {},
                                    "type": "Compose"
                                  },
                                  "Compose_MultiRecord3": {
                                    "inputs": "@if(equals(variables('finalEventResponse'),''),outputs('Compose_4'),concat(variables('finalEventResponse'),',',outputs('Compose_4')))",
                                    "runAfter": {
                                      "Compose_4": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Compose"
                                  },
                                  "Set_variable_3": {
                                    "inputs": {
                                      "name": "finalEventResponse",
                                      "value": "@{outputs('Compose_MultiRecord3')}"
                                    },
                                    "runAfter": {
                                      "Compose_MultiRecord3": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@string(variables('WhatIdsubString'))",
                                      "@string('006')"
                                    ]
                                  }
                                ]
                              },
                              "runAfter": {},
                              "type": "If"
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@string(variables('WhatIdsubString'))",
                                "@string('001')"
                              ]
                            }
                          ]
                        },
                        "runAfter": {
                          "Substring_of_WhatId": [
                            "Succeeded"
                          ]
                        },
                        "type": "If"
                      }
                    },
                    "foreach": "@body('Event')['records']",
                    "runAfter": {},
                    "runtimeConfiguration": {
                      "concurrency": {
                        "repetitions": 1
                      }
                    },
                    "type": "Foreach"
                  }
                },
                "else": {
                  "actions": {
                    "Error_Response_for_Event": {
                      "inputs": {
                        "body": {
                          "error": "@{body('Event')?['message']}"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "statusCode": "@outputs('Event')?['statusCode']"
                      },
                      "kind": "http",
                      "runAfter": {},
                      "type": "Response"
                    },
                    "Terminate_in_Event": {
                      "inputs": {
                        "runStatus": "Failed"
                      },
                      "runAfter": {
                        "Error_Response_for_Event": [
                          "Succeeded"
                        ]
                      },
                      "type": "Terminate"
                    }
                  }
                },
                "expression": {
                  "and": [
                    {
                      "equals": [
                        "@outputs('Event')?['statusCode']",
                        200
                      ]
                    }
                  ]
                },
                "runAfter": {
                  "Event": [
                    "Succeeded",
                    "Failed"
                  ]
                },
                "type": "If"
              },
              "Event": {
                "inputs": {
                  "body": {
                    "query": "select Id,WhatId,S4SEVENT_LegacyID__c,Subject,S4SAdditional_Information__c,Description,StartDateTime,EndDateTime,ActivityDate,S4SStatus__c,Type,S4SReason__c,Who.Id,Location,IsAllDayEvent,IsRecurrence2,S4SCompleted_Date__c,CreatedDate,LastModifiedDate,S4SOpportunity_Milestone__c,S4SOther_Topics__c,S4STraining_Topic__c,S4SDivision__c,S4SBU__c,What.Id,S4SDelegated_By__r.Id,S4SDelegated_By__r.Name,Owner.Name,Owner.ID from Event where @{variables('finalWhereClause')} Limit+50"
                  },
                  "path": "/soql/executesoqlquery",
              "host": {
                "connection":{
                "referenceName": "salesforce_nonsfs_v2"
              }
              },
                  "method": "post"
                },
                "runAfter": {
                  "Replace_*_in_whereClause": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              },
              "Replace_*_in_whereClause": {
                "inputs": {
                  "name": "finalWhereClause",
                  "value": "@{replace(variables('whereClause'),'*','%')}"
                },
                "runAfter": {},
                "type": "SetVariable"
              },
              "Response_4": {
                "inputs": {
                  "body": "@json(outputs('Compose_Response'))",
                  "headers": {
                    "Content-Type": "application/json"
                  },
                  "statusCode": 200
                },
                "kind": "Http",
                "runAfter": {
                  "Compose_Response": [
                    "Succeeded"
                  ]
                },
                "type": "Response"
              }
            },
            "expression": {
              "and": [
                {
                  "not": {
                    "equals": [
                      "@variables('whereClause')",
                      "@null"
                    ]
                  }
                },
                {
                  "not": {
                    "equals": [
                      "@variables('whereClause')",
                      "@''"
                    ]
                  }
                }
              ]
            },
            "runAfter": {
              "Activity_Event_check": [
                "Succeeded"
              ]
            },
            "type": "If"
          }
        },
        "runAfter": {
          "Initialize_ZeroResultsVariable": [
            "Succeeded"
          ],
          "Initialize_finalWhereClause": [
            "Succeeded"
          ],
          "Initialize_trimmedWildcard": [
            "Succeeded"
          ],
          "Initialize_value_WhatIdsubString": [
            "Succeeded"
          ],
          "Initialize_variable_finalEventResponse": [
            "Succeeded"
          ],
          "Initialize_whereClause": [
            "Succeeded"
          ],
          "Initialize_wildcardLength": [
            "Succeeded"
          ]
        },
        "trackedProperties": {
          "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'external')}",
          "citizenName": "c00031",
          "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
          "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'GOI')}",
          "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
          "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'V3')}",
          "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'searchEvent')}",
          "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
          "clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
          "clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
        },
        "type": "Scope"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "manual": {
        "inputs": {},
        "kind": "Http",
        "type": "Request"
      }
    }
  },
  "kind": "Stateful"
}
