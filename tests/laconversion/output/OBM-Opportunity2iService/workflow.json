{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Catch_Scope": {
        "actions": {
          "Error_Response": {
            "runAfter": {},
            "type": "Response",
            "kind": "Http",
            "inputs": {
              "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>true</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>",
              "headers": {
                "Content-Type": "application/xml"
              },
              "statusCode": 500
            }
          },
          "Terminate": {
            "runAfter": {
              "Error_Response": [
                "Succeeded"
              ]
            },
            "type": "Terminate",
            "inputs": {
              "runError": {
                "code": "500"
              },
              "runStatus": "Failed"
            }
          }
        },
        "runAfter": {
          "Try_Scope": [
            "TimedOut",
            "Failed",
            "Skipped"
          ]
        },
        "type": "Scope"
      },
      "Try_Scope": {
        "actions": {
          "Create_or_Update_Opportunity_in_iService": {
            "actions": {
              "Data_Mappings_to_iService": {
                "runAfter": {
                  "Query_iService_Account_Country": [
                    "Succeeded"
                  ],
                  "Query_iService_Account_Id": [
                    "Succeeded"
                  ],
                  "Query_iService_Account_State": [
                    "Succeeded"
                  ],
                  "Query_iService_End_Account_Country": [
                    "Succeeded"
                  ],
                  "Query_iService_End_Account_Id": [
                    "Succeeded"
                  ],
                  "Query_iService_End_Account_State": [
                    "Succeeded"
                  ],
                  "Query_iService_Product2_GCK": [
                    "Succeeded"
                  ]
                },
                "type": "Compose",
                "inputs": {
                  "AccountId": "@if(equals(int(body('Query_iService_Account_Id')?['totalSize']),1),body('Query_iService_Account_Id')?['records']?[0]?['Id'],'')",
                  "City__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingCity']",
                  "CloseDate": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['CloseDate']",
                  "DestinationCountry__c": "@if(equals(int(body('Query_iService_End_Account_Country')?['totalSize']),1),body('Query_iService_End_Account_Country')?['records']?[0]?['Full_Name__c'],'')",
                  "EndUserCity__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingCity']",
                  "EndUserCustomerZip__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingPostalCode']",
                  "EndUserCustomersContacts__c": "@concat(body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['Name'], '\r\n', body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingStreet'], ' ', body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingCity'], ' ', if(equals(int(body('Query_iService_End_Account_State')?['totalSize']),1),body('Query_iService_End_Account_State')?['records']?[0]?['Full_Name__c'],body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingState']), ' ', body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingPostalCode'])",
                  "EndUserName__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['Name']",
                  "EndUserState_Province__c": "@if(equals(int(body('Query_iService_End_Account_State')?['totalSize']),1),body('Query_iService_End_Account_State')?['records']?[0]?['Full_Name__c'],'')",
                  "EndUserStreetAddress__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingStreet']",
                  "End_User_Account__c": "@if(equals(int(body('Query_iService_End_Account_Id')?['totalSize']),1),body('Query_iService_End_Account_Id')?['records']?[0]?['Id'],'')",
                  "IS_End_User_IFA__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['S4SIfA__c']",
                  "IS_GCK__c": "@body('get_from_BookingLine_Salesforce')?['records']?[0]?['S4SGCK__c']",
                  "IS_Sales_Type__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SSales_Type__c']",
                  "Products__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SSales_Type__c']",
                  "IS_SieSales_Stage__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['StageName']",
                  "IS_Siesales_External_Id__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Id']",
                  "IS_Sold_To_Customer_State_Province__c": "@if(equals(int(body('Query_iService_Account_State')?['totalSize']),1),body('Query_iService_Account_State')?['records']?[0]?['Full_Name__c'],'')",
                  "IS_Sold_To_IFA__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['S4SIfA__c']",
                  "LeadSource": "@string('SieSales')",
                  "Name": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Name']",
                  "OwnerId": "@string('005410000032oahAAA')",
                  "Product_Type__c": "@if(equals(int(body('Query_iService_Product2_GCK')?['totalSize']),1),body('Query_iService_Product2_GCK')?['records']?[0]?['Family'],'Unknown / Unlisted')",
                  "Requested_Response_Date__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SBid_approval_PM040__c']",
                  "RequestorEmail__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Owner']?['Email']",
                  "RequestorFirstName__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Owner']?['Name']",
                  "ScopeInformation__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Description']",
                  "SoldToCustomersContacts__c": "@concat(body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['Name'], '\r\n', body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingStreet'], ' ', body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingCity'], ' ', if(equals(int(body('Query_iService_Account_State')?['totalSize']),1),body('Query_iService_Account_State')?['records']?[0]?['Full_Name__c'],body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingState']), ' ', body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingPostalCode'])",
                  "SoldToName__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['Name']",
                  "Sold_To_Customer_Country__c": "@if(equals(int(body('Query_iService_Account_Country')?['totalSize']),1),body('Query_iService_Account_Country')?['records']?[0]?['Full_Name__c'],'')",
                  "SoldtoCustomerStreetAddress__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingStreet']",
                  "SoldtoCustomerZip__c": "@body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingPostalCode']",
                  "StageName": "@string('Pre-Evaluation')"
                }
              },
              "Failure_Response": {
                "runAfter": {
                  "in_case_it_fails": [
                    "Succeeded"
                  ]
                },
                "type": "Response",
                "kind": "Http",
                "inputs": {
                  "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>true</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>",
                  "headers": {
                    "Content-Type": "application/xml"
                  },
                  "statusCode": 200
                }
              },
              "For_each_contentdocument": {
                "actions": {
                  "create_attachment_in_iService": {
                    "inputs": {
                      "body": {
                        "ContentLocation": "S",
                        "IsMajorVersion": "@body('get_contentversion')?['records'][0]?['IsMajorVersion']",
                        "PathOnClient": "@{body('get_contentversion')?['records'][0]?['PathOnClient']}",
                        "Title": "@{body('get_contentversion')?['records'][0]?['Title']}",
                        "VersionData": "@{body('get_version_data')?['$content']}"
                      },
                      "headers": {
                        "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                      },
                      "method": "POST",
                      "uri": "parameters('instanceURL_iService')/sobjects/contentversion"
                    },
                    "runAfter": {
                      "get_version_data": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http"
                  },
                  "create_documentlink": {
                    "inputs": {
                      "body": {
                        "ContentDocumentId": "@{body('get_documentid')?['records'][0]?['ContentDocumentId']}",
                        "LinkedEntityId": "@{body('HTTP_to_send_Data_to_iService')?['id']}",
                        "ShareType": "I"
                      },
                      "headers": {
                        "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                      },
                      "method": "POST",
                      "uri": "parameters('instanceURL_iService')/sobjects/contentdocumentlink"
                    },
                    "runAfter": {
                      "get_documentid": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http"
                  },
                  "get_contentversion": {
                    "inputs": {
                      "body": {
                        "query": "select Id, ContentDocumentId, Title, PathOnClient, VersionData,ContentLocation,IsMajorVersion from contentversion where contentdocumentid = '@{items('For_each_contentdocument')?['ContentDocumentId']}'"
                      },
                      "path": "/soql/executesoqlquery",
                      "host": {
                        "connection": {
                          "referenceName": "salesForceConnection"
                        }
                      },
                      "method": "post"
                    },
                    "runAfter": {},
                    "type": "ApiConnection"
                  },
                  "get_documentid": {
                    "inputs": {
                      "headers": {
                        "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                      },
                      "method": "GET",
                      "queries": {
                        "q": "SELECT ContentDocumentId FROM ContentVersion Where Id='@{body('create_attachment_in_iService')?['id']}'"
                      },
                      "uri": "parameters('instanceURL_iService')/query"
                    },
                    "runAfter": {
                      "create_attachment_in_iService": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http"
                  },
                  "get_version_data": {
                    "inputs": {
                      "headers": {
                        "Authorization": "Bearer @{body('Get_Token_for_SieSales')}",
                        "Content-Type": "application/json"
                      },
                      "method": "GET",
                      "uri": "parameters('instanceURL')@{body('get_contentversion')?['records'][0]?['VersionData']}"
                    },
                    "runAfter": {
                      "get_contentversion": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http"
                  }
                },
                "foreach": "@body('get_contentdocumentid')?['records']",
                "runAfter": {
                  "get_contentdocumentid": [
                    "Succeeded"
                  ]
                },
                "type": "Foreach"
              },
              "HTTP_to_send_Data_to_iService": {
                "runAfter": {
                  "Data_Mappings_to_iService": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "body": "@outputs('Data_Mappings_to_iService')",
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}",
                    "Content-Type": "application/json"
                  },
                  "method": "POST",
                  "uri": "parameters('instanceURL_iService')/sobjects/Opportunity"
                }
              },
              "Query_iService_Account_Country": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Full_Name__c FROM SieSales_State_Country_Mapping__c WHERE Type__c = 'Country' AND Name = '@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingCountry']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Query_iService_Account_Id": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Id FROM Account WHERE Tax_Code_4__c = '@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['S4SIfA__c']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Query_iService_Account_State": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Full_Name__c FROM SieSales_State_Country_Mapping__c WHERE Type__c = 'State' AND Name ='@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['Account']?['BillingState']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Query_iService_End_Account_Country": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Full_Name__c FROM SieSales_State_Country_Mapping__c WHERE Type__c = 'Country' AND Name = '@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingCountry']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Query_iService_End_Account_Id": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Id FROM Account WHERE Tax_Code_4__c = '@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['S4SIfA__c']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Query_iService_End_Account_State": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Full_Name__c FROM SieSales_State_Country_Mapping__c WHERE Type__c = 'State' AND Name = '@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['S4SEnd_Account__r']?['BillingState']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Query_iService_Product2_GCK": {
                "runAfter": {
                  "Scope_-_for_parallelization": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "headers": {
                    "Authorization": "Bearer @{body('Get_Token_for_iService')}"
                  },
                  "method": "GET",
                  "queries": {
                    "q": "SELECT Id, Family FROM Product2 WHERE IS_GCK__c ='@{body('get_from_BookingLine_Salesforce')?['records']?[0]?['S4SGCK__c']}'"
                  },
                  "uri": "parameters('instanceURL_iService')/query"
                }
              },
              "Scope_-_for_parallelization": {
                "actions": {},
                "runAfter": {
                  "get_from_BookingLine_Salesforce": [
                    "Succeeded"
                  ],
                  "get_from_Opportunity_Salesforce": [
                    "Succeeded"
                  ]
                },
                "type": "Scope"
              },
              "Scope_-_for_parallelization_of_actions": {
                "actions": {},
                "runAfter": {},
                "type": "Scope"
              },
              "Success_Response": {
                "runAfter": {
                  "in_case_it's_correct": [
                    "Succeeded"
                  ]
                },
                "type": "Response",
                "kind": "Http",
                "inputs": {
                  "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>true</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>",
                  "headers": {
                    "Content-Type": "application/xml"
                  },
                  "statusCode": 200
                }
              },
              "get_contentdocumentid": {
                "inputs": {
                  "body": {
                    "query": "select contentdocumentid from contentdocumentlink where linkedentityid ='@{body('LiquidTransformer')?['Opportunity_Id']}'"
                  },
                  "path": "/soql/executesoqlquery",
                  "host": {
                    "connection": {
                      "referenceName": "salesForceConnection"
                    }
                  },
                  "method": "post"
                },
                "runAfter": {
                  "HTTP_to_send_Data_to_iService": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              },
              "get_from_BookingLine_Salesforce": {
                "inputs": {
                  "body": {
                    "query": "SELECT Id, S4SGCK__c\nFROM S4SBooking_Line_Item__c WHERE Id='@{body('LiquidTransformer')?['Id']}' "
                  },
                  "path": "/soql/executesoqlquery",
                  "host": {
                    "connection": {
                      "referenceName": "salesForceConnection"
                    }
                  },
                  "method": "post"
                },
                "runAfter": {
                  "Scope_-_for_parallelization_of_actions": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              },
              "get_from_Opportunity_Salesforce": {
                "inputs": {
                  "body": {
                    "query": "SELECT Id, Owner.Name, Owner.Email, S4SSales_Type__c, S4SBid_approval_PM040__c, Name, Description, StageName, CloseDate, Account.S4SIfA__c, Account.Name, Account.BillingStreet, Account.BillingCity, Account.BillingCountry, Account.BillingState, Account.BillingPostalCode, S4SEnd_Account__r.S4SIfA__c, S4SEnd_Account__r.Name, S4SEnd_Account__r.BillingStreet, S4SEnd_Account__r.BillingCity, S4SEnd_Account__r.BillingState, S4SEnd_Account__r.BillingCountry, S4SEnd_Account__r.BillingPostalCode\nFROM Opportunity WHERE Id='@{body('LiquidTransformer')?['Opportunity_Id']}'"
                  },
                  "path": "/soql/executesoqlquery",
                  "host": {
                    "connection": {
                      "referenceName": "salesForceConnection"
                    }
                  },
                  "method": "post"
                },
                "runAfter": {
                  "Scope_-_for_parallelization_of_actions": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              },
              "in_case_it's_correct": {
                "inputs": {
                  "body": {
                    "CloseDate": "@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['CloseDate']}",
                    "Name": "@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['Name']}",
                    "S4SInterface_Status__c": "Opportunity Creation Successful",
                    "S4SOffer_Reference_ID__c": "@{body('HTTP_to_send_Data_to_iService')?['id']}",
                    "StageName": "@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['StageName']}"
                  },
                  "path": "/v3/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('Opportunity'))}/items/@{encodeURIComponent(encodeURIComponent(body('get_from_Opportunity_Salesforce')?['records']?[0]?['Id']))}",
                  "host": {
                    "connection": {
                      "referenceName": "salesForceConnection"
                    }
                  },
                  "method": "patch"
                },
                "runAfter": {
                  "HTTP_to_send_Data_to_iService": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              },
              "in_case_it_fails": {
                "inputs": {
                  "body": {
                    "CloseDate": "@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['CloseDate']}",
                    "Name": "@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['Name']}",
                    "S4SInterface_Status__c": "Opportunity Creation Rejected",
                    "S4SOffer_Reference_ID__c": "@{string('')}",
                    "StageName": "@{body('get_from_Opportunity_Salesforce')?['records']?[0]?['StageName']}"
                  },
                  "path": "/v3/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('Opportunity'))}/items/@{encodeURIComponent(encodeURIComponent(body('get_from_Opportunity_Salesforce')?['records']?[0]?['Id']))}",
                  "host": {
                    "connection": {
                      "referenceName": "salesForceConnection"
                    }
                  },
                  "method": "patch"
                },
                "runAfter": {
                  "HTTP_to_send_Data_to_iService": [
                    "TimedOut",
                    "Skipped",
                    "Failed"
                  ]
                },
                "type": "ApiConnection"
              }
            },
            "else": {
              "actions": {
                "HTTP_to_send_Opp_to_iService": {
                  "runAfter": {},
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "IS_SieSales_Stage__c": "@{body('LiquidTransformer')?['StageName']}",
                      "IS_Siesales_External_Id__c": "@{body('LiquidTransformer')?['Id']}"
                    },
                    "headers": {
                      "Authorization": "Bearer @{body('Get_Token_for_iService')}",
                      "Content-Type": "application/json"
                    },
                    "method": "PATCH",
                    "uri": "@{concat('parameters('instanceURL_iService')','/sobjects/Opportunity/',body('LiquidTransformer')?['S4SOffer_Reference_ID__c'])}"
                  }
                },
                "Response": {
                  "runAfter": {
                    "HTTP_to_send_Opp_to_iService": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>true</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>",
                    "headers": {
                      "Content-Type": "application/xml"
                    },
                    "statusCode": 200
                  }
                }
              }
            },
            "expression": {
              "and": [
                {
                  "equals": [
                    "@triggerOutputs()['headers']?['object']",
                    "bookingLineItem"
                  ]
                }
              ]
            },
            "runAfter": {
              "Get_Token_for_SieSales": [
                "Succeeded"
              ],
              "Get_Token_for_iService": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Get_Token_for_SieSales": {
            "inputs": {
              "headers": {
                "Ocp-Apim-Subscription-Key": "parameters('apimKey')"
              },
              "method": "POST",
              "uri": "parameters('baseUrl_apim_ise')/c00031/token/oAuth/nonsfs"
            },
            "runAfter": {
              "LiquidTransformer": [
                "Succeeded"
              ]
            },
            "type": "Http"
          },
          "Get_Token_for_iService": {
            "runAfter": {
              "LiquidTransformer": [
                "Succeeded"
              ]
            },
            "type": "Http",
            "inputs": {
              "headers": {
                "Ocp-Apim-Subscription-Key": "parameters('apimKey')"
              },
              "method": "POST",
              "retryPolicy": {
                "type": "none"
              },
              "uri": "parameters('apimURL')"
            }
          },
          "LiquidTransformer": {
            "inputs": {
              "body": "@triggerBody()",
              "function": {
                "connectionName": "Liquid"
              },
              "headers": {
                "Accept": "application/json",
                "Content-Type": "application/xml",
                "Filename": "parameters('liquid')"
              },
              "method": "POST"
            },
            "runAfter": {},
            "type": "Function"
          }
        },
        "runAfter": {},
        "type": "Scope"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "manual": {
        "type": "Request",
        "kind": "Http",
        "inputs": {}
      }
    }
  },
  "kind": "Stateful"
}
