{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Compose": {
        "runAfter": {
          "JsonRemoveNullOrEmptyFunc": [
            "Succeeded"
          ]
        },
        "type": "Compose",
        "inputs": "@json(body('JsonRemoveNullOrEmptyFunc')?['result']?['restructuredJson'])\r\n"
      },
      "Compose_handle_Booleans": {
        "runAfter": {},
        "type": "Compose",
        "inputs": "@json( replace(replace(string(triggerBody()),'False','false'),'True','true'))"
      },
      "Initialize_variable": {
        "runAfter": {},
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "eventResponse",
              "type": "object",
              "value": {
                "Created": "",
                "Id": "",
                "Message": "",
                "Status": ""
              }
            }
          ]
        }
      },
      "JsonRemoveNullOrEmptyFunc": {
        "inputs": {
          "body": {
            "CorrelationId": "@{triggerOutputs()['headers']?['correlationid']}",
            "InputRequestBase64": "@{base64(outputs('Compose_handle_Booleans'))}",
            "InterfaceName": "upsertObject",
            "Username": "@{triggerOutputs()['headers']?['Username']}",
            "operation": "JsonRemoveNullOrEmpty"
          },
          "function": {
            "connectionName": "Liquid"
          },
          "headers": null,
          "method": "POST"
        },
        "runAfter": {
          "Compose_handle_Booleans": [
            "Succeeded"
          ]
        },
        "type": "Function"
      },
      "Main": {
        "actions": {
          "Catch": {
            "actions": {
              "Set_Catch_Response": {
                "runAfter": {},
                "type": "Response",
                "kind": "Http",
                "inputs": {
                  "body": {
                    "Created": "@{or(if(equals(outputs('Create_Event_or_Task')?['statusCode'],500),'false','true'),if(equals(outputs('Update_Event_or_Task')?['statusCode'],500),'false','true'))}",
                    "Id": "@{coalesce(triggerBody()?['Id'],'')}",
                    "Message": "@{coalesce(body('Create_Event_or_Task')?['message'],body('Update_Event_or_Task')?['message'])}",
                    "Status": "@{or(if(equals(outputs('Create_Event_or_Task')?['statusCode'],500),'failure','success'),if(equals(outputs('Update_Event_or_Task')?['statusCode'],500),'failure','success'))}"
                  },
                  "statusCode": 500
                }
              },
              "Terminate": {
                "runAfter": {
                  "Set_Catch_Response": [
                    "Succeeded"
                  ]
                },
                "type": "Terminate",
                "inputs": {
                  "runError": {
                    "code": "500",
                    "message": "Upsert Activity Failure"
                  },
                  "runStatus": "Failed"
                }
              }
            },
            "runAfter": {
              "Try": [
                "Failed",
                "Skipped",
                "TimedOut"
              ]
            },
            "type": "Scope"
          },
          "Try": {
            "actions": {
              "Condition": {
                "actions": {
                  "Set_Response_for_update": {
                    "runAfter": {
                      "Update_Event_or_Task": [
                        "Succeeded",
                        "TimedOut",
                        "Failed"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "eventResponse",
                      "value": {
                        "Created": "false",
                        "Id": "@{triggerBody()?['Object']?['Id']}",
                        "Message": "@{coalesce(body('Update_Event_or_Task')?['message'],'')}",
                        "Status": "@{if(equals(outputs('Update_Event_or_Task')?['statusCode'],200),'success',if(equals(outputs('Update_Event_or_Task')?['statusCode'],201),'success','failure'))}"
                      }
                    }
                  },
                  "Update_Event_or_Task": {
                    "inputs": {
                      "body": "@outputs('Compose')?['Object']",
                      "path": "/v3/datasets/default/tables/@{encodeURIComponent(encodeURIComponent(triggerOutputs()['headers']?['Object']))}/items/@{encodeURIComponent(encodeURIComponent(triggerBody()?['Object']?['Id']))}",
                      "host": {
                        "connection": {
                          "referenceName": "salesForceConnection"
                        }
                      },
                      "headers": {
                        "Content-Type": "application/json"
                      },
                      "method": "patch"
                    },
                    "runAfter": {},
                    "type": "ApiConnection"
                  }
                },
                "else": {
                  "actions": {
                    "Create_Event_or_Task": {
                      "inputs": {
                        "body": "@outputs('Compose')?['Object']",
                        "path": "/v2/datasets/default/tables/@{encodeURIComponent(encodeURIComponent(triggerOutputs()['headers']?['Object']))}/items",
                        "host": {
                          "connection": {
                            "referenceName": "salesForceConnection"
                          }
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "post"
                      },
                      "runAfter": {},
                      "type": "ApiConnection"
                    },
                    "Set_Response_for_creation": {
                      "runAfter": {
                        "Create_Event_or_Task": [
                          "Succeeded",
                          "TimedOut",
                          "Failed"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "eventResponse",
                        "value": {
                          "Created": "@{if(equals(outputs('Create_Event_or_Task')?['statusCode'],201),'true','false')}",
                          "Id": "@{coalesce(body('Create_Event_or_Task')?['Id'],'')}",
                          "Message": "@{coalesce(body('Create_Event_or_Task')?['message'],body('Create_Event_or_Task')?['message'])}",
                          "Status": "@{if(equals(outputs('Create_Event_or_Task')?['statusCode'],200),'success',if(equals(outputs('Create_Event_or_Task')?['statusCode'],201),'success','failure'))}"
                        }
                      }
                    }
                  }
                },
                "expression": {
                  "and": [
                    {
                      "not": {
                        "equals": [
                          "@triggerBody()?['Object']?['Id']",
                          "@null"
                        ]
                      }
                    },
                    {
                      "not": {
                        "equals": [
                          "@triggerBody()?['Object']?['Id']",
                          ""
                        ]
                      }
                    }
                  ]
                },
                "runAfter": {},
                "type": "If"
              },
              "Set_Try_Response": {
                "runAfter": {
                  "Condition": [
                    "Succeeded"
                  ]
                },
                "type": "Response",
                "kind": "Http",
                "inputs": {
                  "body": "@variables('eventResponse')",
                  "statusCode": 200
                }
              }
            },
            "runAfter": {},
            "type": "Scope"
          }
        },
        "runAfter": {
          "Compose": [
            "Succeeded"
          ],
          "Initialize_variable": [
            "Succeeded"
          ]
        },
        "type": "Scope"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "manual": {
        "type": "Request",
        "kind": "Http",
        "inputs": {
          "schema": {
            "properties": {
              "Object": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          }
        }
      }
    }
  },
  "kind": "Stateful"
}
