{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "$connections": {
            "defaultValue": {},
            "type": "Object"
        }
    },
    "triggers": {
        "manual": {
            "type": "Request",
            "kind": "Http",
            "inputs": {}
        }
    },
    "actions": {
        "Condition-MainOfferBooleanReplace": {
            "actions": {
                "Set_MainOffer": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                        "name": "MainOffer",
                        "value": true
                    }
                }
            },
            "runAfter": {
                "InitializeVariable-MainOffer": [
                    "Succeeded"
                ]
            },
            "else": {
                "actions": {
                    "Set_MainOffer2": {
                        "runAfter": {},
                        "type": "SetVariable",
                        "inputs": {
                            "name": "MainOffer",
                            "value": false
                        }
                    }
                }
            },
            "expression": {
                "and": [
                    {
                        "not": {
                            "equals": [
                                "@xpath(xml(triggerBody()),'.//MAIN_OFFER/text()')?[0]",
                                "@null"
                            ]
                        }
                    },
                    {
                        "not": {
                            "equals": [
                                "@xpath(xml(triggerBody()),'.//MAIN_OFFER/text()')?[0]",
                                "@string('')"
                            ]
                        }
                    },
                    {
                        "equals": [
                            "@xpath(xml(triggerBody()),'.//MAIN_OFFER/text()')?[0]",
                            "Y"
                        ]
                    },
                    {
                        "not": {
                            "equals": [
                                "@xpath(xml(triggerBody()),'.//MAIN_OFFER/text()')?[0]",
                                "@string('null')"
                            ]
                        }
                    }
                ]
            },
            "type": "If"
        },
        "HTTP_Get_SF_Token_for_Non__SFS": {
            "inputs": {
                "headers": {
                    "Ocp-Apim-Subscription-Key": "${apimKey}"
                },
                "method": "POST",
                "uri": "${baseUrl_apim_ise}/c00031/token/oAuth/nonsfs"
            },
            "runAfter": {
                "Initialize_variable_QuoteFailedMessage": [
                    "Succeeded"
                ]
            },
            "type": "Http"
        },
        "InitializeVariable-MainOffer": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "MainOffer",
                        "type": "boolean"
                    }
                ]
            }
        },
        "InitializeVariable-OfferEngineer": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "OfferEngineer",
                        "type": "string",
                        "value": "@{concat(xpath(xml(triggerBody()),'.//OFFER_ENGINEER_LNAME/text()')?[0],' ',xpath(xml(triggerBody()),'.//OFFER_ENGINEER_FNAME/text()')?[0])}"
                    }
                ]
            }
        },
        "InitializeVariable-OpportunityID": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "OpportunityID",
                        "type": "string"
                    }
                ]
            }
        },
        "InitializeVariable-StageName": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "varStageName",
                        "type": "string",
                        "value": "@{first(xpath(xml(triggerBody()),'.//STATUS/text()')?[0])}"
                    }
                ]
            }
        },
        "InitializeVariable-UpsertOfferResponse'": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "UpsertOffer_Response",
                        "type": "string",
                        "value": "<response><Result>####UpsertOffer_Response####<ACTION/><COMPANY_ID/><SUCCESS>##Result##</SUCCESS><ERROR_MSG/><OfferLineItemResult><PRODUCT_REVENUE_ID/><OFFER_PRODUCT_NAME/><SUCCESS/><ERROR_MSG/><OfferLineVariantResult><ATTRIBUTE_ID/><SUCCESS/><ERROR_MSG/></OfferLineVariantResult></OfferLineItemResult></Result></response>"
                    }
                ]
            }
        },
        "InitializeVariable-_Opp_ID_Account_WhereClause_": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "OppIDAccountWhereClause",
                        "type": "string",
                        "value": "Opportunity.Id='@{coalesce(triggerOutputs()?['headers']?['OpportunityId'], xpath(xml(triggerBody()),'.//OPP_ID/text()')?[0])}' and Opportunity.Account.S4SIfA__c = '@{xpath(xml(triggerBody()),'.//IFA_NUMBER/text()')?[0]}'"
                    }
                ]
            }
        },
        "InitializeVariable-salesStatus’": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "varSaleStatus",
                        "type": "string",
                        "value": "@{substring(xpath(xml(triggerBody()),'.//STATUS/text()')?[0],1)}"
                    }
                ]
            }
        },
        "InitializeVariable-sizeOfOpportunityAccount": {
            "runAfter": {},
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "sizeOfOpportunityAccount",
                        "type": "string"
                    }
                ]
            }
        },
        "Initialize_variable": {
            "runAfter": {
                "InitializeVariable-UpsertOfferResponse'": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "salesforceError",
                        "type": "string",
                        "value": "<response><Result>####UpsertOffer_Response####<SUCCESS>##Result##</SUCCESS></Result></response>"
                    }
                ]
            }
        },
        "Initialize_variable_QuoteFailedMessage": {
            "runAfter": {
                "Condition-MainOfferBooleanReplace": [
                    "Succeeded"
                ],
                "InitializeVariable-OfferEngineer": [
                    "Succeeded"
                ],
                "InitializeVariable-OpportunityID": [
                    "Succeeded"
                ],
                "InitializeVariable-StageName": [
                    "Succeeded"
                ],
                "InitializeVariable-_Opp_ID_Account_WhereClause_": [
                    "Succeeded"
                ],
                "InitializeVariable-salesStatus’": [
                    "Succeeded"
                ],
                "InitializeVariable-sizeOfOpportunityAccount": [
                    "Succeeded"
                ],
                "Initialize_variable": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable",
            "inputs": {
                "variables": [
                    {
                        "name": "varQuoteFailedMessage",
                        "type": "string"
                    }
                ]
            }
        },
        "Scope-Catch": {
            "actions": {
                "ComposeFailedResponse": {
                    "runAfter": {},
                    "type": "Compose",
                    "inputs": "@xml(replace(replace(variables('UpsertOffer_Response'),'####UpsertOffer_Response####',''),'##Result##','Failure'))"
                },
                "FailedResponse_": {
                    "runAfter": {
                        "ComposeFailedResponse": [
                            "Succeeded"
                        ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                        "body": "@outputs('ComposeFailedResponse')",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "statusCode": 500
                    }
                },
                "Terminate": {
                    "runAfter": {
                        "FailedResponse_": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate",
                    "inputs": {
                        "runStatus": "Failed"
                    }
                }
            },
            "runAfter": {
                "Scope-Try": [
                    "Failed",
                    "Skipped",
                    "TimedOut"
                ]
            },
            "type": "Scope"
        },
        "Scope-Try": {
            "actions": {
                "ComposeSuccessResponse": {
                    "runAfter": {
                        "Condition_to_check_Opportunity_Size": [
                            "Succeeded"
                        ]
                    },
                    "type": "Compose",
                    "inputs": "@xml(replace(replace(variables('UpsertOffer_Response'),'####UpsertOffer_Response####',string(variables('OpportunityID'))),'##Result##','true'))"
                },
                "Condition_to_check_Opportunity_Size": {
                    "actions": {
                        "ForEach-Opportunity": {
                            "foreach": "@body('ExecuteSOQL-Opportunity')['records']",
                            "actions": {
                                "Append_to_string_variable-OpportunityID": {
                                    "runAfter": {
                                        "Check-OfferID": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "OpportunityID",
                                        "value": "<OFFER_ID>@{xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]}</OFFER_ID>\n<OPPORTUNITY_ID>@{items('ForEach-Opportunity')?['Id']}</OPPORTUNITY_ID>\n<IFA_NUMBER>@{xpath(xml(triggerBody()),'.//IFA_NUMBER/text()')?[0]}</IFA_NUMBER>"
                                    }
                                },
                                "Check-OfferID": {
                                    "actions": {
                                        "Condition-Quote_ID": {
                                            "actions": {
                                                "Check-SAP_NUMBER": {
                                                    "actions": {
                                                        "ComposeUpsert": {
                                                            "runAfter": {},
                                                            "type": "Compose",
                                                            "inputs": {
                                                                "Id": "@{body('ExecuteSOQL-Quote')['records']?[0]?['Id']}",
                                                                "Name": "@{body('ExecuteSOQL-Quote')['records']?[0]?['Name']}",
                                                                "OpportunityId": "@{coalesce(triggerOutputs()?['headers']?['OpportunityId'], xpath(xml(triggerBody()),'.//OPP_ID/text()')?[0])}",
                                                                "S4SMain_Offer__c": "@true",
                                                                "S4SSales_Margin__c": "@{xpath(xml(triggerBody()),'.//SALES_MARGIN/text()')?[0]}",
                                                                "S4SVolume__c": "@{xpath(xml(triggerBody()),'.//VOLUME/text()')?[0]}",
                                                                "Status": "@{variables('varSaleStatus')}"
                                                            }
                                                        },
                                                        "Set_variable-QuoteFailedmessage": {
                                                            "runAfter": {
                                                                "internalInsertUpdate-Quote-1": [
                                                                    "Failed"
                                                                ]
                                                            },
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "varQuoteFailedMessage",
                                                                "value": "@{body('internalInsertUpdate-Quote-1')?['message']}"
                                                            }
                                                        },
                                                        "internalInsertUpdate-Quote-1": {
                                                            "runAfter": {
                                                                "ComposeUpsert": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Workflow",
                                                            "inputs": {
                                                                "body": "@outputs('ComposeUpsert')",
                                                                "host": {
                                                                    "triggerName": "manual",
                                                                    "workflow": {
                                                                        "id": "[parameters('internal_insert_update_quote_logicAppId')]"
                                                                    }
                                                                },
                                                                "retryPolicy": {
                                                                    "type": "none"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "else": {
                                                        "actions": {
                                                            "ComposeCreateQuoteSAP": {
                                                                "runAfter": {},
                                                                "type": "Compose",
                                                                "inputs": {
                                                                    "ContractId": "@if(equals(xpath(xml(triggerBody()),'.//CONTRACT_EXTERNAL_ID/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//CONTRACT_EXTERNAL_ID/text()')?[0]))",
                                                                    "Description": "@if(equals(xpath(xml(triggerBody()),'.//DESCRIPTION/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//DESCRIPTION/text()')?[0]))",
                                                                    "ExpirationDate": "@if(equals(xpath(xml(triggerBody()),'.//BID_EXPIRATION/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//BID_EXPIRATION/text()')?[0]))",
                                                                    "Id": "@{body('ExecuteSOQL-Quote')['records']?[0]?['Id']}",
                                                                    "Name": "@{body('ExecuteSOQL-Quote')['records']?[0]?['Name']}",
                                                                    "OpportunityId": "@{coalesce(triggerOutputs()?['headers']?['OpportunityId'], xpath(xml(triggerBody()),'.//OPP_ID/text()')?[0])}",
                                                                    "S4SExternal_Source__c": "@{xpath(xml(triggerBody()),'.//SOURCE_SYSTEM_CODE/text()')?[0]}",
                                                                    "S4SFollow_Up_Date__c": "@if(equals(xpath(xml(triggerBody()),'.//FOLLOW_UP_DATE/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//FOLLOW_UP_DATE/text()')?[0]))",
                                                                    "S4SMain_Offer__c": "@variables('MainOffer')",
                                                                    "S4SOffer_Date__c": "@if(equals(xpath(xml(triggerBody()),'.//BID_SUBMISSION/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//BID_SUBMISSION/text()')?[0]))",
                                                                    "S4SOffer_Engineer__c": "@{variables('OfferEngineer')}",
                                                                    "S4SOffer_ID__c": "@{xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]}",
                                                                    "S4SSales_Margin__c": "@{xpath(xml(triggerBody()),'.//SALES_MARGIN/text()')?[0]}",
                                                                    "S4SValid_until__c": "@if(equals(xpath(xml(triggerBody()),'.//VALID_UNTIL/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//VALID_UNTIL/text()')?[0]))",
                                                                    "S4SVolume__c": "@{xpath(xml(triggerBody()),'.//VOLUME/text()')?[0]}",
                                                                    "Status": "@{variables('varSaleStatus')}"
                                                                }
                                                            },
                                                            "Set_variable-Quote2FailedMessage": {
                                                                "runAfter": {
                                                                    "internalInsertUpdate-Quote-2": [
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "varQuoteFailedMessage",
                                                                    "value": "@{body('internalInsertUpdate-Quote-2')?['message']}"
                                                                }
                                                            },
                                                            "internalInsertUpdate-Quote-2": {
                                                                "runAfter": {
                                                                    "ComposeCreateQuoteSAP": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "Workflow",
                                                                "inputs": {
                                                                    "body": "@outputs('ComposeCreateQuoteSAP')",
                                                                    "host": {
                                                                        "triggerName": "manual",
                                                                        "workflow": {
                                                                            "id": "[parameters('internal_insert_update_quote_logicAppId')]"
                                                                        }
                                                                    },
                                                                    "retryPolicy": {
                                                                        "type": "none"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@xpath(xml(triggerBody()),'.//SAP_NUMBER/text()')?[0]",
                                                                        "@string('')"
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@xpath(xml(triggerBody()),'.//SAP_NUMBER/text()')?[0]",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@xpath(xml(triggerBody()),'.//SAP_NUMBER/text()')?[0]",
                                                                        "@string('null')"
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                }
                                            },
                                            "runAfter": {
                                                "ExecuteSOQL-Quote": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "ComposeCreateQuote": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": {
                                                            "ContractId": "@if(equals(xpath(xml(triggerBody()),'.//CONTRACT_EXTERNAL_ID/text()')?[0], null), null, string(trim(xpath(xml(triggerBody()),'.//CONTRACT_EXTERNAL_ID/text()')?[0])))",
                                                            "Description": "@if(equals(xpath(xml(triggerBody()),'.//DESCRIPTION/text()')?[0], null), null, string(trim(xpath(xml(triggerBody()),'.//DESCRIPTION/text()')?[0])))",
                                                            "ExpirationDate": "@if(equals(xpath(xml(triggerBody()),'.//BID_EXPIRATION/text()')?[0], null), null, string(trim(xpath(xml(triggerBody()),'.//BID_EXPIRATION/text()')?[0])))",
                                                            "Name": "@{coalesce(body('ExecuteSOQL-Quote')?['records']?[0]?['Id'], xpath(xml(triggerBody()),'.//OFFER_NAME/text()')?[0])}",
                                                            "OpportunityId": "@{coalesce(triggerOutputs()?['headers']?['OpportunityId'], xpath(xml(triggerBody()),'.//OPP_ID/text()')?[0])}",
                                                            "S4SExternal_Source__c": "@{xpath(xml(triggerBody()),'.//SOURCE_SYSTEM_CODE/text()')?[0]}",
                                                            "S4SFollow_Up_Date__c": "@if(equals(xpath(xml(triggerBody()),'.//FOLLOW_UP_DATE/text()')?[0], null), null, string(trim(xpath(xml(triggerBody()),'.//FOLLOW_UP_DATE/text()')?[0])))",
                                                            "S4SMain_Offer__c": "@variables('MainOffer')",
                                                            "S4SOffer_Date__c": "@if(equals(xpath(xml(triggerBody()),'.//BID_SUBMISSION/text()')?[0], null), null, string(trim(xpath(xml(triggerBody()),'.//BID_SUBMISSION/text()')?[0])))",
                                                            "S4SOffer_Engineer__c": "@{variables('OfferEngineer')}",
                                                            "S4SOffer_ID__c": "@{xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]}",
                                                            "S4SSales_Margin__c": "@{xpath(xml(triggerBody()),'.//SALES_MARGIN/text()')?[0]}",
                                                            "S4SSource_System__c": "@{xpath(xml(triggerBody()),'.//ATTACHMENT_PATH/text()')?[0]}",
                                                            "S4SValid_until__c": "@if(equals(xpath(xml(triggerBody()),'.//VALID_UNTIL/text()')?[0], null), null, string(xpath(xml(triggerBody()),'.//VALID_UNTIL/text()')?[0]))",
                                                            "S4SVolume__c": "@{xpath(xml(triggerBody()),'.//VOLUME/text()')?[0]}",
                                                            "Status": "@{variables('varSaleStatus')}"
                                                        }
                                                    },
                                                    "Set_variable": {
                                                        "runAfter": {
                                                            "internalInsertUpdate-Quote-3": [
                                                                "Failed"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "varQuoteFailedMessage",
                                                            "value": "@{body('internalInsertUpdate-Quote-3')?['message']}"
                                                        }
                                                    },
                                                    "internalInsertUpdate-Quote-3": {
                                                        "runAfter": {
                                                            "ComposeCreateQuote": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Workflow",
                                                        "inputs": {
                                                            "body": "@outputs('ComposeCreateQuote')",
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                    "id":"[parameters('internal_insert_update_quote_logicAppId')]"
                                                                }
                                                            },
                                                            "retryPolicy": {
                                                                "type": "none"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('ExecuteSOQL-Quote')?['records']?[0]?['Id']",
                                                                "@string('')"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('ExecuteSOQL-Quote')?['records']?[0]?['Id']",
                                                                "@null"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('ExecuteSOQL-Quote')?['records']?[0]?['Id']",
                                                                "@string('null')"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "ExecuteSOQL-Quote": {
                                            "runAfter": {},
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "Bearer @{body('HTTP_Get_SF_Token_for_Non__SFS')}"
                                                    },
                                                "queries": {
                                                    "q": "SELECT Id,Name,S4SOffer_ID__c FROM Quote WHERE S4SOffer_ID__c = '@{xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]}'"
                                                },
                                                
                                                "method": "GET",
                                                "uri": "${instance_NonSFS_URL}/query/",
                                                "retryPolicy": {
                                                    "type": "none"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "ComposeOpportunity": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]",
                                                        "@string('')"
                                                    ]
                                                }
                                            },
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]",
                                                        "@null"
                                                    ]
                                                }
                                            },
                                            {
                                                "not": {
                                                    "equals": [
                                                        "@xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]",
                                                        "@string('null')"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "ComposeOpportunity": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "<Opportunity>\n\t<OpportunityID>@{items('ForEach-Opportunity')['Id']}</OpportunityID>\n\t<AccountID>@{items('ForEach-Opportunity')['AccountId']}</AccountID>\n\t<IFANumber>@{items('ForEach-Opportunity')['Account']['S4SIfA__c']}</IFANumber>\n</Opportunity>"
                                }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                        }
                    },
                    "runAfter": {
                        "Set_variable-SizeOfOppurtunity": [
                            "Succeeded"
                        ]
                    },
                    "else": {
                        "actions": {
                            "Create_UserResponse_Mapping": {
                                "runAfter": {
                                    "ExecuteSOQL-Opportunity-2": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Compose",
                                "inputs": "<OFFER_ID>@{xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]}</OFFER_ID>\n<OPPORTUNITY_ID>@{body('ExecuteSOQL-Opportunity-2')?['records']?[0]?['Id']}</OPPORTUNITY_ID>\n<IFA_NUMBER>@{xpath(xml(triggerBody()),'.//IFA_NUMBER/text()')?[0]}</IFA_NUMBER>\n<ERROR_MSG>IFA number '@{xpath(xml(triggerBody()),'.//IFA_NUMBER/text()')?[0]}' of delivered Offer '@{xpath(xml(triggerBody()),'.//OFFER_ID/text()')?[0]}' does not match the IFA number @{body('ExecuteSOQL-Opportunity-2')?['records']?[0]?['Account']?['S4SIfA__c']} of the company linked in opportunity in SieSales. The offer will be updated with the newly delivered IFA number, but the opportunity remains linked to IFA number @{body('ExecuteSOQL-Opportunity-2')?['records']?[0]?['Account']?['S4SIfA__c']} as it is not possible to link SieSales Opportunities to other Companies via external offer tools.</ERROR_MSG>"
                            },
                            "ExecuteSOQL-Opportunity-2": {
                                "runAfter": {},
                                "type": "Http",
                                "inputs": {
                                    "headers": {
                                        "Authorization": "Bearer @{body('HTTP_Get_SF_Token_for_Non__SFS')}"
                                        },
                                    "queries": {
                                        "q": "SELECT Id,AccountId,Account.S4SIfA__c FROM Opportunity WHERE Id = '@{coalesce(triggerOutputs()?['headers']?['OpportunityId'], xpath(xml(triggerBody()),'.//OPP_ID/text()')?[0])}'"
                                    },
                                    
                                    "method": "GET",
                                    "uri": "${instance_NonSFS_URL}/query"
                                }
                            },
                            "IFA-Terminate": {
                                "runAfter": {
                                    "Response": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                    "runStatus": "Succeeded"
                                }
                            },
                            "Response": {
                                "runAfter": {
                                    "Create_UserResponse_Mapping": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                    "body": "@xml(replace(replace(variables('UpsertOffer_Response'),'####UpsertOffer_Response####',string(outputs('Create_UserResponse_Mapping'))),'##Result##','Failure'))",
                                    "statusCode": 200
                                }
                            }
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "equals": [
                                    "@int(variables('sizeOfOpportunityAccount'))",
                                    1
                                ]
                            }
                        ]
                    },
                    "type": "If"
                },
                "ExecuteSOQL-Opportunity": {
                    "runAfter": {},
                    "type": "Http",
                    "inputs": {
                        "headers": {
                            "Authorization": "Bearer @{body('HTTP_Get_SF_Token_for_Non__SFS')}"
                            },
                        "queries": {
                            "q": "SELECT Id,AccountId,Account.S4SIfA__c FROM Opportunity WHERE @{variables('OppIDAccountWhereClause')}"
                        },
                        
                        "method": "GET",
                        "uri": "${instance_NonSFS_URL}/query"
                    }
                },
                "SalesforceError": {
                    "runAfter": {
                        "ComposeSuccessResponse": [
                            "Succeeded"
                        ]
                    },
                    "type": "Compose",
                    "inputs": "<OPPORTUNITY_ID>@{body('ExecuteSOQL-Opportunity')?['records']?[0]?['Id']}</OPPORTUNITY_ID>\n<IFA_NUMBER>@{xpath(xml(triggerBody()),'.//IFA_NUMBER/text()')?[0]}</IFA_NUMBER>\n<ERROR_MSG> @{variables('varQuoteFailedMessage')}</ERROR_MSG>\n"
                },
                "Set_variable-SizeOfOppurtunity": {
                    "runAfter": {
                        "ExecuteSOQL-Opportunity": [
                            "Succeeded"
                        ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                        "name": "sizeOfOpportunityAccount",
                        "value": "@{body('ExecuteSOQL-Opportunity')['totalSize']}"
                    }
                },
                "SuccessResponse": {
                    "runAfter": {
                        "SalesforceError": [
                            "Succeeded"
                        ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                        "body": "@if(equals(variables('varQuoteFailedMessage'),''),xml(replace(string(outputs('ComposeSuccessResponse')),'<ERROR_MSG />','')),xml(replace(replace(variables('salesforceError'),'####UpsertOffer_Response####',outputs('SalesforceError')),'##Result##','Failure')))",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "statusCode": 200
                    }
                }
            },
            "runAfter": {
                "HTTP_Get_SF_Token_for_Non__SFS": [
                    "Succeeded"
                ]
            },
            "type": "Scope"
        }
    },
    "outputs": {}


}