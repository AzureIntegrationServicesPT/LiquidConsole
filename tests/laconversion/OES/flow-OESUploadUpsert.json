{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "Delete_message_(V2)": {
            "inputs": {
                "host": {
                    "connection": {
                        "name": "@parameters('$connections')['queueConnection']['connectionId']"
                    }
                },
                "method": "delete",
                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent('${st_name}'))}/queues/@{encodeURIComponent('oesupload')}/messages/@{encodeURIComponent(triggerBody()?['MessageId'])}",
                "queries": {
                    "popreceipt": "@triggerBody()?['PopReceipt']"
                }
            },
            "runAfter": {},
            "type": "ApiConnection"
        },
        "Initialize_variable_BulkState": {
            "inputs": {
                "variables": [
                    {
                        "name": "BulkState",
                        "type": "boolean",
                        "value": false
                    }
                ]
            },
            "runAfter": {
                "Delete_message_(V2)": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Initialize_variable_FailedLogs": {
            "inputs": {
                "variables": [
                    {
                        "name": "FailedLogs",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {
                "Delete_message_(V2)": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Initialize_variable_IncomingFileID": {
            "inputs": {
                "variables": [
                    {
                        "name": "IncomingFileID",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {
                "Delete_message_(V2)": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Initialize_variable_ParentRunID": {
            "inputs": {
                "variables": [
                    {
                        "name": "ParentRunID",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {
                "Initialize_variable_FailedLogs": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Initialize_variable_Processed": {
            "inputs": {
                "variables": [
                    {
                        "name": "Processed",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {
                "Initialize_variable_IncomingFileID": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Initialize_variable_UnprocessedLogs": {
            "inputs": {
                "variables": [
                    {
                        "name": "Unprocessed",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {
                "Initialize_variable_BulkState": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Move_file_to_archive": {
            "actions": {
                "BlobToZipConverterFunction": {
                    "inputs": {
                        "body": {
                            "blobContainerName": "@{parameters('BlobContainerName')}",
                            "incomingBlobPath": "@{workflow()['run']['name']}/incoming",
                            "incominigBlobName": "@{body('Create_log_blob_(V2)')?['Name']}",
                            "outcomingBlobPath": "@{workflow()['run']['name']}/logZip"
                        },
                        						"authentication": {
							"type": "Raw",
							"value": "[parameters('functionAppKey')]"
						},
"function": {
                            "id": "[concat(parameters('funcApp'), '/functions/BlobToZipConverterFunction')]"
                        }
                    },
                    "runAfter": {
                        "Create_log_blob_(V2)": [
                            "Succeeded"
                        ]
                    },
                    "type": "Function"
                },
                "Copy_file_to_archive": {
                    "inputs": {
                        "headers": {
                            "ReadFileMetadataFromServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/copyFile",
                        "queries": {
                            "destination": "@{parameters('ArchivePath')}/@{body('Get_file_metadata')?['Name']}",
                            "overwrite": true,
                            "queryParametersSingleEncoded": true,
                            "source": "@body('Get_file_metadata')?['Path']"
                        }
                    },
                    "runAfter": {
                        "Get_file_metadata": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Create_log_blob_(V2)": {
                    "inputs": {
                        "body": "File name: @{body('Get_file_metadata')?['DisplayName']}\n======FAILED RECORDS======\n@{variables('FailedLogs')}\n======FAILED RECORDS======\n======UNPROCESSED RECORDS======\n@{variables('Unprocessed')}\n======UNPROCESSED RECORDS======\n======SUCCESSFUL RECORDS======\n@{variables('Processed')}\n======SUCCESSFUL RECORDS======",
                        "headers": {
                            "ReadFileMetadataFromServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
                        "queries": {
                            "folderPath": "@{parameters('BlobContainerName')}/@{workflow()['run']['name']}/incoming",
                            "name": "CSV_Log@{formatDateTime(utcNow(), 'yyyyMMddHHmmss')}.csv",
                            "queryParametersSingleEncoded": true
                        }
                    },
                    "runAfter": {
                        "logic-c00031-NonSFS_internal_sf4sLog-weu-dev_3": [
                            "Succeeded"
                        ]
                    },
                    "runtimeConfiguration": {
                        "contentTransfer": {
                            "transferMode": "Chunked"
                        }
                    },
                    "type": "ApiConnection"
                },
                "Create_log_file": {
                    "inputs": {
                        "body": "@body('Get_zipped_log_blob_content_(V2)')",
                        "headers": {
                            "ReadFileMetadataFromServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
                        "queries": {
                            "folderPath": "@parameters('LogPath')",
                            "name": "Logs@{utcNow()}.zip",
                            "queryParametersSingleEncoded": true
                        }
                    },
                    "runAfter": {
                        "Get_zipped_log_blob_content_(V2)": [
                            "Succeeded"
                        ]
                    },
                    "runtimeConfiguration": {
                        "contentTransfer": {
                            "transferMode": "Chunked"
                        }
                    },
                    "type": "ApiConnection"
                },
                "Delete_blob_(V2)": {
                    "inputs": {
                        "headers": {
                            "SkipDeleteIfFileNotFoundOnServer": false
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "delete",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(body('Create_log_blob_(V2)')?['Id']))}"
                    },
                    "runAfter": {
                        "Create_log_file": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Delete_file": {
                    "inputs": {
                        "headers": {
                            "SkipDeleteIfFileNotFoundOnServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "delete",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(body('Get_file_metadata')?['Path']))}"
                    },
                    "runAfter": {
                        "Copy_file_to_archive": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Get_file_metadata": {
                    "inputs": {
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(variables('IncomingFileID')))}"
                    },
                    "runAfter": {},
                    "type": "ApiConnection"
                },
                "Get_zipped_log_blob_content_(V2)": {
                    "inputs": {
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(parameters('BlobContainerName'),'/',body('BlobToZipConverterFunction')?['Value']))}/content",
                        "queries": {
                            "inferContentType": true
                        }
                    },
                    "runAfter": {
                        "BlobToZipConverterFunction": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Terminate_Succeeded": {
                    "inputs": {
                        "runStatus": "Succeeded"
                    },
                    "runAfter": {
                        "Delete_blob_(V2)": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                },
                "logic-c00031-NonSFS_internal_sf4sLog-weu-dev_3": {
                    "inputs": {
                        "body": {
                            "message": "OESUpload Upsert finished successfully",
                            "severity": "INFO"
                        },
                        "headers": {
                            "interfaceName": "OESUpload",
                            "parentRunId": "@variables('ParentRunID')",
                            "runId": "@{workflow()['run']['name']}"
                        },
                        "host": {
                            "triggerName": "manual",
                            "workflow": {
                                "id": "${nonsfs_internal_sf4sLog_logicAppId}"
                            }
                        }
                    },
                    "runAfter": {
                        "Delete_file": [
                            "Succeeded"
                        ]
                    },
                    "type": "Workflow"
                }
            },
            "runAfter": {
                "Try_SalesForce_upload": [
                    "Succeeded"
                ]
            },
            "type": "Scope"
        },
        "Move_file_to_error": {
            "actions": {
                "BlobToZipConverterFunction_2": {
                    "inputs": {
                        "body": {
                            "blobContainerName": "@{parameters('BlobContainerName')}",
                            "incomingBlobPath": "@{workflow()['run']['name']}/incoming",
                            "incominigBlobName": "@{body('Create_blob_log_(V2)')?['Name']}",
                            "outcomingBlobPath": "@{workflow()['run']['name']}/logZip"
                        },
                        						"authentication": {
							"type": "Raw",
							"value": "[parameters('functionAppKey')]"
						},
"function": {
                            "id": "[concat(parameters('funcApp'), '/functions/BlobToZipConverterFunction')]"
                        }
                    },
                    "runAfter": {
                        "Create_blob_log_(V2)": [
                            "Succeeded"
                        ]
                    },
                    "type": "Function"
                },
                "Copy_file_to_error": {
                    "inputs": {
                        "headers": {
                            "ReadFileMetadataFromServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/copyFile",
                        "queries": {
                            "destination": "@parameters('ErrorPath')",
                            "overwrite": false,
                            "queryParametersSingleEncoded": true,
                            "source": "@body('Get_file_metadata_2')?['Path']"
                        }
                    },
                    "runAfter": {
                        "Get_file_metadata_2": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Create_blob_log_(V2)": {
                    "inputs": {
                        "body": "File name: @{body('Get_file_metadata_2')?['DisplayName']}\n======FAILED RECORDS======\n@{variables('FailedLogs')}\n======FAILED RECORDS======\n======UNPROCESSED RECORDS======\n@{variables('Unprocessed')}\n======UNPROCESSED RECORDS======\n======SUCCESSFUL RECORDS======\n@{variables('Processed')}\n======SUCCESSFUL RECORDS======",
                        "headers": {
                            "ReadFileMetadataFromServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
                        "queries": {
                            "folderPath": "@{parameters('BlobContainerName')}/@{workflow()['run']['name']}/incoming",
                            "name": "CSV_Log@{formatDateTime(utcNow(), 'yyyyMMddHHmmss')}.csv",
                            "queryParametersSingleEncoded": true
                        }
                    },
                    "runAfter": {
                        "logic-c00031-NonSFS_internal_sf4sLog-weu-dev_4": [
                            "Succeeded"
                        ]
                    },
                    "runtimeConfiguration": {
                        "contentTransfer": {
                            "transferMode": "Chunked"
                        }
                    },
                    "type": "ApiConnection"
                },
                "Create_file_log": {
                    "inputs": {
                        "body": "@body('Get_zipped_log_blob_content_(V2)_2')",
                        "headers": {
                            "ReadFileMetadataFromServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
                        "queries": {
                            "folderPath": "@parameters('LogPath')",
                            "name": "Logs@{utcNow()}.zip",
                            "queryParametersSingleEncoded": true
                        }
                    },
                    "runAfter": {
                        "Get_zipped_log_blob_content_(V2)_2": [
                            "Succeeded"
                        ]
                    },
                    "runtimeConfiguration": {
                        "contentTransfer": {
                            "transferMode": "Chunked"
                        }
                    },
                    "type": "ApiConnection"
                },
                "Delete_blob_(V2)_2": {
                    "inputs": {
                        "headers": {
                            "SkipDeleteIfFileNotFoundOnServer": false
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "delete",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(body('Create_blob_log_(V2)')?['Id']))}"
                    },
                    "runAfter": {
                        "Create_file_log": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Delete_file_2": {
                    "inputs": {
                        "headers": {
                            "SkipDeleteIfFileNotFoundOnServer": true
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "delete",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(body('Get_file_metadata_2')?['Path']))}"
                    },
                    "runAfter": {
                        "Copy_file_to_error": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Get_file_metadata_2": {
                    "inputs": {
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureblobsftpssh']['connectionId']"
                            }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(variables('IncomingFileID')))}"
                    },
                    "runAfter": {},
                    "type": "ApiConnection"
                },
                "Get_zipped_log_blob_content_(V2)_2": {
                    "inputs": {
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(parameters('BlobContainerName'),'/',body('BlobToZipConverterFunction_2')?['Value']))}/content",
                        "queries": {
                            "inferContentType": true
                        }
                    },
                    "runAfter": {
                        "BlobToZipConverterFunction_2": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Terminate_Failed": {
                    "inputs": {
                        "runStatus": "Failed"
                    },
                    "runAfter": {
                        "Delete_blob_(V2)_2": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                },
                "logic-c00031-NonSFS_internal_sf4sLog-weu-dev_4": {
                    "inputs": {
                        "body": {
                            "message": "OESUpload Upsert failed",
                            "severity": "INFO"
                        },
                        "headers": {
                            "interfaceName": "OESUpload",
                            "parentRunId": "@variables('ParentRunID')",
                            "runId": "@{workflow()['run']['name']}"
                        },
                        "host": {
                            "triggerName": "manual",
                            "workflow": {
                                "id": "${nonsfs_internal_sf4sLog_logicAppId}"
                            }
                        }
                    },
                    "runAfter": {
                        "Delete_file_2": [
                            "Succeeded"
                        ]
                    },
                    "type": "Workflow"
                }
            },
            "runAfter": {
                "Try_SalesForce_upload": [
                    "TimedOut",
                    "Skipped",
                    "Failed"
                ]
            },
            "type": "Scope"
        },
        "Parse_input_JSON_": {
            "inputs": {
                "content": "@triggerBody()?['MessageText']",
                "schema": {
                    "properties": {
                        "FileName": {
                            "type": "string"
                        },
                        "fileID": {
                            "type": "string"
                        },
                        "runID": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "runAfter": {
                "Initialize_variable_ParentRunID": [
                    "Succeeded"
                ],
                "Initialize_variable_Processed": [
                    "Succeeded"
                ],
                "Initialize_variable_UnprocessedLogs": [
                    "Succeeded"
                ]
            },
            "type": "ParseJson"
        },
        "Set_variable_IncomingFileID": {
            "inputs": {
                "name": "IncomingFileID",
                "value": "@body('Parse_input_JSON_')?['fileID']"
            },
            "runAfter": {
                "Parse_input_JSON_": [
                    "Succeeded"
                ]
            },
            "type": "SetVariable"
        },
        "Set_variable_ParentRunID": {
            "inputs": {
                "name": "ParentRunID",
                "value": "@body('Parse_input_JSON_')?['runID']"
            },
            "runAfter": {
                "Parse_input_JSON_": [
                    "Succeeded"
                ]
            },
            "type": "SetVariable"
        },
        "Try_SalesForce_upload": {
            "actions": {
                "Get_all_splitted_files_from_blob_storage": {
                    "actions": {
                        "Close_or_abort_a_job": {
                            "inputs": {
                                "body": {
                                    "state": "UploadComplete"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "patch",
                                "path": "/codeless/jobs/ingest/@{encodeURIComponent(body('Create_a_job_(V2)')?['id'])}"
                            },
                            "runAfter": {
                                "Upload_job_data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Compose": {
                            "inputs": "S4SSource_System__c;S4SType__c;S4SSubtype__c;S4SIdentification_Number__c;S4SPrimary__c;S4SIfA__c;S4SOrder_Block__c;S4SMarked_for_Deletion__c;S4SCompany_Code__c;S4SSales_Org__c;S4SSAP_Account_Group__c;S4SLocal_Source_System__c;S4SAccount__r.S4SIfA__c;S4SEXTERNAL_ID__C\n@{body('Get_splitted_blob_content')}",
                            "runAfter": {
                                "Get_splitted_blob_content": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose"
                        },
                        "Condition_2": {
                            "actions": {
                                "Append_to_string_variable": {
                                    "inputs": {
                                        "name": "FailedLogs",
                                        "value": "@{substring(body('Get_job_results_Unprocessed'), 269)}\n"
                                    },
                                    "runAfter": {},
                                    "type": "AppendToStringVariable"
                                },
                                "logic-c00031-NonSFS_internal_sf4sLog-weu-dev_2": {
                                    "inputs": {
                                        "body": {
                                            "message": "@{substring(body('Get_job_results_Unprocessed'), 269)}",
                                            "severity": "INFO"
                                        },
                                        "headers": {
                                            "interfaceName": "OESUpload",
                                            "runId": "@{workflow()['run']['name']}"
                                        },
                                        "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                                "id": "${nonsfs_internal_sf4sLog_logicAppId}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Append_to_string_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Workflow"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Get_job_results_Unprocessed')",
                                                "@string('')"
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Get_job_results_Unprocessed')",
                                                "@null"
                                            ]
                                        }
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Get_job_results_Unprocessed'))",
                                            269
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Get_job_results_Unprocessed": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_on_failed_records": {
                            "actions": {
                                "Append_to_FailedLogs": {
                                    "inputs": {
                                        "name": "FailedLogs",
                                        "value": "@{substring(body('Get_job_results_Failed'), 289)}\n"
                                    },
                                    "runAfter": {},
                                    "type": "AppendToStringVariable"
                                },
                                "logic-c00031-NonSFS_internal_sf4sLog-weu-dev": {
                                    "inputs": {
                                        "body": {
                                            "message": "@{substring(body('Get_job_results_Failed'), 290)}",
                                            "severity": "INFO"
                                        },
                                        "headers": {
                                            "interfaceName": "OESUpload",
                                            "runId": "@{workflow()['run']['name']}"
                                        },
                                        "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                                "id": "${nonsfs_internal_sf4sLog_logicAppId}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Append_to_FailedLogs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Workflow"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Get_job_results_Failed')",
                                                "@string('')"
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Get_job_results_Failed')",
                                                "@null"
                                            ]
                                        }
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Get_job_results_Failed'))",
                                            289
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Get_job_results_Failed": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_on_successful_records": {
                            "actions": {
                                "Append_to_Processed_variable": {
                                    "inputs": {
                                        "name": "Processed",
                                        "value": "@substring(body('Get_job_results_Successful'), 290)"
                                    },
                                    "runAfter": {},
                                    "type": "AppendToStringVariable"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Get_job_results_Successful')",
                                                "@string('')"
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('Get_job_results_Successful')",
                                                "@null"
                                            ]
                                        }
                                    },
                                    {
                                        "greater": [
                                            "@length(body('Get_job_results_Successful'))",
                                            290
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Get_job_results_Successful": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Create_a_job_(V2)": {
                            "inputs": {
                                "body": {
                                    "columnDelimiter": "SEMICOLON",
                                    "contentType": "CSV",
                                    "externalIdFieldName": "S4SEXTERNAL_ID__C",
                                    "object": "s4sidentification_number__c",
                                    "operation": "upsert"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/bulk/createjob"
                            },
                            "runAfter": {
                                "Compose": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Delete_blob": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                                    }
                                },
                                "method": "delete",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(items('Get_all_splitted_files_from_blob_storage')?['Id']))}"
                            },
                            "runAfter": {
                                "Condition_2": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ],
                                "Condition_on_failed_records": [
                                    "Succeeded",
                                    "Skipped",
                                    "Failed",
                                    "TimedOut"
                                ],
                                "Condition_on_successful_records": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Get_job_results_Failed": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/jobs/ingest/@{encodeURIComponent(body('Get_job_info')?['id'])}/results",
                                "queries": {
                                    "resultType": "Failed"
                                }
                            },
                            "runAfter": {
                                "Until_Bulk_state_is_Failed_or_Complete": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Get_job_results_Successful": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/jobs/ingest/@{encodeURIComponent(body('Get_job_info')?['id'])}/results",
                                "queries": {
                                    "resultType": "Successful"
                                }
                            },
                            "runAfter": {
                                "Until_Bulk_state_is_Failed_or_Complete": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Get_job_results_Unprocessed": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/codeless/jobs/ingest/@{encodeURIComponent(body('Get_job_info')?['id'])}/results",
                                "queries": {
                                    "resultType": "Unprocessed"
                                }
                            },
                            "runAfter": {
                                "Until_Bulk_state_is_Failed_or_Complete": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "Get_splitted_blob_content": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files/@{encodeURIComponent(encodeURIComponent(items('Get_all_splitted_files_from_blob_storage')?['Id']))}/content",
                                "queries": {
                                    "inferContentType": false
                                }
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                        },
                        "Until_Bulk_state_is_Failed_or_Complete": {
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Set_variable": {
                                            "inputs": {
                                                "name": "BulkState",
                                                "value": true
                                            },
                                            "runAfter": {},
                                            "type": "SetVariable"
                                        }
                                    },
                                    "else": {
                                        "actions": {
                                            "Delay": {
                                                "inputs": {
                                                    "interval": {
                                                        "count": 30,
                                                        "unit": "Second"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Wait"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "equals": [
                                                    "@body('Get_job_info')?['state']",
                                                    "Failed"
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@body('Get_job_info')?['state']",
                                                    "JobComplete"
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {
                                        "Get_job_info": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_job_info": {
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/codeless/jobs/ingest/@{encodeURIComponent(body('Close_or_abort_a_job')?['id'])}"
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                }
                            },
                            "expression": "@equals(variables('BulkState'), true)",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "runAfter": {
                                "Close_or_abort_a_job": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Until"
                        },
                        "Upload_job_data": {
                            "inputs": {
                                "body": "@outputs('Compose')",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "put",
                                "path": "/codeless/jobs/ingest/@{encodeURIComponent(body('Create_a_job_(V2)')?['id'])}/batches"
                            },
                            "runAfter": {
                                "Create_a_job_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        }
                    },
                    "foreach": "@body('Lists_blobs_(V2)_2')?['value']",
                    "runAfter": {
                        "Lists_blobs_(V2)_2": [
                            "Succeeded"
                        ]
                    },
                    "type": "Foreach"
                },
                "Lists_blobs_(V2)_2": {
                    "inputs": {
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['azureBlobConnection']['connectionId']"
                            }
                        },
                        "method": "get",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('${st_name}'))}/foldersV2/@{encodeURIComponent(encodeURIComponent(parameters('BlobContainerName'),'/',variables('ParentRunID'),'/processed'))}",
                        "queries": {
                            "nextPageMarker": "",
                            "useFlatListing": false
                        }
                    },
                    "runAfter": {},
                    "type": "ApiConnection"
                }
            },
            "runAfter": {
                "Set_variable_IncomingFileID": [
                    "Succeeded"
                ],
                "Set_variable_ParentRunID": [
                    "Succeeded"
                ]
            },
            "type": "Scope"
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
        "$connections": {
            "defaultValue": {},
            "type": "Object"
        },
        "ArchivePath": {
            "defaultValue": "/sftp-container-c00031/sftp-c00031/OES/in/OES/archive",
            "type": "String"
        },
        "BlobContainerName": {
            "defaultValue": "sftp-container-c00031-oesupload",
            "type": "String"
        },
        "ErrorPath": {
            "defaultValue": "/sftp-container-c00031/sftp-c00031/OES/in/OES/error",
            "type": "String"
        },
        "Filter": {
            "defaultValue": "csv",
            "type": "String"
        },
        "IncomingPath": {
            "defaultValue": "/sftp-container-c00031/sftp-c00031/OES/in/OES/incoming",
            "type": "String"
        },
        "InterfaceRootPath": {
            "defaultValue": "/sftp-container-c00031/sftp-c00031/OES/in/OES/",
            "type": "String"
        },
        "LogPath": {
            "defaultValue": "/sftp-container-c00031/sftp-c00031/OES/in/OES/log",
            "type": "String"
        },
        "MaxRows": {
            "defaultValue": 5000,
            "type": "Int"
        },
        "WorkingPath": {
            "defaultValue": "/sftp-container-c00031/sftp-c00031/OES/in/OES/working",
            "type": "String"
        }
    },
    "triggers": {
        "When_there_are_messages_in_a_queue_(V2)": {
            "inputs": {
                "host": {
                    "connection": {
                        "name": "@parameters('$connections')['queueConnection']['connectionId']"
                    }
                },
                "method": "get",
                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent('${st_name}'))}/queues/@{encodeURIComponent('oesupload')}/message_trigger"
            },
            "recurrence": {
                "frequency": "Minute",
                "interval": 5
            },
            "splitOn": "@triggerBody()?['QueueMessagesList']?['QueueMessage']",
            "type": "ApiConnection"
        }
    }
}