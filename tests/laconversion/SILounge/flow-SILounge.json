{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "Catch-Scope": {
            "actions": {
                "Failure_Response_": {
                    "inputs": {
                        "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>0</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>",
                        "statusCode": 400
                    },
                    "kind": "Http",
                    "runAfter": {},
                    "type": "Response"
                },
                "Terminate": {
                    "inputs": {
                        "runError": {
                            "code": "Exception"
                        },
                        "runStatus": "Failed"
                    },
                    "runAfter": {
                        "Failure_Response_": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                }
            },
            "runAfter": {
                "Try-Scope": [
                    "Failed",
                    "Skipped",
                    "TimedOut"
                ]
            },
            "type": "Scope"
        },
        "GetConfiguration": {
            "inputs": {
                "body": {
                    "key": "obm-config"
                },
                "host": {
                    "triggerName": "manual",
                    "workflow": {
                        "id": "${getConfiguration_logicAppId}"
                    }
                },
                "retryPolicy": {
                    "type": "none"
                }
            },
            "runAfter": {},
             "runtimeConfiguration": {
                    "secureData": {
                        "properties": [
                            "outputs"
                        ]
                    }
                },
            "type": "Workflow"
        },
        "Try-Scope": {
            "actions": {
                "For_each_-Send": {
                    "actions": {
                        "Condition": {
                            "actions": {},
                            "else": {
                                "actions": {
                                    "SendOBM": {
                                        "inputs": {
                                            "body": {
                                                "app_metadata": {
                                                    "@{items('For_each_-Send')?['sObject']?['sf:S4SName__c']}_@{items('For_each_-Send')?['sObject']?['sf:S4SValue__c']}": {
                                                        "active": true,
                                                        "source": "azure",
                                                        "updated_at": "@{formatDateTime(utcNow(), 'yyyy-MM-ddThh:mm:ss')}"
                                                    }
                                                }
                                            },
                                            "headers": {
                                                "Authorization": "Bearer @{body('Get_Token')?['access_token']}"
                                            },
                                            "method": "PATCH",
                                            "uri": "@{json(body('GetConfiguration'))?['Silounge']?['base_url']}/@{json(body('GetConfiguration'))?['Silounge']?['path_users']}/@{body('GetUserIdByEmail')?[0]?['user_id']}"
                                        },
                                        "runAfter": {},
                                        "type": "Http"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@length(body('GetUserIdByEmail'))",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "GetUserIdByEmail": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "GetUserIdByEmail": {
                            "inputs": {
                                "headers": {
                                    "Authorization": "Bearer @{body('Get_Token')?['access_token']}"
                                },
                                "method": "GET",
                                "queries": {
                                    "email": "@items('For_each_-Send')?['sObject']?['sf:S4SContact_Email__c']",
                                    "field": "user_id"
                                },
                                "uri": "@{json(body('GetConfiguration'))?['Silounge']?['base_url']}/@{json(body('GetConfiguration'))?['Silounge']?['path_users_by_email']}"
                            },
                            "runAfter": {},
                            "type": "Http"
                        }
                    },
                    "foreach": "@outputs('Retrieve_Notifications_as_array')",
                    "runAfter": {
                        "Retrieve_Notifications_as_array": [
                            "Succeeded"
                        ]
                    },
                    "type": "Foreach"
                },
                "Get_Token": {
                    "inputs": {
                        "body": "@json(body('GetConfiguration'))?['Silounge']?['cred']",
                        "method": "POST",
                        "uri": "@{json(body('GetConfiguration'))?['Silounge']?['base_url']}/@{json(body('GetConfiguration'))?['Silounge']?['path_oauth']}"
                    },
                    "runAfter": {},
                    "type": "Http"
                },
                "Parse_JSON": {
                    "inputs": {
                        "content": "@json(xml(triggerBody()))",
                        "schema": {
                            "properties": {
                                "?xml": {
                                    "properties": {
                                        "@@encoding": {
                                            "type": "string"
                                        },
                                        "@@version": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "soapenv:Envelope": {
                                    "properties": {
                                        "@@xmlns:soapenv": {
                                            "type": "string"
                                        },
                                        "@@xmlns:xsd": {
                                            "type": "string"
                                        },
                                        "@@xmlns:xsi": {
                                            "type": "string"
                                        },
                                        "soapenv:Body": {
                                            "properties": {
                                                "notifications": {
                                                    "properties": {
                                                        "@@xmlns": {
                                                            "type": "string"
                                                        },
                                                        "ActionId": {
                                                            "type": "string"
                                                        },
                                                        "EnterpriseUrl": {
                                                            "type": "string"
                                                        },
                                                        "Notification": {
                                                            "items": {
                                                                "properties": {
                                                                    "Id": {
                                                                        "type": "string"
                                                                    },
                                                                    "sObject": {
                                                                        "properties": {
                                                                            "@@xmlns:sf": {
                                                                                "type": "string"
                                                                            },
                                                                            "@@xsi:type": {
                                                                                "type": "string"
                                                                            },
                                                                            "sf:Id": {
                                                                                "type": "string"
                                                                            },
                                                                            "sf:S4SContact_Email__c": {
                                                                                "type": "string"
                                                                            },
                                                                            "sf:S4SContact__c": {
                                                                                "type": "string"
                                                                            },
                                                                            "sf:S4SName__c": {
                                                                                "type": "string"
                                                                            },
                                                                            "sf:S4SValue__c": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "Id",
                                                                    "sObject"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": [
                                                                "array",
                                                                "object"
                                                            ]
                                                        },
                                                        "OrganizationId": {
                                                            "type": "string"
                                                        },
                                                        "PartnerUrl": {
                                                            "type": "string"
                                                        },
                                                        "SessionId": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "runAfter": {
                        "Get_Token": [
                            "Succeeded"
                        ]
                    },
                    "type": "ParseJson"
                },
                "Retrieve_Notifications_as_array": {
                    "inputs": "@if(greater(int(xpath(xml(replace(string(replace(string(triggerBody()) , 'soapenv:Body' , 'Body')),'soapenv:Envelope' , 'Envelope')), \r\n'count(/*[local-name()=\"Envelope\"]/*[local-name()=\"Body\"]/*[local-name()=\"notifications\"]/*[local-name()=\"Notification\"])')), 1),\r\nbody('Parse_JSON')?['soapenv:Envelope']?['soapenv:Body']?['notifications']?['Notification'],\r\ncreateArray(body('Parse_JSON')?['soapenv:Envelope']?['soapenv:Body']?['notifications']?['Notification']))",
                    "runAfter": {
                        "Parse_JSON": [
                            "Succeeded"
                        ]
                    },
                    "type": "Compose"
                },
                "Success_Response": {
                    "inputs": {
                        "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>1</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>\n\n\n\n",
                        "statusCode": 200
                    },
                    "kind": "Http",
                    "runAfter": {
                        "For_each_-Send": [
                            "Succeeded"
                        ]
                    },
                    "type": "Response"
                }
            },
            "runAfter": {
                "GetConfiguration": [
                    "Succeeded"
                ]
            },
            "trackedProperties": {
                "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'not-defined')}",
                "citizenName": "c00031",
                "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'SILounge')}",
                "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
                "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'non-defined')}",
                "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'SILounge')}",
                "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
                "clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
                "clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
                },
            "type": "Scope"
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {},
    "triggers": {
        "manual": {
            "inputs": {
                "schema": {}
            },
            "kind": "Http",
            "type": "Request"
        }
    }
}