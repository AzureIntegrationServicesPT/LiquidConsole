{
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Get_Token": {
                "inputs": {
                    "headers": {
                        "Ocp-Apim-Subscription-Key": "${apimKey}"
                    },
                    "method": "POST",
                    "uri": "${apimURL}"
                },
                "runAfter": {
                    "Initialize_variable": [
                        "Succeeded"
                    ],
                    "Initialize_variable_ProximityOpportunity_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_QuoteFinalResponse": [
                        "Succeeded"
                    ],
                    "Initialize_variable_S4STranche_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_UpsertBookingLine_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_UpsertInvolvedAccounts_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_UpsertQuoteLine_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_UpsertQuote_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_UpsertoppLine_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_Upsertopp_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_opportunityTeamMember_response": [
                        "Succeeded"
                    ],
                    "Initialize_variable_response_Obj": [
                        "Succeeded"
                    ]
                },
                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                "type": "Http"
            },
            "Initialize_variable": {
                "inputs": {
                    "variables": [
                        {
                            "name": "EmptyArray",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_ProximityOpportunity_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "ProximityOpportunity_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_QuoteFinalResponse": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertQuoteFinalResponse",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_S4STranche_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "S4STranche_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_UpsertBookingLine_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertBookingLine_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_UpsertInvolvedAccounts_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertInvolvedAccounts_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_UpsertQuoteLine_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertQuoteLine_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_UpsertQuote_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertQuote_response",
                            "type": "string"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_UpsertoppLine_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertoppLine_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_Upsertopp_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "UpsertOpp_response",
                            "type": "string"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_opportunityTeamMember_response": {
                "inputs": {
                    "variables": [
                        {
                            "name": "opportunityTeamMember_response",
                            "type": "array"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Initialize_variable_response_Obj": {
                "inputs": {
                    "variables": [
                        {
                            "name": "SIE_SF4S_upsertOppObjectsRes",
                            "type": "string",
                            "value": "{\n  \"SIE_SF4S_upsertOppObjectsRes\": {\n    \"Opportunity\": \"OppVar\",\n    \"bookingLine\": \"BookingLineVarArray\",\n    \"involvedAccounts\": \"involvedAccountsVarArray\",\n    \"quote\": \"QuoteArray\",\n    \"oppLine\":\"oppLineArray\",\n    \"tranche\": \"trancheArray\" ,\n    \"opportunityTeamMember\": \"opportunityTeamMemberVarArray\",\n    \"ProximityOpportunity\": \"ProximityOpportunityVarArray\"\n  }\n}\n"
                        }
                    ]
                },
                "runAfter": {},
                "type": "InitializeVariable"
            },
            "Response": {
                "inputs": {
                    "body": "@outputs('Compose_final_response')",
                    "headers": {
                        "Content-Type": "application/json"
                    },
                    "statusCode": 200
                },
                "kind": "Http",
                "runAfter": {
                    "Scope_-_Opportunity_Upsert": [
                        "Succeeded"
                    ]
                },
                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                "type": "Response"
            },
            "Scope_-_Opportunity_Upsert": {
                "actions": {
                    "Compose_final_response": {
                        "inputs": {
                            "SIE_SF4S_upsertOppObjectsRes": {
                                "Opportunity": "@json(variables('UpsertOpp_response'))",
                                "ProximityOpportunity": "@variables('ProximityOpportunity_response')",
                                "bookingLine": "@variables('UpsertBookingLine_response')",
                                "involvedAccounts": "@variables('UpsertInvolvedAccounts_response')",
                                "oppLine": "@variables('UpsertoppLine_response')",
                                "opportunityTeamMember": "@variables('opportunityTeamMember_response')",
                                "quote": "@variables('UpsertQuoteFinalResponse')",
                                "tranche": "@variables('S4STranche_response')"
                            }
                        },
                        "runAfter": {
                            "Condition_response_upsertOpportunity": [
                                "Succeeded",
                                "Skipped",
                                "Failed"
                            ],
                            "Upsert_Quote": [
                                "Succeeded",
                                "Skipped",
                                "Failed"
                            ]
                        },
                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },                      
                        "type": "Compose"
                    },
                    "Condition": {
                        "actions": {
                            "Create_record": {
                                "inputs": {
                                    "body": "@setProperty(setProperty(setProperty(json(replace(replace(string(outputs('UpsertOppJSONConvert')?['Body']),'\"0\"','false'),'\"1\"','true')),'S4SSFS_Opportunity_Rating__c',triggerBody()?['Opportunity']?['S4SSFS_Opportunity_Rating__c']),'S4SSFS_Account_Rating__c',triggerBody()?['Opportunity']?['S4SSFS_Account_Rating__c']),'Probability',triggerBody()?['Opportunity']?['Probability'])",
                                    "headers": {
                                        "Authorization": "Bearer @{body('Get_Token')}",
                                        "Content-Type": "application/json"
                                    },
                                    "method": "POST",
                                    "path": "/v2/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('Opportunity'))}/items",
                                    "uri": "${instanceURL}/sobjects/Opportunity/"
                                },
                                "runAfter": {},
                                  "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                "type": "Http"
                            }
                        },
                        "else": {
                            "actions": {
                                "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)": {
                                    "inputs": {
                                        "body": "@removeProperty(json(string(outputs('UpsertOppJSONConvert')?['Body'])), 'Id')",
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_Token')}",
                                            "Content-Type": "application/json"
                                        },
                                        "method": "PATCH",
                                        "path": "/v2/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('Opportunity'))}/externalIdFields/@{encodeURIComponent(encodeURIComponent('Id'))}/@{encodeURIComponent(encodeURIComponent(outputs('UpsertOppJSONConvert')?['Id']))}",
                                         "uri": "${instanceURL}/sobjects/Opportunity/Id/@{outputs('UpsertOppJSONConvert')?['Body']?['Id']}"
                                    },
                                    "runAfter": {},
                                     "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                    "type": "Http"
                                }
                            }
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@outputs('UpsertOppJSONConvert')?['Body']?['Id']",
                                        "@null"
                                    ]
                                },
                                {
                                    "equals": [
                                        "@outputs('UpsertOppJSONConvert')?['Body']?['Id']",
                                        "@string('')"
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "UpsertOppJSONConvert": [
                                "Succeeded"
                            ]
                        },
                        "type": "If"
                    },
                    "Condition_response_upsertOpportunity": {
                        "actions": {
                            "Delete_Involved_Accounts_and_Opp_Team_Members": {
                                "actions": {
                                    "Execute_a_SOQL_query": {
                                        "inputs": {
                                            "headers": {
                                                "Authorization": "Bearer @{body('Get_Token')}"
                                            },
                                            "method": "GET",
                                            "uri": "${instanceURL}/query/?q=SELECT+Id+FROM+S4SInvolved_Accounts__c+WHERE+S4SOpportunity__c+=+'@{coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id']}'"
                                        },
                                        "runAfter": {},
                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                        "type": "Http"
                                    },
                                    "Execute_a_SOQL_query_2": {
                                        "inputs": {
                                            "headers": {
                                                "Authorization": "Bearer @{body('Get_Token')}"
                                            },
                                            "method": "GET",
                                             "uri": "${instanceURL}/query/?q=select+Id+from+OpportunityTeamMember+where+OpportunityId='@{coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id']}'"
                                        },
                                        "runAfter": {},
                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                        "type": "Http"
                                    },
                                    "For_each": {
                                        "actions": {
                                            "Delete_record": {
                                                "inputs": {
                                                    "headers": {
                                                        "Authorization": "Bearer @{body('Get_Token')}"
                                                    },
                                                    "method": "DELETE",
                                                    "uri": "${instanceURL}/sobjects/S4SInvolved_Accounts__c/@{items('For_each')?['Id']}"
                                                },
                                                "runAfter": {},
                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                "type": "Http"
                                            }
                                        },
                                        "foreach": "@coalesce(body('Execute_a_SOQL_query')?['records'], variables('EmptyArray'))",
                                        "runAfter": {
                                            "Execute_a_SOQL_query": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Foreach"
                                    },
                                    "For_each_2": {
                                        "actions": {
                                            "Delete_record_2": {
                                                "inputs": {
                                                    "headers": {
                                                        "Authorization": "Bearer @{body('Get_Token')}"
                                                    },
                                                    "method": "DELETE",
                                                     "uri": "${instanceURL}/sobjects/OpportunityTeamMember/@{items('For_each_2')?['Id']}"
                                                },
                                                "runAfter": {},
                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                "type": "Http"
                                            }
                                        },
                                        "foreach": "@coalesce(body('Execute_a_SOQL_query_2')?['records'], variables('EmptyArray'))",
                                        "runAfter": {
                                            "Execute_a_SOQL_query_2": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Foreach"
                                    },
                                    "log_for_Fetched_IA": {
                                        "inputs": {
                                            "body": {
                                                "message": "Fetched Involved Accounts:  '@{coalesce(outputs('Create_record')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['Body']?['id'])}'",
                                                "severity": "DEBUG"
                                            },
                                            "headers": {
                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                            },
                                            "host": {
                                                "triggerName": "manual",
                                                "workflow": {
                                                    "id": "[parameters('sf4sLog_logicApp_id')]"
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "Execute_a_SOQL_query": [
                                                "Succeeded"
                                            ]
                                        },
                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                        "type": "Workflow"
                                    },
                                    "log_for_Fetched_OpportuntiyTeamMember": {
                                        "inputs": {
                                            "body": {
                                                "message": "Fetched OpportuntiyTeamMember :  '@{coalesce(outputs('Create_record')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['Body']?['id'])}'",
                                                "severity": "DEBUG"
                                            },
                                            "headers": {
                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                            },
                                            "host": {
                                                "triggerName": "manual",
                                                "workflow": {
                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "Execute_a_SOQL_query_2": [
                                                "Succeeded"
                                            ]
                                        },
                                          "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                        "type": "Workflow"
                                    }
                                },
                                "runAfter": {},
                                "type": "Scope"
                            },
                            "Set_variable_UpsertOpp_response_succes": {
                                "inputs": {
                                    "name": "UpsertOpp_response",
                                    "value": "{\n  \"SIE_SF4S_upsertResponse\": {\n    \"Id\": \"@{coalesce(body('Create_record')?['id'],body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['id'])}\",\n    \"Status\": \"True\",\n    \"created\": \"@{if(equals(triggerBody()?['Opportunity']?['Id'],null),'true','false')}\",\n\"Message\":\"\"\n\n  }\n}"
                                },
                                "runAfter": {},
                                "type": "SetVariable"
                            },
                            "Success_Oportunity_Log": {
                                "inputs": {
                                    "body": {
                                        "message": "Opportunity with Id: '@{coalesce(body('Create_record')?['id'],body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['id'])}' created/ updated successfully.",
                                        "severity": "INFO"
                                    },
                                    "headers": {
                                        "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                        "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                        "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                    },
                                    "host": {
                                        "triggerName": "manual",
                                        "workflow": {
                                           "id": "[parameters('sf4sLog_logicApp_id')]"
                                        }
                                    }
                                },
                                "runAfter": {},
                                "type": "Workflow"
                            },
                            "Upsert_child_entities": {
                                "actions": {
                                    "Upsert_BookingLine": {
                                        "actions": {
                                            "For_each_BookingLine": {
                                                "actions": {
                                                    "Append_to_array_variable": {
                                                        "inputs": {
                                                            "name": "UpsertBookingLine_response",
                                                            "value": "@coalesce(outputs('Compose_BL_success_response'),outputs('Compose_BL_failed_response'))"
                                                        },
                                                        "runAfter": {
                                                            "Compose_BL_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_BL_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "type": "AppendToArrayVariable"
                                                    },
                                                    "BL_Log": {
                                                        "inputs": {
                                                            "body": {
                                                                "message": "BookingLine Response: @{base64(coalesce(outputs('Compose_BL_success_response'),outputs('Compose_BL_failed_response')))}",
                                                                "severity": "INFO"
                                                            },
                                                            "headers": {
                                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                                            },
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Compose_BL_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_BL_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "type": "Workflow"
                                                    },
                                                    "Compose_BL_failed_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "",
                                                                "Message": "@{coalesce(outputs('Create_record_4')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_4')?['Body']?[0]?['message'])}",
                                                                "Status": "Failure",
                                                                "created": ""
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_4": [
                                                                "Failed",
                                                                "TimedOut",
                                                                "Skipped"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Compose_BL_success_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "@{coalesce(outputs('Create_record_4')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_4')?['Body']?['id'])}",
                                                                "Message": "",
                                                                "Status": "True",
                                                                "created": "@{if(equals(item()?['Id'],null),'true','false')}"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_4": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Condition_4": {
                                                        "actions": {
                                                            "Create_record_4": {
                                                                "inputs": {
                                                                    "body": "@setProperty(json(string(item())),'S4SOpportunity__c',coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id'])",
                                                                    "headers": {
                                                                        "Authorization": "Bearer @{body('Get_Token')}",
                                                                        "Content-Type": "application/json"
                                                                    },
                                                                    "method": "POST",
                                                                    "retryPolicy": {
                                                                        "count": 1,
                                                                        "interval": "PT10S",
                                                                        "type": "exponential"
                                                                    },
                                                                    "uri": "${instanceURL}/sobjects/S4SBooking_Line_Item__c/"
                                                                },
                                                                "runAfter": {},
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                "type": "Http"
                                                            }
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_4": {
                                                                    "inputs": {
                                                                        "body": "@removeproperty(json(string(item())),'Id')",
                                                                        "headers": {
                                                                            "Authorization": "Bearer @{body('Get_Token')}",
                                                                            "Content-Type": "application/json"
                                                                        },
                                                                        "method": "PATCH",
                                                                        "uri": "${instanceURL}/sobjects/S4SBooking_Line_Item__c/Id/@{items('For_each_BookingLine')?['Id']}"
                                                                    },
                                                                    "runAfter": {},
                                                                     "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                    "type": "Http"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "or": [
                                                                {
                                                                    "equals": [
                                                                        "@item()?['Id']",
                                                                        "@null"
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@item()?['Id']",
                                                                        "@string('')"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {},
                                                        "type": "If"
                                                    }
                                                },
                                                "foreach": "@coalesce(triggerBody()?['Opportunity']?['bookingLine'], variables('EmptyArray'))",
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    },
                                    "Upsert_Proximity_Opp": {
                                        "actions": {
                                            "For_each_proximity_opp": {
                                                "actions": {
                                                    "Append_response_to_Array_variable_PO": {
                                                        "inputs": {
                                                            "name": "ProximityOpportunity_response",
                                                            "value": "@coalesce(outputs('Compose_Po_success_response'),outputs('Compose_Po_failed_response'))"
                                                        },
                                                        "runAfter": {
                                                            "Compose_Po_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_Po_success_response": [
                                                                "Succeeded",
                                                                "Failed",
                                                                "Skipped"
                                                            ]
                                                        },
                                                        "type": "AppendToArrayVariable"
                                                    },
                                                    "Compose_Po_failed_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "",
                                                                "Message": "@{coalesce(outputs('Create_record_3')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_3')?['Body']?[0]?['message'])}",
                                                                "Status": "Failure",
                                                                "created": ""
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_3": [
                                                                "Failed",
                                                                "Skipped",
                                                                "TimedOut"
                                                            ]
                                                        },
                                                          "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Compose_Po_success_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "@{coalesce(outputs('Create_record_3')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_3')?['Body']?['id'])}",
                                                                "Message": "",
                                                                "Status": "True",
                                                                "created": "@{if(equals(item()?['Id'],null),'true','false')}"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_3": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                          "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Condition_3": {
                                                        "actions": {
                                                            "Create_record_3": {
                                                                "inputs": {
                                                                    "body": "@setProperty(json(string(item())),'S4SSFS_Opportunity__c',coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id'])",
                                                                    "headers": {
                                                                        "Authorization": "Bearer @{body('Get_Token')}",
                                                                        "Content-Type": "application/json"
                                                                    },
                                                                    "method": "POST",
                                                                    "retryPolicy": {
                                                                        "count": 1,
                                                                        "interval": "PT10S",
                                                                        "type": "exponential"
                                                                    },
                                                                    "uri": "${instanceURL}/sobjects/S4SSiemens_Share__c/"
                                                                },
                                                                "runAfter": {},
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                "type": "Http"
                                                            }
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_3": {
                                                                    "inputs": {
                                                                        "body": "@removeproperty(json(string(item())),'Id')",
                                                                        "headers": {
                                                                            "Authorization": "Bearer @{body('Get_Token')}",
                                                                            "Content-Type": "application/json"
                                                                        },
                                                                        "method": "PATCH",
                                                                        "uri": "${instanceURL}/sobjects/S4SSiemens_Share__c/Id/@{items('For_each_proximity_opp')?['Id']}"
                                                                    },
                                                                    "runAfter": {},
                                                                     "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                    "type": "Http"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "or": [
                                                                {
                                                                    "equals": [
                                                                        "@item()?['Id']",
                                                                        "@null"
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@item()?['Id']",
                                                                        "@string('')"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {},
                                                        "type": "If"
                                                    },
                                                    "PO_Log": {
                                                        "inputs": {
                                                            "body": {
                                                                "message": "Proximity Opportunity  Response: @{base64(coalesce(outputs('Compose_Po_success_response'),outputs('Compose_Po_failed_response')))}",
                                                                "severity": "INFO"
                                                            },
                                                            "headers": {
                                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                                            },
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Compose_Po_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_Po_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                        "type": "Workflow"
                                                    }
                                                },
                                                "foreach": "@coalesce(triggerBody()?['Opportunity']?['ProximityOpportunity'], variables('EmptyArray'))",
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    },
                                    "Upsert_S4STranche": {
                                        "actions": {
                                            "For_each_S4STranche": {
                                                "actions": {
                                                    "Append_response_to_Array_variable_S4STranche": {
                                                        "inputs": {
                                                            "name": "S4STranche_response",
                                                            "value": "@coalesce(outputs('Compose_Tranche_success_response'),outputs('Compose_Tranche_failed_response'))"
                                                        },
                                                        "runAfter": {
                                                            "Compose_Tranche_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_Tranche_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "type": "AppendToArrayVariable"
                                                    },
                                                    "Compose_Tranche_failed_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "",
                                                                "Message": "@{coalesce(outputs('Create_record_6')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_6')?['Body']?[0]?['message'])}",
                                                                "Status": "Failure",
                                                                "created": ""
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_6": [
                                                                "Failed",
                                                                "Skipped",
                                                                "TimedOut"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Compose_Tranche_success_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "@{coalesce(outputs('Create_record_6')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_6')?['Body']?['id'])}",
                                                                "Message": "@{items('For_each_s4sTranche')?['S4STranche__c']?['externalId']} Tranche External ID successfully upserted",
                                                                "Status": "True",
                                                                "created": "@{if(equals(item()?['S4STranche__c']?['Id'],null),'true','false')}"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_6": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                          "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Condition_6": {
                                                        "actions": {
                                                            "Create_record_6": {
                                                                "inputs": {
                                                                    "body": "@removeProperty(setProperty(json(string(item()?['S4STranche__c'])),'S4SRelated_Opportunity__c',coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id']), 'externalId')",
                                                                    "headers": {
                                                                        "Authorization": "Bearer @{body('Get_Token')}",
                                                                        "Content-Type": "application/json"
                                                                    },
                                                                    "method": "POST",
                                                                    "retryPolicy": {
                                                                        "count": 1,
                                                                        "interval": "PT10S",
                                                                        "type": "exponential"
                                                                    },
                                                                    "uri": "${instanceURL}/sobjects/S4STranche__c/"
                                                                },
                                                                "runAfter": {},
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                "type": "Http"
                                                            }
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_6": {
                                                                    "inputs": {
                                                                        "body": "@removeProperty(removeproperty(json(string(item()?['S4STranche__c'])),'Id'), 'externalId')",
                                                                        "headers": {
                                                                            "Authorization": "Bearer @{body('Get_Token')}",
                                                                            "Content-Type": "application/json"
                                                                        },
                                                                        "method": "PATCH",
                                                                         "uri": "${instanceURL}/sobjects/S4STranche__c/Id/@{item()?['S4STranche__c']?['Id']}"
                                                                    },
                                                                    "runAfter": {},
                                                                     "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                    "type": "Http"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "or": [
                                                                {
                                                                    "equals": [
                                                                        "@items('For_each_S4STranche')?['S4STranche__c']?['Id']",
                                                                        "@null"
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@items('For_each_S4STranche')?['S4STranche__c']?['Id']",
                                                                        "@string('')"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {},
                                                        "type": "If"
                                                    },
                                                    "Tranche_Response_Log": {
                                                        "inputs": {
                                                            "body": {
                                                                "message": "TrancheResponse: @{base64(coalesce(outputs('Compose_Tranche_success_response'),outputs('Compose_Tranche_failed_response')))}",
                                                                "severity": "INFO"
                                                            },
                                                            "headers": {
                                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                                            },
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Compose_Tranche_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_Tranche_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                          "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                        "type": "Workflow"
                                                    }
                                                },
                                                "foreach": "@coalesce(triggerBody()?['Opportunity']?['S4STranche'], variables('EmptyArray'))",
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    },
                                    "Upsert_opportunityLine": {
                                        "actions": {
                                            "For_each_opportunityLine": {
                                                "actions": {
                                                    "For_each_opportunityLineItem": {
                                                        "actions": {
                                                            "Append_response_to_Array_variable_oppLine": {
                                                                "inputs": {
                                                                    "name": "UpsertoppLine_response",
                                                                    "value": "@coalesce(outputs('Compose_oppLine_success_response'),outputs('Compose_oppLine_failed_response'))"
                                                                },
                                                                "runAfter": {
                                                                    "Compose_oppLine_failed_response": [
                                                                        "Succeeded",
                                                                        "Skipped",
                                                                        "Failed"
                                                                    ],
                                                                    "Compose_oppLine_success_response": [
                                                                        "Succeeded",
                                                                        "Skipped",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                "type": "AppendToArrayVariable"
                                                            },
                                                            "Compose_oppLine_failed_response": {
                                                                "inputs": {
                                                                    "SIE_SF4S_upsertResponse": {
                                                                        "Id": "",
                                                                        "Message": "@{coalesce(outputs('Create_record_5')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_5')?['Body']?[0]?['message'])}",
                                                                        "Status": "Failure",
                                                                        "created": ""
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "Condition_5": [
                                                                        "TimedOut",
                                                                        "Skipped",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                                "type": "Compose"
                                                            },
                                                            "Compose_oppLine_success_response": {
                                                                "inputs": {
                                                                    "SIE_SF4S_upsertResponse": {
                                                                        "Id": "@{coalesce(outputs('Create_record_5')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_5')?['Body']?['id'])}",
                                                                        "Message": "",
                                                                        "Status": "True",
                                                                        "created": "@{if(equals(item()?['Id'],null),'true','false')}"
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "Condition_5": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                                "type": "Compose"
                                                            },
                                                            "Condition_5": {
                                                                "actions": {
                                                                    "Create_record_5": {
                                                                        "inputs": {
                                                                            "body": "@setProperty(json(string(item())),'OpportunityId',coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id'])",
                                                                            "headers": {
                                                                                "Authorization": "Bearer @{body('Get_Token')}",
                                                                                "Content-Type": "application/json"
                                                                            },
                                                                            "method": "POST",
                                                                            "retryPolicy": {
                                                                            "count": 1,
                                                                            "interval": "PT10S",
                                                                            "type": "exponential"
                                                                            },                                                                            
                                                                            "uri": "${instanceURL}/sobjects/OpportunityLineItem/"
                                                                        },
                                                                        "runAfter": {},
                                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                        "type": "Http"
                                                                    }
                                                                },
                                                                "else": {
                                                                    "actions": {
                                                                        "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_5": {
                                                                            "inputs": {
                                                                                "body": "@removeproperty(json(string(item())),'Id')",
                                                                                "headers": {
                                                                                    "Authorization": "Bearer @{body('Get_Token')}",
                                                                                    "Content-Type": "application/json"
                                                                                },
                                                                                "method": "PATCH",
                                                                                "uri": "${instanceURL}/sobjects/OpportunityLineItem/Id/@{items('For_each_opportunityLine')?['Id']}"
                                                                            },
                                                                            "runAfter": {},
                                                                             "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                            "type": "Http"
                                                                        }
                                                                    }
                                                                },
                                                                "expression": {
                                                                    "or": [
                                                                        {
                                                                            "equals": [
                                                                                "@items('For_each_opportunityLineItem')?['Id']",
                                                                                "@null"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "equals": [
                                                                                "@items('For_each_opportunityLineItem')?['Id']",
                                                                                "@string('')"
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "runAfter": {},
                                                                "type": "If"
                                                            },
                                                            "OL_Log": {
                                                                "inputs": {
                                                                    "body": {
                                                                        "message": "Opportunity Lineitem Response:@{base64(coalesce(outputs('Compose_oppLine_success_response'),outputs('Compose_oppLine_failed_response')))}",
                                                                        "severity": "INFO"
                                                                    },
                                                                    "headers": {
                                                                        "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                                        "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                                        "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                                                    },
                                                                    "host": {
                                                                        "triggerName": "manual",
                                                                        "workflow": {
                                                                           "id": "[parameters('sf4sLog_logicApp_id')]"
                                                                        }
                                                                    }
                                                                },
                                                                "runAfter": {
                                                                    "Compose_oppLine_failed_response": [
                                                                        "Succeeded",
                                                                        "Skipped",
                                                                        "Failed"
                                                                    ],
                                                                    "Compose_oppLine_success_response": [
                                                                        "Succeeded",
                                                                        "Skipped",
                                                                        "Failed"
                                                                    ]
                                                                },
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                "type": "Workflow"
                                                            }
                                                        },
                                                        "foreach": "@items('For_each_opportunityLine')?['OpportunityLineItem']",
                                                        "runAfter": {},
                                                        "type": "Foreach"
                                                    }
                                                },
                                                "foreach": "@coalesce(triggerBody()?['Opportunity']?['opportunityLine'], variables('EmptyArray'))",
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    }
                                },
                                "runAfter": {
                                    "Delete_Involved_Accounts_and_Opp_Team_Members": [
                                        "Succeeded",
                                        "Failed",
                                        "Skipped"
                                    ]
                                },
                                "type": "Scope"
                            },
                            "Upsert_deleted_child_entities_": {
                                "actions": {
                                    "Upsert_Opp_Team_Members": {
                                        "actions": {
                                            "For_each_opp_Team_member": {
                                                "actions": {
                                                    "Append_response_to_Array_variable_oppTM": {
                                                        "inputs": {
                                                            "name": "opportunityTeamMember_response",
                                                            "value": "@coalesce(outputs('Compose_OppTM_success_response'),outputs('Compose_OppTM_failed_response'))"
                                                        },
                                                        "runAfter": {
                                                            "Compose_OppTM_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_OppTM_success_response": [
                                                                "Succeeded",
                                                                "Failed",
                                                                "Skipped"
                                                            ]
                                                        },
                                                        "type": "AppendToArrayVariable"
                                                    },
                                                    "Check_User_Id": {
                                                        "actions": {
                                                            "Retrieve_User_SieSales_Id": {
                                                                "inputs": {
                                                                    "headers": {
                                                                        "Authorization": "Bearer @{body('Get_Token')}"
                                                                    },
                                                                    "method": "GET",
                                                                    "uri": "${instanceURL}/query/?q=SELECT+Id+FROM+User +WHERE+S4SGID_Technical__c +=+'@{items('For_each_opp_Team_member')?['OpportunityTeamMember']?['UserId']}'"
                                                                },
                                                                "runAfter": {},
                                                                "type": "Http"
                                                            },
                                                            "Update_User_Id": {
                                                                "inputs": "@setProperty(json(string(item()['OpportunityTeamMember'])),'UserId',coalesce(body('Retrieve_User_SieSales_Id')?['records'][0]?['Id'], items('For_each_opp_Team_member')?['OpportunityTeamMember']?['UserId']))",
                                                                "runAfter": {
                                                                    "Retrieve_User_SieSales_Id": [
                                                                        "Succeeded"
                                                                    ]
                                                                },
                                                                "type": "Compose"
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "less": [
                                                                        "@length(items('For_each_opp_Team_member')?['OpportunityTeamMember']?['UserId'])",
                                                                        12
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {},
                                                        "type": "If"
                                                    },
                                                    "Compose_OppTM_failed_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "",
                                                                "Message": "UserID:@{items('For_each_opp_Team_member')?['OpportunityTeamMember']?['UserId']},@{coalesce(outputs('Create_record_2')?['Body']?[0]?['message'],body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_2')?['Body']?[0]?['message'])}",
                                                                "Status": "Failure",
                                                                "created": "false"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_2": [
                                                                "Failed"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Compose_OppTM_success_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "@{coalesce(outputs('Create_record_2')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_2')?['Body']?['id'])}",
                                                                "Message": "UserID:@{items('For_each_opp_Team_member')?['OpportunityTeamMember']?['UserId']}",
                                                                "Status": "True",
                                                                "created": "@{if(equals(items('For_each_opp_Team_member')?['OpportunityTeamMember']?['Id'],null),'true','false')}"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_2": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Condition_2": {
                                                        "actions": {
                                                            "Create_record_2": {
                                                                "inputs": {
                                                                    "body": "@setProperty(coalesce(outputs('Update_User_Id'),json(string(item()['OpportunityTeamMember']))),'OpportunityId',coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id'])",
                                                                    "headers": {
                                                                        "Authorization": "Bearer @{body('Get_Token')}",
                                                                        "Content-Type": "application/json"
                                                                    },
                                                                    "method": "POST",
                                                                    "retryPolicy": {
                                                                        "count": 1,
                                                                        "interval": "PT10S",
                                                                        "type": "exponential"
                                                                    },
                                                                     "uri": "${instanceURL}/sobjects/OpportunityTeamMember/"
                                                                },
                                                                "runAfter": {},
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                "type": "Http"
                                                            }
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_2": {
                                                                    "inputs": {
                                                                        "body": "@removeproperty(coalesce(outputs('Update_User_Id'),json(string(item()['OpportunityTeamMember']))),'Id')",
                                                                        "headers": {
                                                                            "Authorization": "Bearer @{body('Get_Token')}",
                                                                            "Content-Type": "application/json"
                                                                        },
                                                                        "method": "PATCH",
                                                                        "uri": "${instanceURL}/sobjects/OpportunityTeamMember/Id/@{items('For_each_opp_Team_member')?['OpportunityTeamMember']?['Id']}"
                                                                    },
                                                                    "runAfter": {},
                                                                     "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                    "type": "Http"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "or": [
                                                                {
                                                                    "equals": [
                                                                        "@items('For_each_opp_Team_member')?['Id']",
                                                                        "@null"
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@items('For_each_opp_Team_member')?['Id']",
                                                                        "@string('')"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {
                                                            "Check_User_Id": [
                                                                "Succeeded",
                                                                "Failed",
                                                                "Skipped"
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "OTM_Log": {
                                                        "inputs": {
                                                            "body": {
                                                                "message": "OpportunityTeamMember Response:@{base64(coalesce(outputs('Compose_OppTM_success_response'),outputs('Compose_OppTM_failed_response')))}",
                                                                "severity": "INFO"
                                                            },
                                                            "headers": {
                                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                                            },
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Compose_OppTM_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_OppTM_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                        "type": "Workflow"
                                                    }
                                                },
                                                "foreach": "@coalesce(triggerBody()?['Opportunity']?['opportunityTeamMember'], variables('EmptyArray'))",
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    },
                                    "Upsert_involvedAccounts": {
                                        "actions": {
                                            "For_each_involvedAccounts": {
                                                "actions": {
                                                    "Append_to_array_variable_Inv_Acc_Response": {
                                                        "inputs": {
                                                            "name": "UpsertInvolvedAccounts_response",
                                                            "value": "@coalesce(outputs('Compose_InvAcc_success_response'),outputs('Compose_InvAcc_failed_response'))"
                                                        },
                                                        "runAfter": {
                                                            "Compose_InvAcc_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_InvAcc_success_response": [
                                                                "Succeeded",
                                                                "Failed",
                                                                "Skipped"
                                                            ]
                                                        },
                                                        "type": "AppendToArrayVariable"
                                                    },
                                                    "Compose_InvAcc_failed_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "",
                                                                "Message": "@{coalesce(outputs('Create_record_7')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_7')?['Body']?[0]?['message'])}",
                                                                "Status": "Failure",
                                                                "created": ""
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_7": [
                                                                "Failed"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Compose_InvAcc_success_response": {
                                                        "inputs": {
                                                            "SIE_SF4S_upsertResponse": {
                                                                "Id": "@{coalesce(outputs('Create_record_7')?['Body']?['id'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_7')?['Body']?['id'])}",
                                                                "Message": "",
                                                                "Status": "True",
                                                                "created": "@{if(equals(item()?['Id'],null),'true','false')}"
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Condition_7": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs"
         ]      
      }
  },
                                                        "type": "Compose"
                                                    },
                                                    "Condition_7": {
                                                        "actions": {
                                                            "Create_record_7": {
                                                                "inputs": {
                                                                    "body": "@setProperty(json(string(item())),'S4SOpportunity__c',coalesce(body('Create_record'), body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)'))?['Id'])",
                                                                    "headers": {
                                                                        "Authorization": "Bearer @{body('Get_Token')}",
                                                                        "Content-Type": "application/json"
                                                                    },
                                                                    "method": "POST",
                                                                    "retryPolicy": {
                                                                        "count": 1,
                                                                        "interval": "PT10S",
                                                                        "type": "exponential"
                                                                    },
                                                                    "uri": "${instanceURL}/sobjects/S4SInvolved_Accounts__c/"
                                                                },
                                                                "runAfter": {},
                                                                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                "type": "Http"
                                                            }
                                                        },
                                                        "else": {
                                                            "actions": {
                                                                "Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)_7": {
                                                                    "inputs": {
                                                                        "body": "@removeproperty(json(string(item())),'Id')",
                                                                        "headers": {
                                                                            "Authorization": "Bearer @{body('Get_Token')}",
                                                                            "Content-Type": "application/json"
                                                                        },
                                                                        "method": "PATCH",
                                                                        "uri": "${instanceURL}/sobjects/S4SInvolved_Accounts__c/Id/@{items('For_each_involvedAccounts')?['Id']}"
                                                                    },
                                                                    "runAfter": {},
                                                                     "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                                    "type": "Http"
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "or": [
                                                                {
                                                                    "equals": [
                                                                        "@item()?['Id']",
                                                                        "@null"
                                                                    ]
                                                                },
                                                                {
                                                                    "equals": [
                                                                        "@item()?['Id']",
                                                                        "@string('')"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "runAfter": {},
                                                        "type": "If"
                                                    },
                                                    "IA_Log": {
                                                        "inputs": {
                                                            "body": {
                                                                "message": "Involved Account Response: @{base64(coalesce(outputs('Compose_InvAcc_success_response'),outputs('Compose_InvAcc_failed_response')))}",
                                                                "severity": "INFO"
                                                            },
                                                            "headers": {
                                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                                            },
                                                            "host": {
                                                                "triggerName": "manual",
                                                                "workflow": {
                                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Compose_InvAcc_failed_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ],
                                                            "Compose_InvAcc_success_response": [
                                                                "Succeeded",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                                        "type": "Workflow"
                                                    }
                                                },
                                                "foreach": "@coalesce(triggerBody()?['Opportunity']?['involvedAccounts'], variables('EmptyArray'))",
                                                "runAfter": {},
                                                "type": "Foreach"
                                            }
                                        },
                                        "runAfter": {},
                                        "type": "Scope"
                                    }
                                },
                                "runAfter": {
                                    "Upsert_child_entities": [
                                        "Succeeded",
                                        "Failed",
                                        "Skipped"
                                    ]
                                },
                                "type": "Scope"
                            }
                        },
                        "else": {
                            "actions": {
                                "Failure_Oportunity_Log": {
                                    "inputs": {
                                        "body": {
                                            "message": "Opportunity with Id '@{outputs('UpsertOppJSONConvert')?['Body']?['Id']}' could not be created/updated. Error: '@{coalesce(outputs('Create_record')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['Body']?[0]?['message'])}'",
                                            "severity": "INFO"
                                        },
                                        "headers": {
                                            "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                            "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                            "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                        },
                                        "host": {
                                            "triggerName": "manual",
                                            "workflow": {
                                               "id": "[parameters('sf4sLog_logicApp_id')]"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Workflow"
                                },
                                "Set_variable_UpsertOpp_response_failure": {
                                    "inputs": {
                                        "name": "UpsertOpp_response",
                                        "value": "{\n      \"SIE_SF4S_upsertResponse\": {       \n \"Id\": \"\", \n  \"created\": \"\",\n        \"Status\": \"Failure\",\n        \"Message\": \"@{replace(string(coalesce(outputs('Create_record')?['Body']?[0]?['message'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['Body']?[0]?['message'])),'\\','')}\"\n   }    \n }"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            }
                        },
                        "expression": {
                            "or": [
                                {
                                    "equals": [
                                        "@coalesce(outputs('Create_record')?['statusCode'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['statusCode'])",
                                        200
                                    ]
                                },
                                {
                                    "equals": [
                                        "@coalesce(outputs('Create_record')?['statusCode'],outputs('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['statusCode'])",
                                        201
                                    ]
                                }
                            ]
                        },
                        "runAfter": {
                            "Condition": [
                                "Succeeded",
                                "Failed"
                            ]
                        },
                        "type": "If"
                    },
                    "UpsertOppJSONConvert": {
                        "inputs": {
                            "body": "@json(replace(string(triggerBody()?['Opportunity']),'&amp;','&'))",
                        	"authentication": {
								"type": "Raw",
								"value": "[parameters('functionAppKey')]"
							},
							"function": {
                                      "id": "[concat(parameters('funcApp'), '/functions/UpsertOppJSONConvert')]"
                            }
                        },
                        "runAfter": {},
                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                        "type": "Function"
                    },
                    "Upsert_Quote": {
                        "actions": {
                            "Condition_8": {
                                "actions": {
                                    "Quote_Log": {
                                        "inputs": {
                                            "body": {
                                                "message": "QuoteResponse:@{base64(body('subLogic-Quote_Upsert'))}",
                                                "severity": "INFO"
                                            },
                                            "headers": {
                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                            },
                                            "host": {
                                                "triggerName": "manual",
                                                "workflow": {
                                                   "id": "[parameters('sf4sLog_logicApp_id')]"
                                                }
                                            }
                                        },
                                        "runAfter": {
                                            "subLogic-Quote_Upsert": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Workflow"
                                    },
                                    "Set_variable_Quote_final_response": {
                                        "inputs": {
                                            "name": "UpsertQuoteFinalResponse",
                                            "value": "@body('subLogic-Quote_Upsert')"
                                        },
                                        "runAfter": {
                                            "subLogic-Quote_Upsert": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "SetVariable"
                                    },
                                    "subLogic-Quote_Upsert": {
                                        "inputs": {
                                            "body": "@triggerBody()",
                                            "headers": {
                                                "OppId": "@{coalesce(body('Create_record')?['id'],body('Insert_or_Update_(Upsert)_a_Record_by_External_ID_(V2)')?['id'])}",
                                                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                                                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                                                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                                            },
                                            "host": {
                                                "triggerName": "manual",
                                                "workflow": {
                                                    "id": "[parameters('sf4sQuoteUpsert_logicApp_id')]"                                    
                                                }
                                            }
                                        },
                                        "runAfter": {},
                                         "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                                        "type": "Workflow"
                                    }
                                },
                                "expression": {
                                    "and": [
                                        {
                                            "not": {
                                                "equals": [
                                                    "@triggerBody()?['Opportunity']?['quote']",
                                                    "@null"
                                                ]
                                            }
                                        },
                                        {
                                            "not": {
                                                "equals": [
                                                    "@triggerBody()?['Opportunity']?['quote']",
                                                    ""
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "runAfter": {},
                                "type": "If"
                            }
                        },
                        "runAfter": {
                            "Condition": [
                                "Succeeded"
                            ]
                        },
                        "type": "Scope"
                    }
                },
                "runAfter": {
                    "Get_Token": [
                        "Succeeded"
                    ]
                },
                "trackedProperties": {
                    "apimRouting": "external",
                    "citizenName": "c00031",
                    "correlationId": "not-defined",
                    "interfaceName": "SFS",
                    "interfacePartner": "not-defined",
                    "interfaceVersion": "not-defined",
                    "operationName": "upsertOppObject",
                    "parentWorkflow": "not-defined"
                },
                "type": "Scope"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {},
        "triggers": {
            "manual": {
                "inputs": {
                    "schema": {}
                },
                "kind": "Http",
                 "runtimeConfiguration": {
       "secureData": {
          "properties": [
              "inputs",
              "outputs"
         ]      
      }
  },
                "type": "Request"
            }
        }    
}