{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "Initialize_Array_for_whereClauses": {
            "inputs": {
                "variables": [
                    {
                        "name": "whereClauses",
                        "type": "array"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_Count_variable": {
            "inputs": {
                "variables": [
                    {
                        "name": "Count",
                        "type": "integer",
                        "value": 1
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_S4SRelevant_Objects__c": {
            "inputs": {
                "variables": [
                    {
                        "name": "S4SRelevant_Objects__c",
                        "type": "string",
                        "value": "Opportunity"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable": {
            "inputs": {
                "variables": [
                    {
                        "name": "inputRequest",
                        "type": "string",
                        "value": "@{replace(string(triggerBody()),'&','&amp;')}"
                    }
                ]
            },
            "runAfter": {
                "Initialize_variable_fetchAttributeSettingsQuery": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Initialize_variable_fetchAttributeSettingsQuery": {
            "inputs": {
                "variables": [
                    {
                        "name": "fetchAttributeSettingsQuery",
                        "type": "string",
                        "value": "SELECT Id,OwnerId,IsDeleted,Name,CurrencyIsoCode,CreatedById,LastModifiedById,S4SATTRIBUTE_SETTING_LegacyID__c,S4SActive__c,S4SAttribute_Assignments__c,S4SBusiness_Unit__c,S4SCategory__c,S4SDescription__c,S4SDivision__c,S4SFormat__c,S4SLead_Country__c,S4SName__c,S4SRelevant_Objects__c,S4SSale_Country__c,S4SSet__c,S4SUnique_Field__c,S4SValue__c,S4SAssignment_visibility_only_for__c,S4SUserId__c FROM S4SAttribute_Setting__c  "
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_for_whereClause": {
            "inputs": {
                "variables": [
                    {
                        "name": "whereClause",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_for_where_condition": {
            "inputs": {
                "variables": [
                    {
                        "name": "where",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_soapErrorResponse": {
            "inputs": {
                "variables": [
                    {
                        "name": "SoapErrorResponse",
                        "type": "String",
                        "value": "<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap-env:Header/><soap-env:Body><soap-env:Fault><faultcode>soap-env:Server</faultcode><faultstring>{errormessagedetails}</faultstring><detail/></soap-env:Fault></soap-env:Body></soap-env:Envelope>"
                    }
                ]
            },
            "runAfter": {
                "Initialize_S4SRelevant_Objects__c": [
                    "Succeeded"
                ]
            },
            "type": "InitializeVariable"
        },
        "Scope-Catch": {
            "actions": {
                "Error_Response": {
                    "inputs": {
                        "body": "@replace(variables('SoapErrorResponse'),'{errormessagedetails}',concat('Some error occurred while connection. Please find more details using tracking id : ', workflow()['run']['name']))",
                        "headers": {
                            "Content-Type": "text/xml"
                        },
                        "statusCode": 500
                    },
                    "kind": "Http",
                    "runAfter": {},
                    "type": "Response"
                },
                "Terminate": {
                    "inputs": {
                        "runStatus": "Failed"
                    },
                    "runAfter": {
                        "Error_Response": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                }
            },
            "runAfter": {
                "Scope-Try": [
                    "Failed",
                    "Skipped",
                    "TimedOut"
                ]
            },
            "type": "Scope"
        },
        "Scope-Try": {
            "actions": {
                "Condition_to_check_ATTRBUSINESSUNITCODE": {
                    "actions": {
                        "Add_ATTRBUCODE_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRBUSINESSUNITCODE": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRBUSINESSUNITCODE": {
                            "inputs": {
                                "name": "where",
                                "value": " S4SBusiness_Unit__c='@{xpath(xml(variables('inputRequest')),'.//ATTR_BUSINESS_UNIT_CODE/text()')?[0]}'"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_BUSINESS_UNIT_CODE/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_BUSINESS_UNIT_CODE/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRTERRITORYCLUSTER": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Condition_to_check_ATTRCATEGORY": {
                    "actions": {
                        "Add_ATTRCATEGORY_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRCATEGORY": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRCATEGORY": {
                            "inputs": {
                                "name": "where",
                                "value": " S4SCategory__c= '@{xpath(xml(variables('inputRequest')),'.//ATTR_CATEGORY/text()')?[0]}'"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_CATEGORY/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_CATEGORY/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRSET": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Condition_to_check_ATTRDIVISION": {
                    "actions": {
                        "Add_ATTRDIVISION_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRDIVISION": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRDIVISION": {
                            "inputs": {
                                "name": "where",
                                "value": " s4sdivision__c includes ('@{xpath(xml(variables('inputRequest')),'.//ATTR_DIVISION/text()')?[0]}')"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_DIVISION/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_DIVISION/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRNAME": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Condition_to_check_ATTRNAME": {
                    "actions": {
                        "Add_ATTRNAME_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRNAME": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRNAME": {
                            "inputs": {
                                "name": "where",
                                "value": " S4SName__c='@{xpath(xml(variables('inputRequest')),'.//ATTR_NAME/text()')?[0]}'"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_NAME/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_NAME/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRCATEGORY": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Condition_to_check_ATTRREGION": {
                    "actions": {
                        "Add_ATTRREGION_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRREGION": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRREGION": {
                            "inputs": {
                                "name": "where",
                                "value": " S4SSale_Country__c='@{xpath(xml(variables('inputRequest')),'.//ATTR_REGION/text()')?[0]}'"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_REGION/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_REGION/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {},
                    "type": "If"
                },
                "Condition_to_check_ATTRSET": {
                    "actions": {
                        "Add_ATTRSET_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRSET": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRSET": {
                            "inputs": {
                                "name": "where",
                                "value": " S4SSet__c='@{xpath(xml(variables('inputRequest')),'.//ATTR_SET/text()')?[0]}'"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_SET/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_SET/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRREGION": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Condition_to_check_ATTRTERRITORYCLUSTER": {
                    "actions": {
                        "Add_ATTRTRCLUSTER_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTRTERRITORYCLUSTER": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTRTERRITORYCLUSTER": {
                            "inputs": {
                                "name": "where",
                                "value": " S4SLead_Country__c='@{xpath(xml(variables('inputRequest')),'.//ATTR_TERRITORY_CLUSTER/text()')?[0]}'"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_TERRITORY_CLUSTER/text()')?[0]",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@xpath(xml(variables('inputRequest')),'.//ATTR_TERRITORY_CLUSTER/text()')?[0]",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRDIVISION": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Condition_to_check_S4SRelavantObject": {
                    "actions": {
                        "Add_ATTROBJ_where_clause_to_whereClauses_Array": {
                            "inputs": {
                                "name": "whereClauses",
                                "value": "@variables('where')"
                            },
                            "runAfter": {
                                "Set_where_condition_for_ATTROBJECT": [
                                    "Succeeded"
                                ]
                            },
                            "type": "AppendToArrayVariable"
                        },
                        "Set_where_condition_for_ATTROBJECT": {
                            "inputs": {
                                "name": "where",
                                "value": "S4SRelevant_Objects__c includes ('@{variables('S4SRelevant_Objects__c')}')"
                            },
                            "runAfter": {},
                            "type": "SetVariable"
                        }
                    },
                    "expression": {
                        "and": [
                            {
                                "not": {
                                    "equals": [
                                        "@variables('S4SRelevant_Objects__c')",
                                        "@null"
                                    ]
                                }
                            },
                            {
                                "not": {
                                    "equals": [
                                        "@variables('S4SRelevant_Objects__c')",
                                        ""
                                    ]
                                }
                            }
                        ]
                    },
                    "runAfter": {
                        "Condition_to_check_ATTRBUSINESSUNITCODE": [
                            "Succeeded"
                        ]
                    },
                    "type": "If"
                },
                "Execute_a_SOQL_query_fetchAttributeSettings": {
                    "inputs": {
                        "body": {
                            "query": "@{variables('fetchAttributeSettingsQuery')}where @{variables('whereClause')}"
                        },
                        "host": {
                            "connection": {
                                "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                            }
                        },
                        "method": "post",
                        "path": "/soql/executesoqlquery"
                    },
                    "runAfter": {
                        "formation_of_final_where_clause": [
                            "Succeeded"
                        ]
                    },
                    "type": "ApiConnection"
                },
                "Response": {
                    "inputs": {
                        "body": "@body('Execute_a_SOQL_query_fetchAttributeSettings')",
                        "statusCode": 200
                    },
                    "kind": "Http",
                    "runAfter": {
                        "Execute_a_SOQL_query_fetchAttributeSettings": [
                            "Succeeded"
                        ]
                    },
                    "type": "Response"
                },
                "formation_of_final_where_clause": {
                    "inputs": {
                        "name": "whereClause",
                        "value": "@{if(greater(length(variables('whereClauses')),0),replace(concat(join(variables('whereClauses'),' and ')),'*','%'),string(''))}"
                    },
                    "runAfter": {
                        "Condition_to_check_S4SRelavantObject": [
                            "Succeeded"
                        ]
                    },
                    "type": "SetVariable"
                }
            },
            "runAfter": {
                "Initialize_Array_for_whereClauses": [
                    "Succeeded"
                ],
                "Initialize_Count_variable": [
                    "Succeeded"
                ],
                "Initialize_variable": [
                    "Succeeded"
                ],
                "Initialize_variable_for_whereClause": [
                    "Succeeded"
                ],
                "Initialize_variable_for_where_condition": [
                    "Succeeded"
                ],
                "Initialize_variable_soapErrorResponse": [
                    "Succeeded"
                ]
            },
            "trackedProperties": {
                "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'not-defined')}",
                "citizenName": "c00031",
                "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'CNSF')}",
                "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
                "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
                "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'internal_fetchAttributeSettings')}",
                "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
                "clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
                "clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
            },
            "type": "Scope"
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
        "$connections": {
            "defaultValue": {},
            "type": "Object"
        }
    },
    "triggers": {
        "manual": {
            "inputs": {
                "schema": {}
            },
            "kind": "Http",
            "type": "Request"
        }
    }
}