{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "GetConfiguration": {
            "inputs": {
                "body": {
                    "key": "obm-config"
                },
                "host": {
                    "triggerName": "manual",
                    "workflow": {
                        "id": "${getConfiguration_logicAppId}"
                    }
                }
            },
            "runAfter": {},
            "runtimeConfiguration": {
                "secureData": {
                    "properties": [
                        "outputs"
                    ]
                }
            },
            "type": "Workflow"
        },
        "Initialize_variable_'varOpportunityId'": {
            "inputs": {
                "variables": [
                    {
                        "name": "OpportunityId",
                        "type": "string",
                        "value": "@{trim(xpath(xml(triggerBody()),'string(/*[local-name()=\"Envelope\"]/*[local-name()=\"Body\"]/*[local-name()=\"notifications\"]/*[local-name()=\"Notification\"]/*[local-name()=\"sObject\"]/*[local-name()=\"Id\"])'))}"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_'varResponse'": {
            "inputs": {
                "variables": [
                    {
                        "name": "Response",
                        "type": "string",
                        "value": "<soapenv:Envelope \nxmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>##RESULT##</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_EndAccount_SAP_Number": {
            "inputs": {
                "variables": [
                    {
                        "name": "EndAccount_SAP_Number",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_acknowledgment": {
            "inputs": {
                "variables": [
                    {
                        "name": "acknowledgment",
                        "type": "string",
                        "value": "true"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_bomId": {
            "inputs": {
                "variables": [
                    {
                        "name": "bomId",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_flag": {
            "inputs": {
                "variables": [
                    {
                        "name": "flag",
                        "type": "string"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_lastSyncDate": {
            "inputs": {
                "variables": [
                    {
                        "name": "lastSyncDate",
                        "type": "string",
                        "value": "@{trim(xpath(xml(triggerBody()),'string(/*[local-name()=\"Envelope\"]/*[local-name()=\"Body\"]/*[local-name()=\"notifications\"]/*[local-name()=\"Notification\"]/*[local-name()=\"sObject\"]/*[local-name()=\"S4SLast_Sync_with_COMPAS__c\"])'))}"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initialize_variable_token": {
            "inputs": {
                "variables": [
                    {
                        "name": "token",
                        "type": "string",
                        "value": "false"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initializevariable-varSOQLOpportunity": {
            "inputs": {
                "variables": [
                    {
                        "name": "varSOQLOpportunity",
                        "type": "string",
                        "value": "SELECT Id,IsDeleted,AccountId,RecordTypeId,IsPrivate,Name,Description,StageName,Amount,Probability,ExpectedRevenue,TotalOpportunityQuantity,CloseDate,Type,NextStep,LeadSource,IsClosed,IsWon,ForecastCategory,ForecastCategoryName,CurrencyIsoCode,CampaignId,HasOpportunityLineItem,Pricebook2Id,OwnerId,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastActivityDate,S4SSold_To_SAP__c,FiscalQuarter,FiscalYear,Fiscal,LastViewedDate,LastReferencedDate,SyncedQuoteId,ContractId,HasOpenActivity,HasOverdueTask,Budget_Confirmed__c,Discovery_Completed__c,ROI_Analysis_Completed__c,Loss_Reason__c,S4SAcceptance_Closure__c,S4SAccount_Industry__c,S4SAlternative_Opportunity__c,S4SAmount_Financed__c,S4SAssigned_parental_Opportunity__c,S4SB2A_Outcome__c,S4SB2A_type__c,S4SBid_approval_PM040__c,S4SBooking_Funding_Date__c,S4SBusiness_Model_ZRG__c,S4SBusiness_Unit__c,S4SCAPEX__c,S4SChance_of_Execution__c,S4SChance_of_Success__c,S4SCity__c,S4SClosing_Date__c,S4SCommission_Country_1__c,S4SCommission_Country_2__c,S4SCommission_Country_3__c,S4SCommission_Country_4__c,S4SCommission_Percentage_1__c,S4SCommission_Percentage_2__c,S4SCommission_Percentage_3__c,S4SCommission_Percentage_4__c,S4SCompetitors__c,S4SContract_Duration_Month__c,S4SCorp_Lead_Country__c,S4SCountry_of_Installation__c,S4SCreated_from_Lead__c,S4SCross_Border_International_Business__c,S4SCustomer_Agreement_for_Data_Transfer__c,S4SCustomer_Rate__c,S4SDiscussion_in_PEF_Deal_Flow_Call__c,S4SDist_Channel__c,S4SDistribution_channel__c,S4SDivision__c,S4SEUR_Exchange_Rate__c,S4SEnd_Account_Account__c,S4SEnd_Account_Industry__c,S4SEnd_Account__c,S4SExpiry_Date_Risk_Approval__c,S4SField_of_Activity__c,S4SFinance_Product_Label__c,S4SFinancing_Demand_Division__c,S4SFinancing_Need__c,S4SFinancing_Product__c,S4SFunding_limit__c,S4SGross_Margin__c,S4SHas_Children__c,S4SIBIT__c,S4SInitial_Purchase_Price__c,S4SInstallation__c,S4SInternal_Interest_Rate__c,S4SIntroducer_Sales__c,S4SInvesting_ARE__c,S4SInvolded_Siemens_Entities__c,S4SInvolved_Competence_Center__c,S4SMain_Reason__c,S4SMarked_for_Deletion__c,S4SOPEX__c,S4SOPPORTUNITY_LegacyID__c,S4SOffer_Reference_ID__c,S4SOpportunity_Industry_Search__c,S4SOpportunity_Industry__c,S4SOpportunity_Type__c,S4SOrder_Intake_EUR__c,S4SOrder_Intake_USD__c,DB_Competitor__c,S4SOverdue_Time__c,S4SOwn_Content_Own_BU_Products__c,S4SOwn_Content_Own_DIV_Products__c,S4SOwn_Content_Own_DIV_Services__c,S4SOwn_Content_Siemens_Products_Services__c,S4SPEF_Advisory_Scope__c,S4SPM040_Released_Gross_Margin__c,S4SPM040_Released_Profit_EBIT__c,S4SPM040_Released_Risk_Contigency__c,S4SPM040_Released_Volume__c,S4SPM040_Transfer_date__c,S4SPM070_Transfer_Date__c,S4SPM070_Won_lost_Gross_Margin__c,S4SPM070_Won_lost_Profit_EBIT__c,S4SPM070_Won_lost_Risk_Contigency__c,S4SPM070_Won_lost_Volume__c,S4SAccount_Name_International__c,S4SPotential_Siemens_Volume__c,S4SPrevious_Stage__c,S4SPrevious_Status__c,S4SPrevious_System_Unique_ID__c,S4SPrimary_BookingItemID__c,S4SPrimary_CompetitorID__c,S4SProposed_to_COF__c,S4SProposed_to_Debt__c,S4SProposed_to_Equity__c,S4SROE__c,S4SReason_not_won__c,S4SReference_ID__c,S4SRelevant_for_Forecast__c,S4SSFS_Account_Rating_Date__c,S4SSFS_Account_Rating_Type__c,S4SSFS_Account_Rating__c,S4SSFS_Confidential__c,S4SSFS_Opportunity_Rating_Date__c,S4SSFS_Opportunity_Rating_Type__c,S4SSFS_Opportunity_Rating__c,S4SSOC_Category__c,S4SSale_Country__c,S4SSales_Branch__c,S4SSales_Department__c,S4SSales_District__c,S4SSales_Office__c,S4SSales_Status__c,S4SSales_Subregion__c,S4SSales_Territory__c,S4SSales_Type__c,S4SSalesforce_ID__c,S4SSenior_Leverage__c,S4SSite__c,S4SSolution_Support_End_Date__c,S4SSource__c,S4SSpread__c,S4SStart_project_PM080__c,S4SStatus_since__c,S4SStrategic_Priority__c,S4STarget_IRR__c,S4STerritory_Structure__c,S4STerritory__c,S4SThereof_SPV_SFS_Inc__c,S4STimestamp_to_COF__c,S4STimestamp_to_Debt__c,S4STimestamp_to_Equity__c,S4STotal_Debt_of_Opportunity__c,S4STotal_Equity_incl_Shareholder_Loans__c,S4STotal_Investment__c,S4STotal_Leverage__c,S4STotal_OI_Recurring_Business__c,S4STotal_Product_Amount_EUR__c,S4STotal_Product_Amount_USD__c,S4STotal_Project_Value__c,S4SType_of_Transaction__c,S4SUSD_Exchange_Rate__c,S4SWeighted_Order_Intake_EUR__c,S4SWeighted_Order_Intake_USD__c,S4SWeighted_Order_Intake__c,S4SWinner__c,S4SZip_Code__c,S4SBooking_Line_Item_Count__c,S4SCompetitorCount__c,S4SOrder_Intake__c,S4SPrimaryCompetitorCount__c,S4SPrimaryLineItemCount__c,S4STotal_SFS_Amount_to_fund_at_close__c,S4STotal_of_All_Tranches__c,S4STotal_of_Allocated_Amount__c,S4STotal_of_Approved_Amount__c,S4STotal_of_Requested_Amount__c,S4SAsset_Group__c,S4SAsset_Type__c,S4SBuy_America_n__c,S4SCOF_Country__c,S4SCategorization__c,S4SConfidentiality_Status__c,S4SContract_Schedule__c,S4SContract__c,S4SContractual_Insurance_requirements__c,S4SGovernmental_Agency__c,S4SGovernmental_Entity_Government_Funded__c,S4SInsurance_Database_ID__c,S4SIntroducer_Account_Name__c,S4SLOA_ID_Number__c,S4SOpportunity_Amount_EUR__c,S4SOpportunity_Amount_USD__c,S4SOur_Role__c,S4SPlanning_Tool__c,S4SProject_Volume__c,S4SRate_Spread__c,S4SSAP_Number__c,S4SSFS_Equity_Share__c,S4SSiemens_Equity__c,S4SWeighted_Total_Product_Amount_EUR__c,S4SWeighted_Total_Product_Amount_USD__c,S4SWeighted_Total_Product_Amount__c,S4SAdvisory_Volume__c,S4S_Total_SFS_Amount_Rollup__c,S4SApproval_Check__c,S4SApproval_Pending__c,S4SCreate_COMPAS_Quote__c,S4SExternal_Source__c,S4SLast_Sync_with_COMPAS__c,S4SOrder_Intake_Opportunity_Amount__c,S4SOriginal_Project_Solution_Opportunity__c,S4SProject_Category__c,S4SSystem_Installation_Type__c,S4SUserId__c,S4SWeighted_Opportunity_Amount__c,S4SWeighted_Order_Intake_Opp_Amount__c,S4SFinance_Product_Type__c,S4SSupported_Siemens_Business_Unit__c,S4SBranch__c,S4SChannel__c,S4SSupported_Siemens_Company__c,S4SUnit__c,Account.Id,Account.Name,Account.Type,Account.S4SIfA__c,Owner.LastName,Owner.FirstName,Owner.Division,Owner.Email,Owner.UserRoleId,Owner.FederationIdentifier,Owner.S4SGID_Technical__c,Owner.S4SGID__c,S4SEnd_Account__r.Id,S4SEnd_Account__r.Name,S4SEnd_Account__r.Type,S4SEnd_Account__r.S4SIfA__c, S4SDefense_Priorities_Allocations_System__c FROM Opportunity"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initializevariable-varSOQLQuote": {
            "inputs": {
                "variables": [
                    {
                        "name": "varSOQLQuote",
                        "type": "string",
                        "value": "select Id, Name, Status, S4SMain_Offer__c,S4SOffer_Date__c,S4SOffer_Engineer__c,S4SOffer_ID__c,S4SSales_Margin__c,S4SSource_System__c,S4SValid_until__c,S4SVolume__c,S4SQUOTE_LegacyID__c,S4SExternal_Source__c from Quote"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initializevariable-varSOQLS4SBooking_Line_Item": {
            "inputs": {
                "variables": [
                    {
                        "name": "varSOQLS4SBooking_Line_Item",
                        "type": "string",
                        "value": "Select Id,IsDeleted,Name,CurrencyIsoCode,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastActivityDate,S4SOpportunity__c,S4SBusiness_Segment__c,S4SBusiness_Sub_Segment__c,S4SBusiness_Unit__c,S4SDepth_Structure__c,S4SDivisions__c,S4SGCK__c,S4SOrder_Intake_EUR__c,S4SOrder_Intake_USD__c,S4SOrder_Intake__c,S4SPrimary_Flag__c,S4SWeighted_Order_Intake_EUR__c,S4SWeighted_Order_Intake_USD__c,S4SWeighted_Order_Intake__c,S4SPCK__c,S4SQuantity__c,S4SSPG__c,S4SSales_Price__c,S4SExternal_Source__c,S4SProgram_Fund__c,S4SX1st_Year_return__c,S4SX2nd_Year_Return__c,X3rd_Year_Return__c From S4SBooking_Line_Item__c"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initializevariable-varSOQLS4SIdentification_Number": {
            "inputs": {
                "variables": [
                    {
                        "name": "varSOQLS4SIdentification_Number",
                        "type": "string",
                        "value": "Select S4SIdentification_Number__c from S4SIdentification_Number__c"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Initializevariable-varSOQLS4SSISIC": {
            "inputs": {
                "variables": [
                    {
                        "name": "varSOQLS4SSISIC",
                        "type": "string",
                        "value": "Select Id,Name,S4SIndustry_Description__c,S4SIndustry_Segment__c From S4SSISIC__c"
                    }
                ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
        },
        "Scope-Catch": {
            "actions": {
                "Response_2": {
                    "inputs": {
                        "body": "@replace(variables('Response'),'##RESULT##','0')",
                        "headers": {
                            "Content-type": "text/xml"
                        },
                        "statusCode": 500
                    },
                    "kind": "Http",
                    "runAfter": {},
                    "type": "Response"
                },
                "Terminate": {
                    "inputs": {
                        "runStatus": "Failed"
                    },
                    "runAfter": {
                        "Response_2": [
                            "Succeeded"
                        ]
                    },
                    "type": "Terminate"
                }
            },
            "runAfter": {
                "Scope-Try": [
                    "Failed"
                ]
            },
            "type": "Scope"
        },
        "Scope-Try": {
            "actions": {
                "Scope-CatchCompasOBMOpportunityService": {
                    "actions": {
                        "Response": {
                            "inputs": {
                                "body": "@replace(variables('Response'),'##RESULT##','true')",
                                "headers": {
                                    "Content-Type": "text/xml"
                                },
                                "statusCode": 500
                            },
                            "kind": "Http",
                            "runAfter": {},
                            "type": "Response"
                        },
                        "Terminate_2": {
                            "inputs": {
                                "runStatus": "Succeeded"
                            },
                            "runAfter": {
                                "Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate"
                        }
                    },
                    "runAfter": {
                        "Set_variablebomId": [
                            "Failed"
                        ]
                    },
                    "type": "Scope"
                },
                "Set_variablebomId": {
                    "actions": {
                        "Condition_to_check_S4SOpportunity_industry_search": {
                            "actions": {
                                "ComposeMarketSegmentCode": {
                                    "inputs": {
                                        "S4SOpportunity_Industry_Search__c": "@{body('SOQL-SISIC')?['records']?[0]?['Name']}"
                                    },
                                    "runAfter": {
                                        "SOQL-SISIC": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "ComposeSISICCode": {
                                    "inputs": "@setProperty(outputs('ComposeMarketSegmentCode'), 'S4SOpportunity_Industry_Search__c', coalesce(json(string(parameters('SISICCodeAndMappedMarketSegmentCode')))?[outputs('ComposeMarketSegmentCode')?['S4SOpportunity_Industry_Search__c']], string(' ')))",
                                    "runAfter": {
                                        "ComposeMarketSegmentCode": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose"
                                },
                                "SOQL-SISIC": {
                                    "inputs": {
                                        "body": {
                                            "query": "@{variables('varSOQLS4SSISIC')} where @{concat('Id  =  ',string(''''),body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SOpportunity_Industry_Search__c'],string(''''))}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/soql/executesoqlquery"
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SOpportunity_Industry_Search__c']",
                                                "@null"
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "equals": [
                                                "@body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SOpportunity_Industry_Search__c']",
                                                "@string('')"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "runAfter": {
                                "SOQL-BookingLineItem": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_to_check_applicationType": {
                            "actions": {
                                "Set_variable_EndAccount_SAP_Number": {
                                    "inputs": {
                                        "name": "EndAccount_SAP_Number",
                                        "value": "@{body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SSold_To_SAP__c']}"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "else": {
                                "actions": {
                                    "Condition_to_check_EndAccount_SAPNumber": {
                                        "actions": {
                                            "SOQL-Identification_number": {
                                                "inputs": {
                                                    "body": {
                                                        "query": "@{variables('varSOQLS4SIdentification_Number')} where @{concat('S4SAccount__c  =  ',string(''''),body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SEnd_Account__c'],string(''''))} and s4slocal_source_system__c in ('E1P Spiridon USA','E1P Spiridon USA ICB')"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/soql/executesoqlquery"
                                                },
                                                "runAfter": {},
                                                "type": "ApiConnection"
                                            },
                                            "Set_variableEndAccount_SAP_Number": {
                                                "inputs": {
                                                    "name": "EndAccount_SAP_Number",
                                                    "value": "@{body('SOQL-Identification_number')?['records']?[0]?['S4SIdentification_Number__c']}"
                                                },
                                                "runAfter": {
                                                    "SOQL-Identification_number": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable"
                                            }
                                        },
                                        "expression": {
                                            "and": [
                                                {
                                                    "not": {
                                                        "equals": [
                                                            "@body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SEnd_Account__c']",
                                                            "@null"
                                                        ]
                                                    }
                                                },
                                                {
                                                    "not": {
                                                        "equals": [
                                                            "@body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SEnd_Account__c ']",
                                                            "@string('')"
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "runAfter": {},
                                        "type": "If"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('ExecuteSOQL-Opportunity')?['records']?[0]?['S4SEnd_Account_Account__c']",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "ExecuteSOQL-Opportunity": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_to_check_flag": {
                            "actions": {
                                "SOQL-fetchQuote": {
                                    "inputs": {
                                        "body": {
                                            "query": "@{variables('varSOQLQuote')} where @{concat('OpportunityId  =  ',string(''''),body('ExecuteSOQL-Opportunity')?['records']?[0]?['Id'],string(''''))}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/soql/executesoqlquery"
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('flag')",
                                            "update"
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Condition_to_check_S4SOpportunity_industry_search": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Condition_to_check_lastSyncDate": {
                            "actions": {
                                "Set_variable_flag": {
                                    "inputs": {
                                        "name": "flag",
                                        "value": "update"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "else": {
                                "actions": {
                                    "Set_variable": {
                                        "inputs": {
                                            "name": "flag",
                                            "value": "insert"
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "not": {
                                            "equals": [
                                                "@variables('lastSyncDate')",
                                                "@null"
                                            ]
                                        }
                                    },
                                    {
                                        "not": {
                                            "equals": [
                                                "@variables('lastSyncDate')",
                                                "@string('')"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "runAfter": {},
                            "type": "If"
                        },
                        "Condition_to_check_response": {
                            "actions": {
                                "Set_variable_2": {
                                    "inputs": {
                                        "name": "token",
                                        "value": "@{outputs('HTTP-CompasService')['headers']?['st_token']}"
                                    },
                                    "runAfter": {},
                                    "type": "SetVariable"
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@outputs('HTTP-CompasService')['statusCode']",
                                            200
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "HTTP-CompasService": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "ExecuteSOQL-Opportunity": {
                            "inputs": {
                                "body": {
                                    "query": "@{variables('varSOQLOpportunity')} where @{concat('Id =  ',string(''''),variables('OpportunityId'),string(''''))}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/soql/executesoqlquery"
                            },
                            "runAfter": {
                                "Condition_to_check_lastSyncDate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "HTTP-CompasService": {
                            "inputs": {
                                "body": {
                                    "baseObject": {
                                        "applicationType": "200"
                                    },
                                    "credentials": {
                                        "password": "@{json(body('GetConfiguration'))?['Compas']?['password']}",
                                        "username": "@{json(body('GetConfiguration'))?['Compas']?['username']}"
                                    },
                                    "locale": "en"
                                },
                                "method": "POST",
                                "retryPolicy": {
                                    "type": "none"
                                },
                                "uri": "@{json(body('GetConfiguration'))?['Compas']?['url']}"
                            },
                            "runAfter": {
                                "Condition_to_check_flag": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http"
                        },
                        "Response_3": {
                            "inputs": {
                                "body": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <out:notificationsResponse>\n         <out:Ack>@{variables('acknowledgment')}</out:Ack>\n      </out:notificationsResponse>\n   </soapenv:Body>\n</soapenv:Envelope>\n",
                                "headers": {
                                    "Content-Type": "application/xml"
                                },
                                "statusCode": 200
                            },
                            "kind": "Http",
                            "runAfter": {
                                "internal_OBM_Compas_Upsert": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response"
                        },
                        "SOQL-BookingLineItem": {
                            "inputs": {
                                "body": {
                                    "query": "@{variables('varSOQLS4SBooking_Line_Item')} where @{concat('S4SOpportunity__c  =  ',string(''''),body('ExecuteSOQL-Opportunity')?['records']?[0]?['Id'],string(''''))}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['salesForceConnection']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/soql/executesoqlquery"
                            },
                            "runAfter": {
                                "Condition_to_check_applicationType": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection"
                        },
                        "SubLogic-sf4sLog": {
                            "inputs": {
                                "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                        "id": "[parameters('sf4sLog_logicApp_id')]"
                                    }
                                }
                            },
                            "runAfter": {
                                "Condition_to_check_response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Workflow"
                        },
                        "internal_OBM_Compas_Upsert": {
                            "inputs": {
                                "body": {
                                    "Account_Id": "@{body('ExecuteSOQL-Opportunity')?['records']?[0]?['AccountId']}",
                                    "Compose_SISIC_Code": "@{outputs('ComposeSISICCode')?['S4SOpportunity_Industry_Search__c']}",
                                    "EndAccount_SAP_Number": "@variables('EndAccount_SAP_Number')",
                                    "SOQL_BookingLineItem": "@body('SOQL-BookingLineItem')?['records']?[0]",
                                    "SOQL_Opportunity": "@body('ExecuteSOQL-Opportunity')?['records']?[0]",
                                    "SOQL_Quote": "@body('SOQL-fetchQuote')?['records']?[0]",
                                    "flag": "@variables('flag')",
                                    "token": "@variables('token')"
                                },
                                "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                        "id": "${OBM_Compas_Upsert_logicapp_id}"
                                    }
                                },
                                "retryPolicy": {
                                    "type": "none"
                                }
                            },
                            "runAfter": {
                                "SubLogic-sf4sLog": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Workflow"
                        }
                    },
                    "runAfter": {},
                    "type": "Scope"
                }
            },
            "runAfter": {
                "GetConfiguration": [
                    "Succeeded"
                ],
                "Initialize_variable_'varOpportunityId'": [
                    "Succeeded"
                ],
                "Initialize_variable_'varResponse'": [
                    "Succeeded"
                ],
                "Initialize_variable_EndAccount_SAP_Number": [
                    "Succeeded"
                ],
                "Initialize_variable_acknowledgment": [
                    "Succeeded"
                ],
                "Initialize_variable_bomId": [
                    "Succeeded"
                ],
                "Initialize_variable_flag": [
                    "Succeeded"
                ],
                "Initialize_variable_lastSyncDate": [
                    "Succeeded"
                ],
                "Initialize_variable_token": [
                    "Succeeded"
                ],
                "Initializevariable-varSOQLOpportunity": [
                    "Succeeded"
                ],
                "Initializevariable-varSOQLQuote": [
                    "Succeeded"
                ],
                "Initializevariable-varSOQLS4SBooking_Line_Item": [
                    "Succeeded"
                ],
                "Initializevariable-varSOQLS4SIdentification_Number": [
                    "Succeeded"
                ],
                "Initializevariable-varSOQLS4SSISIC": [
                    "Succeeded"
                ]
            },
            "trackedProperties": {
                "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'external')}",
                "citizenName": "c00031",
                "clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
                "clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}",
                "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'COMPAS')}",
                "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
                "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
                "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'OBM_Opportunity')}",
                "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}"
            },
            "type": "Scope"
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
        "$connections": {
            "defaultValue": {},
            "type": "Object"
        },
        "SISICCodeAndMappedMarketSegmentCode": {
            "defaultValue": "{  \"41005\" : \"CMX\" , \"41001\" : \"CRB\" , \"63110\" : \"CDA\" , \"61900\" : \"CUA\" , \"85300\" : \"CEA\" , \"85100\" : \"CEB\" , \"1500\" : \"CAA\" , \"84121\" : \"CGD\" , \"84229\" : \"CGA\" , \"84110\" : \"CGC\" , \"86102\" : \"CHH\" , \"8620G\" : \"CLA\" , \"87300\" : \"CHB\" , \"86906\" : \"07B\" , \"21009\" : \"LSP\" , \"72100\" : \"LSR\" , \"30309\" : \"CMA\" , \"29100\" : \"CMB\" , \"28197\" : \"04J\" , \"20299\" : \"CMC\" , \"10790\" : \"CMD\" , \"24100\" : \"CME\" , \"8990\" : \"CMF\" , \"19200\" : \"CMG\" , \"17010\" : \"CMI\" , \"26102\" : \"04I\" , \"52230\" : \"CTA\" , \"27900\" : \"CTB\" , \" 3510D\" : \"CUB\" , \" 3510H\" : \"CUC\" , \"52100\" : \"CWA\" , \"37000\" : \"CWB\",\"41002\" : \"CGN\", \"62091\" : \"13D\" }",
            "type": "String"
        }
    },
    "triggers": {
        "manual": {
            "inputs": {
                "schema": {}
            },
            "kind": "Http",
            "type": "Request"
        }
    }
}