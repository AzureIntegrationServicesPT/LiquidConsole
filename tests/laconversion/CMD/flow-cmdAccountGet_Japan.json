{
	"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
	"actions": {
		"GetConfiguration": {
			"inputs": {
				"body": {
					"key": "cmd-config"
				},
				"host": {
					"triggerName": "manual",
					"workflow": {
						"id": "${getConfiguration_logicAppId}"
					}
				},
				"retryPolicy": {
					"type": "None"
				}
			},
			"runAfter": {},
			"type": "Workflow"
		},
		"GetConfiguration_region": {
			"inputs": {
				"body": {
					"key": "cmd-region-config"
				},
				"host": {
					"triggerName": "manual",
					"workflow": {
						"id": "${getConfiguration_logicAppId}"
					}
				}
			},
			"runAfter": {},
			"type": "Workflow"
		},
		"HTTP_Get_Certificate": {
			"inputs": {
				"body": {
					"key": "SieSalesCRM-certificate"
				},
				"host": {
					"triggerName": "manual",
					"workflow": {
						"id": "${getConfiguration_logicAppId}"
					}
				},
				"retryPolicy": {
					"type": "none"
				}
			},
			"runAfter": {},
			"type": "Workflow"
		},
		"HTTP_Get_Certificate_Password": {
			"inputs": {
				"body": {
					"key": "SieSalesCRM-certificate-password"
				},
				"host": {
					"triggerName": "manual",
					"workflow": {
						"id": "${getConfiguration_logicAppId}"
					}
				},
				"retryPolicy": {
					"type": "none"
				}
			},
			"runAfter": {},
			"type": "Workflow"
		},
		"Initialize_variable_'Accounts'": {
			"inputs": {
				"variables": [
					{
						"name": "Accounts",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_'Content-Type'": {
			"inputs": {
				"variables": [
					{
						"name": "Content-Type",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_'Country'": {
			"inputs": {
				"variables": [
					{
						"name": "Country",
						"type": "string",
						"value": "JP_CN_TW"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_'SOAP Action'": {
			"inputs": {
				"variables": [
					{
						"name": "SOAP Action",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_'SOAP Version'": {
			"inputs": {
				"variables": [
					{
						"name": "SOAP Version",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_'configData'": {
			"inputs": {
				"variables": [
					{
						"name": "configData",
						"type": "string",
						"value": "@{json(body('GetConfiguration'))?[variables('Country')]}"
					}
				]
			},
			"runAfter": {
				"GetConfiguration": [
					"Succeeded"
				]
			},
			"type": "InitializeVariable"
		},
		"Initialize_variable_CMD_Request": {
			"inputs": {
				"variables": [
					{
						"name": "CMD Request",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_ETOUTDATA": {
			"inputs": {
				"variables": [
					{
						"name": "etoutdata",
						"type": "array"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Initialize_variable_SOAP_Schema": {
			"inputs": {
				"variables": [
					{
						"name": "soapSchema",
						"type": "string"
					}
				]
			},
			"runAfter": {},
			"type": "InitializeVariable"
		},
		"Scope-Catch": {
			"actions": {
				"Terminate": {
					"inputs": {
						"runError": {
							"code": "E",
							"message": "{\"statusMessage\":{\n\"Message\":\"CMD Invoke  Failed.\",\n\"Type\":\"E\"\n}}"
						},
						"runStatus": "Failed"
					},
					"runAfter": {},
					"type": "Terminate"
				}
			},
			"runAfter": {
				"Scope-Try": [
					"Failed",
					"Skipped",
					"TimedOut"
				]
			},
			"type": "Scope"
		},
		"Scope-Try": {
			"actions": {
				"Condition_check_for_SOAP_Version": {
					"actions": {
						"Compose_CMD_Request_1.1": {
							"inputs": "<soapenv:Envelope xmlns:soapenv=\"@{variables('soapSchema')}\" xmlns:urn=\"urn:sap-com:document:sap:rfc:functions\">\n\t<soapenv:Header/>\n\t<soapenv:Body>\n\t\t<urn:_-SIE_-CMDF_CMD_DATA_EXCHANGE>\n\t\t\t<IT_INDATA>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>/OPERATION</COMP_NAME>\n\t\t\t\t\t<VALUE>GET</VALUE>\n\t\t\t\t</item>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>BERSYS</COMP_NAME>\n\t\t\t\t\t<VALUE>@{json(string(variables('configData')))?['Value']}</VALUE>\n\t\t\t\t</item>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>/REQUESTERID</COMP_NAME>\n\t\t\t\t\t<VALUE>1023</VALUE>\n\t\t\t\t</item>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>MAX_RECORDS</COMP_NAME>\n\t\t\t\t\t<VALUE>@{json(string(variables('configData')))?['MAX_RECORDS']}</VALUE>\n\t\t\t\t</item>\n\t\t\t</IT_INDATA>\n\t\t</urn:_-SIE_-CMDF_CMD_DATA_EXCHANGE>\n\t</soapenv:Body>\n</soapenv:Envelope>",
							"runAfter": {
								"SOAP_Schema_for_1.1": [
									"Succeeded"
								]
							},
							"type": "Compose"
						},
						"SOAP_Schema_for_1.1": {
							"inputs": {
								"name": "soapSchema",
								"value": "http://schemas.xmlsoap.org/soap/envelope/"
							},
							"runAfter": {
								"Set_variable_SOAP_Action_for_1.1": [
									"Succeeded"
								]
							},
							"type": "SetVariable"
						},
						"Set_variable_CMD_Request_1.1": {
							"inputs": {
								"name": "CMD Request",
								"value": "@{outputs('Compose_CMD_Request_1.1')}"
							},
							"runAfter": {
								"Compose_CMD_Request_1.1": [
									"Succeeded"
								]
							},
							"type": "SetVariable"
						},
						"Set_variable_Content-Type_for_1.1": {
							"inputs": {
								"name": "Content-Type",
								"value": "text/xml;charset=UTF-8"
							},
							"runAfter": {},
							"type": "SetVariable"
						},
						"Set_variable_SOAP_Action_for_1.1": {
							"inputs": {
								"name": "SOAP Action",
								"value": "\"urn:sap-com:document:sap:rfc:functions:_-SIE_-CMDWS_CMD_DATA_EXCHANGE:_-SIE_-CMDF_CMD_DATA_EXCHANGERequest\""
							},
							"runAfter": {
								"Set_variable_Content-Type_for_1.1": [
									"Succeeded"
								]
							},
							"type": "SetVariable"
						}
					},
					"else": {
						"actions": {
							"Compose_CMD_Request_1.2": {
								"inputs": "<soap:Envelope xmlns:soap=\"@{variables('soapSchema')}\" xmlns:urn=\"urn:sap-com:document:sap:rfc:functions\">\n\t<soap:Header/>\n\t<soap:Body>\n\t\t<urn:_-SIE_-CMDF_CMD_DATA_EXCHANGE>\n\t\t\t<IT_INDATA>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>/OPERATION</COMP_NAME>\n\t\t\t\t\t<VALUE>GET</VALUE>\n\t\t\t\t</item>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>BERSYS</COMP_NAME>\n\t\t\t\t\t<VALUE>@{json(string(variables('configData')))?['Value']}</VALUE>\n\t\t\t\t</item>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>/REQUESTERID</COMP_NAME>\n\t\t\t\t\t<VALUE>1023</VALUE>\n\t\t\t\t</item>\n\t\t\t\t<item>\n\t\t\t\t\t<COMP_NAME>MAX_RECORDS</COMP_NAME>\n\t\t\t\t\t<VALUE>@{json(string(variables('configData')))?['MAX_RECORDS']}</VALUE>\n\t\t\t\t</item>\n\t\t\t</IT_INDATA>\n\t\t</urn:_-SIE_-CMDF_CMD_DATA_EXCHANGE>\n\t</soap:Body>\n</soap:Envelope>",
								"runAfter": {
									"SOAP_Schema_for_1.2": [
										"Succeeded"
									]
								},
								"type": "Compose"
							},
							"SOAP_Schema_for_1.2": {
								"inputs": {
									"name": "soapSchema",
									"value": "http://www.w3.org/2003/05/soap-envelope"
								},
								"runAfter": {
									"Set_variable_Content_Type__for_1.2": [
										"Succeeded"
									]
								},
								"type": "SetVariable"
							},
							"Set_variable_CMD_Request_1.2": {
								"inputs": {
									"name": "CMD Request",
									"value": "@{outputs('Compose_CMD_Request_1.2')}"
								},
								"runAfter": {
									"Compose_CMD_Request_1.2": [
										"Succeeded"
									]
								},
								"type": "SetVariable"
							},
							"Set_variable_Content_Type__for_1.2": {
								"inputs": {
									"name": "Content-Type",
									"value": "application/soap+xml;charset=UTF-8;action=\"urn:sap-com:document:sap:rfc:functions:_-SIE_-CMDWS_CMD_DATA_EXCHANGE:_-SIE_-CMDF_CMD_DATA_EXCHANGERequest\""
								},
								"runAfter": {},
								"type": "SetVariable"
							}
						}
					},
					"expression": {
						"and": [
							{
								"equals": [
									"@trim(variables('SOAP Version'))",
									"@string('1.1')"
								]
							}
						]
					},
					"runAfter": {},
					"type": "If"
				},
				"Condition_check_for_fault": {
					"actions": {
						"Terminate_with_fault": {
							"inputs": {
								"runError": {
									"code": "E",
									"message": "{\n   \"fault\": { \"faultreason\": \"@{xpath(xml(body('Invoke_CMD')),'.//faultstring/text()')?[0]}\" }\n}"
								},
								"runStatus": "Failed"
							},
							"runAfter": {},
							"type": "Terminate"
						}
					},
					"else": {
						"actions": {
							"Condition_to_check_ET_OUTDATA_exists": {
								"actions": {
									"Compose_etoutdata": {
										"inputs": "@decodebase64(xpath(xml(body('Invoke_CMD')),'//ET_OUTDATA')?[0]?['$content'])",
										"runAfter": {},
										"type": "Compose"
									},
									"For_each_Account": {
										"actions": {
											"Account_for_Upsert": {
												"inputs": {
													"Account_List": [
														"@item()"
													]
												},
												"runAfter": {},
												"type": "Compose"
											},
											"logic-c00031-internal-cmdAccountGet_Japan": {
												"inputs": {
													"body": {
														"FuncOutput": "@{outputs('Account_for_Upsert')}",
														"RegionConfig": "@{body('GetConfiguration_region')}"
													},
													"host": {
														"triggerName": "manual",
														"workflow": {
															"id": "${CMD_internal_AccountGet_Japan_logicAppId}"
														}
													}
												},
												"runAfter": {
													"Account_for_Upsert": [
														"Succeeded"
													]
												},
												"type": "Workflow"
											}
										},
										"foreach": "@json(string(body('xmltoJson')))?['Account_List']",
										"runAfter": {
											"xmltoJson": [
												"Succeeded"
											]
										},
										"type": "Foreach"
									},
									"SET_ET_OUTDATA_from_response": {
										"inputs": "@json(replace(string(json(xml(outputs('Compose_etoutdata')))?['ET_OUTDATA']),'\"item\"','\"ET_OUTDATA\"'))",
										"runAfter": {
											"Compose_etoutdata": [
												"Succeeded"
											]
										},
										"type": "Compose"
									},
									"Success": {
										"inputs": {
											"runStatus": "Succeeded"
										},
										"runAfter": {
											"For_each_Account": [
												"Succeeded"
											]
										},
										"type": "Terminate"
									},
									"xmltoJson": {
										"inputs": {
											"body": "@outputs('SET_ET_OUTDATA_from_response')",
											"authentication": {
												"type": "Raw",
												"value": "[parameters('functionAppKey')]"
											},
											"function": {
												"id": "[concat(parameters('funcApp'), '/functions/xmltoJson')]"
											},
											"retryPolicy": {
												"type": "none"
											}
										},
										"runAfter": {
											"SET_ET_OUTDATA_from_response": [
												"Succeeded"
											]
										},
										"type": "Function"
									}
								},
								"else": {
									"actions": {
										"Empty_ETOUTDATA": {
											"inputs": {
												"runStatus": "Succeeded"
											},
											"runAfter": {},
											"type": "Terminate"
										}
									}
								},
								"expression": {
									"and": [
										{
											"not": {
												"equals": [
													"@string(xpath(xml(body('Invoke_CMD')),'.//ET_OUTDATA/item/COMP_NAME/text()')?[0])",
													""
												]
											}
										},
										{
											"not": {
												"equals": [
													"@string(xpath(xml(body('Invoke_CMD')),'.//ET_OUTDATA/item/COMP_NAME/text()')?[0])",
													"@null"
												]
											}
										}
									]
								},
								"runAfter": {},
								"type": "If"
							}
						}
					},
					"expression": {
						"and": [
							{
								"not": {
									"equals": [
										"@string(xpath(xml(body('Invoke_CMD')),'.//faultstring/text()')?[0])",
										""
									]
								}
							},
							{
								"not": {
									"equals": [
										"@string(xpath(xml(body('Invoke_CMD')),'.//faultstring/text()')?[0])",
										"@null"
									]
								}
							},
							{
								"not": {
									"equals": [
										"@string(xpath(xml(body('Invoke_CMD')),'.//faultstring/text()')?[0])",
										"@string('null')"
									]
								}
							}
						]
					},
					"runAfter": {
						"Invoke_CMD": [
							"Succeeded",
							"Failed"
						]
					},
					"type": "If"
				},
				"Invoke_CMD": {
					"inputs": {
						"authentication": {
							"password": "@body('HTTP_Get_Certificate_Password')",
							"pfx": "@body('HTTP_Get_Certificate')",
							"type": "ClientCertificate"
						},
						"body": "@variables('CMD Request')",
						"headers": {
							"Content-Type": "@variables('Content-Type')",
							"SOAPAction": "@variables('SOAP Action')"
						},
						"method": "POST",
						"retryPolicy": {
							"type": "none"
						},
						"uri": "@{json(string(variables('configData')))?['url']}"
					},
					"runAfter": {
						"Condition_check_for_SOAP_Version": [
							"Succeeded"
						]
					},
					"type": "Http"
				}
			},
			"runAfter": {
				"GetConfiguration_region": [
					"Succeeded"
				],
				"HTTP_Get_Certificate": [
					"Succeeded"
				],
				"HTTP_Get_Certificate_Password": [
					"Succeeded"
				],
				"Initialize_variable_'Accounts'": [
					"Succeeded"
				],
				"Initialize_variable_'Content-Type'": [
					"Succeeded"
				],
				"Initialize_variable_'Country'": [
					"Succeeded"
				],
				"Initialize_variable_'SOAP Action'": [
					"Succeeded"
				],
				"Initialize_variable_'SOAP Version'": [
					"Succeeded"
				],
				"Initialize_variable_'configData'": [
					"Succeeded"
				],
				"Initialize_variable_CMD_Request": [
					"Succeeded"
				],
				"Initialize_variable_ETOUTDATA": [
					"Succeeded"
				],
				"Initialize_variable_SOAP_Schema": [
					"Succeeded"
				]
			},
			"trackedProperties": {
				"apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'external')}",
				"citizenName": "c00031",
				"correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
				"interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'CMD')}",
				"interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'CMD')}",
				"interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'not-defined')}",
				"operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'AccountGET_JAPAN')}",
				"parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
				"clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
				"clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
			},
			"type": "Scope"
		}
	},
	"contentVersion": "1.0.0.0",
	"outputs": {},
	"parameters": {},
	"triggers": {
		"Recurrence": {
			"recurrence": {
				"frequency": "Minute",
				"interval": 15,
				"timeZone": "W. Europe Standard Time",
				"startTime": "2023-07-11T08:10:00Z"
			},
			"type": "Recurrence"
		}
	}
}