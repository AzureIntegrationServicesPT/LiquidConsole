{
	"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"$connections": {
			"defaultValue": {},
			"type": "Object"
		}
	},
	"triggers": {
		"manual": {
			"type": "Request",
			"kind": "Http",
			"inputs": {
				"schema": {
					"properties": {
						"Object": {
							"properties": {},
							"type": "object"
						}
					},
					"type": "object"
				}
			}
		}
	},
	"actions": {
		"Compose": {
			"runAfter": {
				"JsonRemoveNullOrEmptyFunc": [
					"Succeeded"
				]
			},
			"type": "Compose",
			"inputs": "@json(body('JsonRemoveNullOrEmptyFunc')?['result']?['restructuredJson'])\r\n"
		},
		"Compose_handle_Booleans": {
			"runAfter": {},
			"type": "Compose",
			"inputs": "@json( replace(replace(string(triggerBody()),'False','false'),'True','true'))"
		},
		"Initialize_variable": {
			"runAfter": {},
			"type": "InitializeVariable",
			"inputs": {
				"variables": [
					{
						"name": "eventResponse",
						"type": "object",
						"value": {
							"Created": "",
							"Id": "",
							"Message": "",
							"Status": ""
						}
					}
				]
			}
		},
		"JsonRemoveNullOrEmptyFunc": {
			"runAfter": {
				"Compose_handle_Booleans": [
					"Succeeded"
				]
			},
			"type": "Function",
			"inputs": {
				"body": {
					"CorrelationId": "@{triggerOutputs()['headers']?['correlationid']}",
					"InputRequestBase64": "@{base64(outputs('Compose_handle_Booleans'))}",
					"InterfaceName": "upsertObject",
					"Username": "@{triggerOutputs()['headers']?['Username']}",
					"operation": "JsonRemoveNullOrEmpty"
				},
				"authentication": {
					"type": "Raw",
					"value": "[parameters('functionAppKey')]"
				},
				"function": {
					"id": "[concat(parameters('funcApp'), '/functions/JsonRemoveNullOrEmptyFunc')]"
				},
				"method": "POST",
				"retryPolicy": {
					"type": "none"
				}
			}
		},
		"Main": {
			"actions": {
				"Catch": {
					"actions": {
						"Set_Catch_Response": {
							"runAfter": {},
							"type": "Response",
							"kind": "Http",
							"inputs": {
								"body": {
									"Created": "@{or(if(equals(outputs('Create_Event_or_Task')?['statusCode'],500),'false','true'),if(equals(outputs('Update_Event_or_Task')?['statusCode'],500),'false','true'))}",
									"Id": "@{coalesce(triggerBody()?['Id'],'')}",
									"Message": "@{coalesce(body('Create_Event_or_Task')?['message'],body('Update_Event_or_Task')?['message'])}",
									"Status": "@{or(if(equals(outputs('Create_Event_or_Task')?['statusCode'],500),'failure','success'),if(equals(outputs('Update_Event_or_Task')?['statusCode'],500),'failure','success'))}"
								},
								"statusCode": 500
							}
						},
						"Terminate": {
							"runAfter": {
								"Set_Catch_Response": [
									"Succeeded"
								]
							},
							"type": "Terminate",
							"inputs": {
								"runError": {
									"code": "500",
									"message": "Upsert Activity Failure"
								},
								"runStatus": "Failed"
							}
						}
					},
					"runAfter": {
						"Try": [
							"Failed",
							"Skipped",
							"TimedOut"
						]
					},
					"type": "Scope"
				},
				"Try": {
					"actions": {
						"Condition": {
							"actions": {
								"Set_Response_for_update": {
									"runAfter": {
										"Update_Event_or_Task": [
											"Succeeded",
											"TimedOut",
											"Failed"
										]
									},
									"type": "SetVariable",
									"inputs": {
										"name": "eventResponse",
										"value": {
											"Created": "false",
											"Id": "@{triggerBody()?['Object']?['Id']}",
											"Message": "@{coalesce(body('Update_Event_or_Task')?['message'],'')}",
											"Status": "@{if(equals(outputs('Update_Event_or_Task')?['statusCode'],200),'success',if(equals(outputs('Update_Event_or_Task')?['statusCode'],201),'success','failure'))}"
										}
									}
								},
								"Update_Event_or_Task": {
									"runAfter": {},
									"type": "ApiConnection",
									"inputs": {
										"body": "@outputs('Compose')?['Object']",
										"headers": {
											"Content-Type": "application/json"
										},
										"host": {
											"connection": {
												"name": "@parameters('$connections')['salesForceConnection']['connectionId']"
											}
										},
										"method": "patch",
										"path": "/v3/datasets/default/tables/@{encodeURIComponent(encodeURIComponent(triggerOutputs()['headers']?['Object']))}/items/@{encodeURIComponent(encodeURIComponent(triggerBody()?['Object']?['Id']))}"
									},
									"description": "In Input it's Object, Salesforce Object Type it's Objects. Example: Task and Tasks, Event and Events"
								}
							},
							"runAfter": {},
							"else": {
								"actions": {
									"Create_Event_or_Task": {
										"runAfter": {},
										"type": "ApiConnection",
										"inputs": {
											"body": "@outputs('Compose')?['Object']",
											"headers": {
												"Content-Type": "application/json"
											},
											"host": {
												"connection": {
													"name": "@parameters('$connections')['salesForceConnection']['connectionId']"
												}
											},
											"method": "post",
											"path": "/v2/datasets/default/tables/@{encodeURIComponent(encodeURIComponent(triggerOutputs()['headers']?['Object']))}/items",
											"retryPolicy": {
												"type": "none"
											}
										}
									},
									"Set_Response_for_creation": {
										"runAfter": {
											"Create_Event_or_Task": [
												"Succeeded",
												"TimedOut",
												"Failed"
											]
										},
										"type": "SetVariable",
										"inputs": {
											"name": "eventResponse",
											"value": {
												"Created": "@{if(equals(outputs('Create_Event_or_Task')?['statusCode'],201),'true','false')}",
												"Id": "@{coalesce(body('Create_Event_or_Task')?['Id'],'')}",
												"Message": "@{coalesce(body('Create_Event_or_Task')?['message'],body('Create_Event_or_Task')?['message'])}",
												"Status": "@{if(equals(outputs('Create_Event_or_Task')?['statusCode'],200),'success',if(equals(outputs('Create_Event_or_Task')?['statusCode'],201),'success','failure'))}"
											}
										}
									}
								}
							},
							"expression": {
								"and": [
									{
										"not": {
											"equals": [
												"@triggerBody()?['Object']?['Id']",
												"@null"
											]
										}
									},
									{
										"not": {
											"equals": [
												"@triggerBody()?['Object']?['Id']",
												""
											]
										}
									}
								]
							},
							"type": "If"
						},
						"Set_Try_Response": {
							"runAfter": {
								"Condition": [
									"Succeeded"
								]
							},
							"type": "Response",
							"kind": "Http",
							"inputs": {
								"body": "@variables('eventResponse')",
								"statusCode": 200
							}
						}
					},
					"runAfter": {},
					"type": "Scope"
				}
			},
			"runAfter": {
				"Compose": [
					"Succeeded"
				],
				"Initialize_variable": [
					"Succeeded"
				]
			},
			"type": "Scope"
		}
	},
	"outputs": {}
}