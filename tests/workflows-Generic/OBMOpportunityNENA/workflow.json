{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Check_ConnectionEnabled": {
        "actions": {
          "Scope_-_Catch": {
            "actions": {
              "Response_On_Exception": {
                "inputs": {
                  "body": "@xml(replace(variables('varAckResponse'),'##RESULT##','0'))",
                  "headers": {
                    "Content-Type": "application/xml"
                  },
                  "statusCode": 500
                },
                "kind": "http",
                "runAfter": {},
                "type": "Response"
              },
              "Terminate-Catch": {
                "inputs": {
                  "runStatus": "Failed"
                },
                "runAfter": {
                  "Response_On_Exception": [
                    "Succeeded"
                  ]
                },
                "type": "Terminate"
              }
            },
            "runAfter": {
              "Scope_-_Try": [
                "Failed"
              ]
            },
            "type": "Scope"
          },
          "Scope_-_Notifications": {
            "actions": {
              "Compose": {
                "inputs": "@if(greater(int(xpath(xml(replace(string(replace(string(triggerBody()) , 'soapenv:Body' , 'Body')),'soapenv:Envelope' , 'Envelope')), \r\n'count(/*[local-name()=\"Envelope\"]/*[local-name()=\"Body\"]/*[local-name()=\"notifications\"]/*[local-name()=\"Notification\"])')), 1),\r\nbody('Parse_JSON')?['soapenv:Envelope']?['soapenv:Body']?['notifications']?['Notification'],\r\ncreateArray(body('Parse_JSON')?['soapenv:Envelope']?['soapenv:Body']?['notifications']?['Notification']))",
                "runAfter": {
                  "Parse_JSON": [
                    "Succeeded"
                  ]
                },
                "type": "Compose"
              },
              "Parse_JSON": {
                "inputs": {
                  "content": "@variables('requestJson')",
                  "schema": {
                    "properties": {
                      "Body": {
                        "properties": {
                          "notifications": {
                            "properties": {
                              "ActionId": {
                                "type": "string"
                              },
                              "EnterpriseUrl": {
                                "type": "string"
                              },
                              "Notification": {
                                "items": {
                                  "properties": {
                                    "Id": {
                                      "type": "string"
                                    },
                                    "sObject": {
                                      "properties": {
                                        "Email": {
                                          "type": "string"
                                        },
                                        "Id": {
                                          "type": "string"
                                        },
                                        "S4SPartner_External_Access_Account_Id__c": {
                                          "type": "string"
                                        },
                                        "S4SPartner_Extranet_Access__c": {
                                          "type": "string"
                                        },
                                        "S4SWebSSO_U_ID__c": {
                                          "type": "string"
                                        },
                                        "fieldsToNull": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "required": [
                                    "Id",
                                    "sObject"
                                  ],
                                  "type": "object"
                                },
                                "type": [
                                  "array",
                                  "object"
                                ]
                              },
                              "OrganizationId": {
                                "type": "string"
                              },
                              "PartnerUrl": {
                                "type": "string"
                              },
                              "SessionId": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "Header": {}
                    },
                    "type": "object"
                  }
                },
                "runAfter": {},
                "type": "ParseJson"
              },
              "Set_Notifications": {
                "inputs": {
                  "name": "Notifications",
                  "value": "@outputs('Compose')"
                },
                "runAfter": {
                  "Compose": [
                    "Succeeded"
                  ]
                },
                "type": "SetVariable"
              }
            },
            "runAfter": {},
            "type": "Scope"
          },
          "Scope_-_Try": {
            "actions": {
              "Check-ResponseMessage": {
                "actions": {
                  "SuccessResponse": {
                    "inputs": {
                      "body": "@replace(variables('varAckResponse'),'##RESULT##','1')",
                      "headers": {
                        "Content-Type": "application/xml"
                      },
                      "statusCode": 200
                    },
                    "kind": "http",
                    "runAfter": {},
                    "type": "Response"
                  }
                },
                "else": {
                  "actions": {
                    "FailedResponse": {
                      "inputs": {
                        "body": "@replace(variables('varAckResponse'),'##RESULT##','0')",
                        "headers": {
                          "Content-Type": "application/xml"
                        },
                        "statusCode": 200
                      },
                      "kind": "http",
                      "runAfter": {},
                      "type": "Response"
                    },
                    "Terminate-FailedResponse": {
                      "inputs": {
                        "runStatus": "Failed"
                      },
                      "runAfter": {
                        "FailedResponse": [
                          "Succeeded"
                        ]
                      },
                      "type": "Terminate"
                    }
                  }
                },
                "expression": {
                  "or": [
                    {
                      "equals": [
                        "@variables('responseSieSales')",
                        "@bool('true')"
                      ]
                    }
                  ]
                },
                "runAfter": {
                  "For_each_Notification": [
                    "Succeeded"
                  ]
                },
                "type": "If"
              },
              "For_each_Notification": {
                "actions": {
                  "Check-HttpResponseMessage": {
                    "actions": {
                      "Set_variable_responseSieSales": {
                        "inputs": {
                          "name": "responseSieSales",
                          "value": true
                        },
                        "runAfter": {},
                        "type": "SetVariable"
                      }
                    },
                    "else": {
                      "actions": {
                        "Unsuccessful-_responseSieSales": {
                          "inputs": {
                            "name": "responseSieSales",
                            "value": false
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      }
                    },
                    "expression": {
                      "or": [
                        {
                          "equals": [
                            "@xpath(xml(body('HTTP-Call_OBM-Endpoint')),'.//EV_MESSAGE/text()')?[0]",
                            "Daten erfolgreich gespeichert"
                          ]
                        },
                        {
                          "equals": [
                            "@xpath(xml(body('HTTP-Call_OBM-Endpoint')),'.//EV_MESSAGE/text()')?[0]",
                            "Data successfully saved"
                          ]
                        }
                      ]
                    },
                    "runAfter": {
                      "HTTP-Call_OBM-Endpoint": [
                        "Succeeded"
                      ]
                    },
                    "type": "If"
                  },
                  "HTTP-Call_OBM-Endpoint": {
                    "inputs": {
                      "authentication": {
                        "password": "@json(string(body('HTTP-Get_NENEOBM_Config')))?['NENA']?['password']",
                        "type": "Basic",
                        "username": "@json(string(body('HTTP-Get_NENEOBM_Config')))?['NENA']?['username']"
                      },
                      "body": "@variables('varInputRequestEndpoint')",
                      "headers": "@triggerOutputs()['headers']",
                      "method": "POST",
                      "uri": "@{json(string(body('HTTP-Get_NENEOBM_Config')))?['NENA']?['url']}"
                    },
                    "runAfter": {
                      "Set_variable_InputRequestEndpoint": [
                        "Succeeded"
                      ]
                    },
                    "type": "Http"
                  },
                  "Set_variable_InputRequestEndpoint": {
                    "inputs": {
                      "name": "varInputRequestEndpoint",
                      "value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sap-com:document:sap:rfc:functions\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <urn:_-SIE_-EVN_ZV_SF4S_OPP_UPDATE_SS>\n         <IV_OPPORTUNITY_ID>@{items('For_each_Notification')?['sObject']?['sf:Id']}</IV_OPPORTUNITY_ID>\n      </urn:_-SIE_-EVN_ZV_SF4S_OPP_UPDATE_SS>\n   </soapenv:Body>\n</soapenv:Envelope>"
                    },
                    "runAfter": {},
                    "type": "SetVariable"
                  }
                },
                "foreach": "@variables('Notifications')",
                "runAfter": {},
                "type": "Foreach"
              }
            },
            "runAfter": {
              "Scope_-_Notifications": [
                "Succeeded"
              ]
            },
            "trackedProperties": {
              "apimRouting": "@{coalesce(triggerOutputs()?['headers']?['apimRouting'], 'not-defined')}",
              "citizenName": "c00031",
              "correlationId": "@{coalesce(triggerOutputs()?['headers']?['correlationId'], triggerOutputs()?['headers']?['x-ms-client-tracking-id'], 'not-defined')}",
              "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['interfaceName'], 'Nena')}",
              "interfacePartner": "@{coalesce(triggerOutputs()?['headers']?['Username'], 'not-defined')}",
              "interfaceVersion": "@{coalesce(triggerOutputs()?['headers']?['interfaceVersion'], 'non-defined')}",
              "operationName": "@{coalesce(triggerOutputs()?['headers']?['operationName'], 'OBMOpportunityNENA')}",
              "parentWorkflow": "@{coalesce(triggerOutputs()?['headers']?['x-ms-workflow-name'],'not-defined')}",
              "clientCertificateThumbprint": "@{coalesce(triggerOutputs()?['headers']?['client-certificate-thumbprint'],'not-defined')}",
              "clientIPAddress": "@{coalesce(triggerOutputs()?['headers']?['client-ip-address'],'not-defined')}"
            },
            "type": "Scope"
          }
        },
        "else": {
          "actions": {
            "Response": {
              "inputs": {
                "body": "@xml(replace(variables('varAckResponse'),'##RESULT##','1'))",
                "headers": {
                  "Content-Type": "application/xml"
                },
                "statusCode": 200
              },
              "kind": "Http",
              "runAfter": {},
              "type": "Response"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('VarEnableConnection')",
                true
              ]
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-AcKresponse": [
            "Succeeded"
          ],
          "Initialize_variable-Content-Type": [
            "Succeeded"
          ],
          "Initialize_variable-Notifications": [
            "Succeeded"
          ],
          "Initialize_variable-RequestCompose": [
            "Succeeded"
          ],
          "Initialize_variable-SoapAction": [
            "Succeeded"
          ],
          "Initialize_variable-enableConnection": [
            "Succeeded"
          ],
          "Initialize_variable-requestJson": [
            "Succeeded"
          ],
          "Initialize_variable-responseSieSales": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "HTTP-Get_NENEOBM_Config": {
        "inputs": {
          "host": {
            "workflow": {
              "id": "getconfiguration_logicappid}"
            }
          },
          "body": {
            "key": "obm-config"
          },
          "headers": null
        },
        "runAfter": {},
        "type": "Workflow"
      },
      "Initialize_variable-AcKresponse": {
        "inputs": {
          "variables": [
            {
              "name": "varAckResponse",
              "type": "string",
              "value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:out=\"http://soap.sforce.com/2005/09/outbound\">\n<soapenv:Header/>\n<soapenv:Body>\n<out:notificationsResponse>\n<out:Ack>##RESULT##</out:Ack>\n</out:notificationsResponse>\n</soapenv:Body>\n</soapenv:Envelope>"
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-Content-Type": {
        "inputs": {
          "variables": [
            {
              "name": "varContentType",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-Notifications": {
        "inputs": {
          "variables": [
            {
              "name": "Notifications",
              "type": "array"
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-RequestCompose": {
        "inputs": {
          "variables": [
            {
              "name": "varInputRequestEndpoint",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-SoapAction": {
        "inputs": {
          "variables": [
            {
              "name": "soapAction",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-enableConnection": {
        "inputs": {
          "variables": [
            {
              "name": "VarEnableConnection",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-requestJson": {
        "inputs": {
          "variables": [
            {
              "name": "requestJson",
              "type": "string",
              "value": "@{json(xml(triggerBody()))}"
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-responseSieSales": {
        "inputs": {
          "variables": [
            {
              "name": "responseSieSales",
              "type": "boolean",
              "value": false
            }
          ]
        },
        "runAfter": {
          "HTTP-Get_NENEOBM_Config": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "manual": {
        "inputs": {},
        "kind": "Http",
        "type": "Request"
      }
    }
  },
  "kind": "Stateful"
}
