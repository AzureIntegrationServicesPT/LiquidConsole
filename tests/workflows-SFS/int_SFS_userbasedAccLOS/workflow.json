{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Append_to_array_variable-RecordTypeId": {
        "inputs": {
          "name": "varReplaceVariable",
          "value": "RecordTypeId:@{body('Execute_a_SQL_query_fetchOppRecordType')?['records']?[0]?['Id']}"
        },
        "runAfter": {
          "Execute_a_SQL_query_fetchOppRecordType": [
            "Succeeded"
          ],
          "HTTP_Get_SF_Token": [
            "Succeeded"
          ],
          "Initialize_variable-Opportunity": [
            "Succeeded"
          ],
          "Initialize_variable-OwnerId": [
            "Succeeded"
          ],
          "Initialize_variable-UserName": [
            "Succeeded"
          ],
          "Initialize_variable-varOwnerRoleIds": [
            "Succeeded"
          ],
          "Initialize_variable_-_Account": [
            "Succeeded"
          ],
          "Initialize_variable_-_sfsRecordTypeID": [
            "Succeeded"
          ],
          "Initialize_variable_emptyArray": [
            "Succeeded"
          ]
        },
        "type": "AppendToArrayVariable"
      },
      "Append_to_array_variable-S4SData_Visibility__c": {
        "inputs": {
          "name": "varReplaceVariable",
          "value": "S4SData_Visibility__c:"
        },
        "runAfter": {
          "Append_to_array_variable-RecordTypeId": [
            "Succeeded"
          ]
        },
        "type": "AppendToArrayVariable"
      },
      "Append_to_array_variable_RecordTypeId": {
        "inputs": {
          "name": "varReplaceVariable",
          "value": "RecordTypeId:@{body('Execute_a_SQL_query_fetchOppRecordType')?['records']?[0]?['Id']}"
        },
        "runAfter": {
          "Compose_Remove_Fields_list": [
            "Succeeded"
          ]
        },
        "type": "AppendToArrayVariable"
      },
      "Compose_Remove_Fields_list": {
        "inputs": "S4SSFS_Rating_Date__c,S4SExpiry_Date_Risk_Approval__c,S4SExpiry_Date_Financial_Framework__c,S4SFinancial_Framework__c",
        "runAfter": {
          "Condition_to_SISIC_Direct": [
            "Succeeded"
          ]
        },
        "runtimeConfiguration": {
          "secureData": {
            "properties": [
              "inputs"
            ]
          }
        },
        "type": "Compose"
      },
      "Condition_OwnerId1": {
        "actions": {
          "Condition_to_Check_totalSize": {
            "actions": {
              "Append_to_array_variable-ownerId": {
                "inputs": {
                  "name": "varReplaceVariable",
                  "value": "OwnerId:@{body('Execute_SOQL_query_ownerId1')?['records']?[0]?['Id']}"
                },
                "runAfter": {},
                "type": "AppendToArrayVariable"
              }
            },
            "else": {
              "actions": {
                "Condition_to_check_defaultOwner": {
                  "actions": {
                    "Append_to_array_variable_defaultOwner_as_OwnerId": {
                      "inputs": {
                        "name": "varReplaceVariable",
                        "value": "OwnerId:@{body('Get_defaultOwner_ID')?['records']?[0]?['Id']}"
                      },
                      "runAfter": {
                        "Get_defaultOwner_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "AppendToArrayVariable"
                    },
                    "Get_defaultOwner_ID": {
                      "inputs": {
                        "body": {
                          "query": "select id from User where S4SGID_Technical__c = '@{triggerOutputs()['headers']?['defaultOwner']}'"
                        },
                        "path": "/soql/executesoqlquery",
                        "host": {
                          "connection": {
                            "referenceName": "salesForceConnection"
                          }
                        },
                        "method": "post"
                      },
                      "runAfter": {},
                      "type": "ApiConnection"
                    }
                  },
                  "else": {
                    "actions": {
                      "Failed_Response": {
                        "inputs": {
                          "body": "Provided owner information is not unique",
                          "statusCode": 400
                        },
                        "kind": "Http",
                        "runAfter": {},
                        "runtimeConfiguration": {
                          "secureData": {
                            "properties": [
                              "inputs"
                            ]
                          }
                        },
                        "type": "Response"
                      },
                      "Terminate": {
                        "inputs": {
                          "runStatus": "Succeeded"
                        },
                        "runAfter": {
                          "Failed_Response": [
                            "Succeeded"
                          ]
                        },
                        "type": "Terminate"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@triggerOutputs()?['headers']?['defaultOwner']",
                            "@null"
                          ]
                        }
                      },
                      {
                        "not": {
                          "equals": [
                            "@triggerOutputs()['headers']?['defaultOwner']",
                            "@string('')"
                          ]
                        }
                      }
                    ]
                  },
                  "runAfter": {},
                  "type": "If"
                }
              }
            },
            "expression": {
              "and": [
                {
                  "equals": [
                    "@body('Execute_SOQL_query_ownerId1')?['totalSize']",
                    1
                  ]
                }
              ]
            },
            "runAfter": {
              "log-fetchOwner_totalSize": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Execute_SOQL_query_ownerId1": {
            "inputs": {
              "body": {
                "query": "SELECT Id from User WHERE S4SGID_Technical__c = '@{xpath(xml(variables('Account')),'.//OwnerId/text()')?[0]}'"
              },
              "path": "/soql/executesoqlquery",
              "host": {
                "connection": {
                  "referenceName": "salesForceConnection"
                }
              },
              "method": "post"
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "secureData": {
                "properties": [
                  "inputs",
                  "outputs"
                ]
              }
            },
            "type": "ApiConnection"
          },
          "Response_Invalid_AccountID_fetchOwner": {
            "inputs": {
              "body": "Invalid Account ID",
              "statusCode": 200
            },
            "kind": "Http",
            "runAfter": {
              "Execute_SOQL_query_ownerId1": [
                "TimedOut",
                "Failed"
              ]
            },
            "type": "Response"
          },
          "Terminate_Invalid_Account_ID_FetchOwner": {
            "inputs": {
              "runStatus": "Failed"
            },
            "runAfter": {
              "Response_Invalid_AccountID_fetchOwner": [
                "Succeeded"
              ]
            },
            "type": "Terminate"
          },
          "log-fetchOwner_totalSize": {
            "inputs": {
              "host": {
                "workflow": {
                  "id": "int_sf4sLog"
                }
              },
              "body": {
                "message": "There are  @{body('Execute_SOQL_query_ownerId1')?['totalSize']} user(s) in SieSales with the GID technical sent in request",
                "severity": "INFO"
              },
              "headers": {
                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
              }
            },
            "runAfter": {
              "Execute_SOQL_query_ownerId1": [
                "Succeeded"
              ]
            },
            "type": "Workflow"
          }
        },
        "else": {
          "actions": {
            "Condition_o_Check_Account_ID_3": {
              "actions": {
                "Response_Error_Account_null": {
                  "inputs": {
                    "body": "OwnerId or GID not provided",
                    "statusCode": 400
                  },
                  "kind": "Http",
                  "runAfter": {
                    "log-_AccountID_null": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs"
                      ]
                    }
                  },
                  "type": "Response"
                },
                "Terminate-Account_null": {
                  "inputs": {
                    "runError": {
                      "code": "400",
                      "message": "Account null"
                    },
                    "runStatus": "Failed"
                  },
                  "runAfter": {
                    "Response_Error_Account_null": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate"
                },
                "log-_AccountID_null": {
                  "inputs": {
                    "host": {
                      "workflow": {
                        "id": "int_sf4sLog"
                      }
                    },
                    "body": {
                      "message": "No GID technical (or) Owner Id sent in request",
                      "severity": "WARNING"
                    },
                    "headers": {
                      "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                      "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                      "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                    }
                  },
                  "runAfter": {},
                  "type": "Workflow"
                }
              },
              "else": {
                "actions": {}
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@xpath(xml(variables('Account')),'.//Id/text()')?[0]",
                        ""
                      ]
                    }
                  },
                  {
                    "not": {
                      "equals": [
                        "@xpath(xml(variables('Account')),'.//Id/text()')?[0]",
                        "@null"
                      ]
                    }
                  }
                ]
              },
              "runAfter": {},
              "type": "If"
            }
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@xpath(xml(variables('Account')),'.//OwnerId/text()')?[0]",
                  ""
                ]
              }
            },
            {
              "not": {
                "equals": [
                  "@xpath(xml(variables('Account')),'.//OwnerId/text()')?[0]",
                  "@null"
                ]
              }
            }
          ]
        },
        "runAfter": {
          "Condition_to_check_Account": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Condition_to_Check_AccountID": {
        "actions": {},
        "else": {
          "actions": {
            "Append_to_array_variable_Id": {
              "inputs": {
                "name": "varReplaceVariable",
                "value": "Id:"
              },
              "runAfter": {},
              "type": "AppendToArrayVariable"
            }
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@xpath(xml(triggerBody()?['account']),'.//Id/text()')?[0]",
                  "@null"
                ]
              }
            },
            {
              "not": {
                "equals": [
                  "@xpath(xml(triggerBody()?['account']),'.//Id/text()')?[0]",
                  ""
                ]
              }
            }
          ]
        },
        "runAfter": {
          "Append_to_array_variable-S4SData_Visibility__c": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Condition_to_SISIC_Direct": {
        "actions": {
          "Condition_to_check_fetch_sisic_record": {
            "actions": {
              "Append_to_array_variable_S4SSISIC_Direct__c": {
                "inputs": {
                  "name": "varReplaceVariable",
                  "value": "S4SSISIC_Direct__c:@{body('Execute_a_Fetch_SISIC')?['records']?[0]?['Id']}"
                },
                "runAfter": {},
                "type": "AppendToArrayVariable"
              },
              "log-_SISIC_Details": {
                "inputs": {
                  "host": {
                    "workflow": {
                      "id": "int_sf4sLog"
                    }
                  },
                  "body": {
                    "message": "SISIC Details Provided matched to the following Id '@{body('Execute_a_Fetch_SISIC')?['records']?[0]?['S4SSISIC__c']?['Id']}' on SieSale",
                    "severity": "INFO"
                  },
                  "headers": {
                    "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                    "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                    "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                  }
                },
                "runAfter": {},
                "type": "Workflow"
              }
            },
            "else": {
              "actions": {
                "Append_to_array_variable_S4SSISIC_Direct__c-2": {
                  "inputs": {
                    "name": "varReplaceVariable",
                    "value": "S4SSISIC_Direct__c:"
                  },
                  "runAfter": {},
                  "type": "AppendToArrayVariable"
                },
                "Response_error_SISIC_code": {
                  "inputs": {
                    "body": "Provided SISIC Code not found",
                    "statusCode": 400
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Append_to_array_variable_S4SSISIC_Direct__c-2": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs"
                      ]
                    }
                  },
                  "type": "Response"
                },
                "Terminate-Provided_SISIC_Code_not_found": {
                  "inputs": {
                    "runError": {
                      "code": "400",
                      "message": "Provided SISIC Code not found"
                    },
                    "runStatus": "Failed"
                  },
                  "runAfter": {
                    "Response_error_SISIC_code": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate"
                },
                "log_-_Account": {
                  "inputs": {
                    "host": {
                      "workflow": {
                        "id": "int_sf4sLog"
                      }
                    },
                    "body": {
                      "message": "SISIC Details Provided in the Request doesn't exist in SieSales",
                      "severity": "WARNING"
                    },
                    "headers": {
                      "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                      "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                      "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                    }
                  },
                  "runAfter": {},
                  "type": "Workflow"
                }
              }
            },
            "expression": {
              "and": [
                {
                  "not": {
                    "equals": [
                      "@body('Execute_a_Fetch_SISIC')?['records']?[0]?['Id']",
                      ""
                    ]
                  }
                },
                {
                  "not": {
                    "equals": [
                      "@body('Execute_a_Fetch_SISIC')?['records']?[0]?['Id']",
                      "@null"
                    ]
                  }
                }
              ]
            },
            "runAfter": {
              "Execute_a_Fetch_SISIC": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Execute_a_Fetch_SISIC": {
            "inputs": {
              "body": {
                "query": "select Id, OwnerId, IsDeleted,Name,CurrencyIsoCode,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastViewedDate,LastReferencedDate,S4SExternal_ID__c,S4SIndustry_Description__c,S4SIndustry_Segment__c,S4SIndustry__c,S4SNAF_ID__c from S4SSISIC__c where Name ='@{xpath(xml(variables('Account')),'.//S4SSISIC_Direct__c/text()')?[0]}' AND S4S_Confidential__c='Yes'"
              },
              "path": "/soql/executesoqlquery",
              "host": {
                "connection": {
                  "referenceName": "salesForceConnection"
                }
              },
              "method": "post"
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "secureData": {
                "properties": [
                  "inputs",
                  "outputs"
                ]
              }
            },
            "type": "ApiConnection"
          }
        },
        "else": {
          "actions": {
            "log-_sisic_direct_false_log": {
              "inputs": {
                "host": {
                  "workflow": {
                    "id": "int_sf4sLog"
                  }
                },
                "body": {
                  "message": "No SISIC Details Provided in the Request",
                  "severity": "WARNING"
                },
                "headers": {
                  "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                  "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                  "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                }
              },
              "runAfter": {},
              "type": "Workflow"
            }
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@xpath(xml(variables('Account')),'.//S4SSISIC_Direct__c/text()')?[0]",
                  ""
                ]
              }
            },
            {
              "not": {
                "equals": [
                  "@xpath(xml(variables('Account')),'.//S4SSISIC_Direct__c/text()')?[0]",
                  "@null"
                ]
              }
            }
          ]
        },
        "runAfter": {
          "Condition_OwnerId1": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Condition_to_check_Account": {
        "actions": {
          "Condition_to_check_Account_ID": {
            "actions": {
              "log_-_Provided_Account_Valid": {
                "inputs": {
                  "host": {
                    "workflow": {
                      "id": "int_sf4sLog"
                    }
                  },
                  "body": {
                    "message": "Provided Account Id is '@{body('Execute_FetchAccount')?['records']?[0]?['Id']}' valid",
                    "severity": "INFO"
                  },
                  "headers": {
                    "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                    "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                    "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                  }
                },
                "runAfter": {},
                "type": "Workflow"
              }
            },
            "else": {
              "actions": {
                "Response_-Failure": {
                  "inputs": {
                    "body": "Provided account ID is not valid",
                    "statusCode": 400
                  },
                  "kind": "Http",
                  "runAfter": {
                    "logic-Provided_Account__invalid": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs"
                      ]
                    }
                  },
                  "type": "Response"
                },
                "Terminate-Invalid_Account_ID": {
                  "inputs": {
                    "runError": {
                      "code": "400",
                      "message": "Provided account ID is not valid"
                    },
                    "runStatus": "Failed"
                  },
                  "runAfter": {
                    "Response_-Failure": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate"
                },
                "logic-Provided_Account__invalid": {
                  "inputs": {
                    "host": {
                      "workflow": {
                        "id": "int_sf4sLog"
                      }
                    },
                    "body": {
                      "message": "Provided Account Id is invalid",
                      "severity": "ERROR"
                    },
                    "headers": {
                      "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                      "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                      "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                    }
                  },
                  "runAfter": {},
                  "type": "Workflow"
                }
              }
            },
            "expression": {
              "and": [
                {
                  "not": {
                    "equals": [
                      "@body('Execute_FetchAccount')?['records']?[0]?['Id']",
                      ""
                    ]
                  }
                },
                {
                  "not": {
                    "equals": [
                      "@body('Execute_FetchAccount')?['records']?[0]?['Id']",
                      "@null"
                    ]
                  }
                },
                {
                  "equals": [
                    "@string('Confidential')",
                    "@body('Execute_FetchAccount')?['records']?[0]?['S4SData_Visibility__c']"
                  ]
                }
              ]
            },
            "runAfter": {
              "Execute_FetchAccount": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "Execute_FetchAccount": {
            "inputs": {
              "body": {
                "query": "select Id,IsDeleted,MasterRecordId,Name,Type,RecordTypeId,ParentId,BillingStreet,BillingCity,BillingState,BillingPostalCode,BillingCountry,BillingStateCode,BillingCountryCode,BillingLatitude,BillingLongitude,BillingGeocodeAccuracy,ShippingStreet,ShippingCity,ShippingState,ShippingPostalCode,ShippingCountry,ShippingStateCode,ShippingCountryCode,ShippingLatitude,ShippingLongitude,ShippingGeocodeAccuracy,Phone,Fax,AccountNumber,Website,PhotoUrl,Sic,Industry,AnnualRevenue,NumberOfEmployees,Ownership,TickerSymbol,Description,Rating,Site,CurrencyIsoCode,OwnerId,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,LastActivityDate,LastViewedDate,LastReferencedDate,IsPartner,IsCustomerPortal,ChannelProgramName,ChannelProgramLevelName,Jigsaw,JigsawCompanyId,AccountSource,SicDesc,LID__LinkedIn_Company_Id__c,Copado_Testing__c,S4SACCOUNT_LegacyID__c,S4SARE__c,S4SAccount_Assignment__c,S4SAccount_Current_Record_Link__c,S4SAccount_Group_Type__c,S4SAccount_Life_Cycle__c,S4SAccount_Name_International__c,S4SAccount_Role__c,S4SAvailable_languages__c,S4SBusiness_Availability_24h_365_days__c,S4SBusiness_Availability_24h_Mon_Fri__c,S4SBusiness_Unit__c,S4SBypass_Duplicate_rules__c,S4SCID_Number__c,S4SCMD_IfA_Update__c,S4SCMD_KUKLA__c,S4SCMD_NAME1_I__c,S4SCMD_NAME1__c,S4SCMD_NAME2_I__c,S4SCMD_NAME2__c,S4SCMD_NAME3_I__c,S4SCMD_NAME3__c,S4SCMD_REGION__c,S4SCMD_STREET2__c,S4SCMD_STREET__c,S4SCMD_Subscription_Rejected_Date__c,S4SChange_n__c,S4SChange_of_NPS__c,S4SCheck_IFAs_and_Contacts__c,S4SCity_PO_Box_International__c,S4SCity_PO_Box__c,S4SCompany_Postal_Code__c,S4SCompany_Summary__c,S4SCurrent_FY_NPS__c,S4SDUNS__c,S4SDivision__c,S4SDomestic_Ultimate_DUNS__c,S4SDuns_Information__c,S4SDuplicate_IfA_Number__c,S4SEmail__c,S4SEngineering_electrical__c,S4SEngineering_mechanical__c,S4SExternal_Account_HelpText__c,S4SFacebook__c,S4SField_Services_24_7__c,S4SFounding_Year__c,S4SFrom_Search__c,S4SGlobal_Frame_Agreement_Database__c,S4SGlobal_Ultimate_DUNS__c,S4SISIC__c,S4SIfAAutoNumber__c,S4SIfA_Siemens_Location__c,S4SIfA__c,S4SIndustry_Direct__c,S4SIndustry_Segment_Direct__c,S4SIndustry_Segment_Ship_To__c,S4SIndustry_Ship_To__c,S4SInternational_City__c,S4SInternational_CountryGP__c,S4SInternational_Country__c,S4SInternational_Postal_Code__c,S4SInternational_RegionGP__c,S4SInternational_Region__c,S4SInternational_Steet_Name_2__c,S4SInternational_Street_Name_1__c,S4SIsOwnerCMDUser__c,S4SIs_Partner__c,S4SLead_Country__c,S4SLead_Org__c,S4SLegalOwner__c,S4SLocal_Search_Term__c,S4SMD_Status__c,S4SNPS_Trend__c,S4SNat_Company_ID__c,S4SNo_Legal_Form_available__c,S4SNo_of_Active_Candidature__c,S4SNo_of_Cancelled_Candidature__c,S4SNomination_Letter__c,S4SNormal_Business_Hours__c,S4SNotification_from_CMD__c,S4SOfferings_to_the_market_SOP__c,S4SOfferings_to_the_market_VAR__c,S4SOperational_radius__c,S4SOrganization_Code__c,S4SPO_Box_Postcode__c,S4SPO_box__c,S4SParent_Account_Group__c,S4SParent_DUNS__c,S4SPartner_Main_Industries__c,S4SPartner_Type__c,S4SPartnership_Status__c,S4SPartnership_with_competing_vendors__c,S4SPrevious_FY_NPS__c,S4SPrevious_FY_n__c,S4SPrevious_IfA_Number__c,S4SPulse_Link__c,S4SRelevant_Portfolio__c,S4SResponders_current_FY_n__c,S4SSFS_Confidential__c,S4SSISIC_Direct_Description__c,S4SSISIC_Direct__c,S4SSISIC_Ship_To_Description__c,S4SSISIC_Ship_To__c,S4SSalesCountry__c,S4SSales_Branch__c,S4SSales_Country__c,S4SSales_Department__c,S4SSales_Office__c,S4SSales_Org_Type__c,S4SSales_Sub_Region__c,S4SSales_Territory__c,S4SService_electrical__c,S4SService_mechanical__c,S4SShopfloor_level_square_meters__c,S4SShort_Partner_company_description__c,S4SSiemens_Account_Type__c,S4STax_ID__c,S4STotal_Employees__c,S4SVertical_Name__c,S4S_No_Matched_Accounts_Found__c,S4SClone_Account_Number__c,S4SNumber_of_Pricing_Primary__c,Account_Assignments__c,S4SBypassValidationForProcessBuilder__c,S4SConfidentiality_Status__c,S4SDAndBCreated__c,S4SData_Visibility__c,S4SIdentification_Number__c,S4SLegal_Status__c,S4SMarked_for_Deletion__c,S4SPartner_Group__c,S4SQuip_ABP_URL__c,S4SQuip_Briefing_URL__c,S4SQuip_CSVP_URL__c,S4SSAP_Client__c,S4SSAP_System_ID__c,S4SSales_Planning_enabled__c,S4SClone_Confidential__c,S4SCounty_FIPS__c,S4SCounty__c,S4SCustomer_Classification__c,S4SExternal_Source__c,S4SGeographical_Code__c,S4SIndirect_Creation_Status__c,S4SLead_Central_Enabled_Account__c,S4SMilitary_Non_Military_Use__c,S4SNTA__c,S4SRegion__c,S4SRelated_IfA__c,S4SSkipValidationForDataVisibilty__c,S4SPartner_Group_Record_Type_Name__c,Owner.Id,Owner.Username,Owner.LastName,Owner.FirstName,Owner.MiddleName,Owner.Suffix,Owner.Name,Owner.CompanyName,Owner.Division,Owner.Department,Owner.Title,Owner.Street,Owner.City,Owner.State,Owner.PostalCode,Owner.Country,Owner.StateCode,Owner.CountryCode,Owner.Latitude,Owner.Longitude,Owner.GeocodeAccuracy,Owner.Address,Owner.Email,Owner.EmailPreferencesAutoBcc,Owner.EmailPreferencesAutoBccStayInTouch,Owner.EmailPreferencesStayInTouchReminder,Owner.SenderEmail,Owner.SenderName,Owner.Signature,Owner.StayInTouchSubject,Owner.StayInTouchSignature,Owner.StayInTouchNote,Owner.Phone,Owner.Fax,Owner.MobilePhone,Owner.Alias,Owner.CommunityNickname,Owner.BadgeText,Owner.IsActive,Owner.TimeZoneSidKey,Owner.UserRoleId,Owner.LocaleSidKey,Owner.ReceivesInfoEmails,Owner.ReceivesAdminInfoEmails,Owner.EmailEncodingKey,Owner.DefaultCurrencyIsoCode,Owner.CurrencyIsoCode,Owner.ProfileId,Owner.UserType,Owner.LanguageLocaleKey,Owner.EmployeeNumber,Owner.DelegatedApproverId,Owner.ManagerId,Owner.LastLoginDate,Owner.CreatedDate,Owner.CreatedById,Owner.LastModifiedDate,Owner.LastModifiedById,Owner.SystemModstamp,Owner.OfflineTrialExpirationDate,Owner.OfflinePdaTrialExpirationDate,Owner.UserPermissionsMarketingUser,Owner.UserPermissionsOfflineUser,Owner.UserPermissionsAvantgoUser,Owner.UserPermissionsCallCenterAutoLogin,Owner.UserPermissionsMobileUser,Owner.UserPermissionsSFContentUser,Owner.UserPermissionsKnowledgeUser,Owner.UserPermissionsInteractionUser,Owner.UserPermissionsSupportUser,Owner.UserPermissionsLiveAgentUser,Owner.ForecastEnabled,Owner.UserPreferencesActivityRemindersPopup,Owner.UserPreferencesEventRemindersCheckboxDefault,Owner.UserPreferencesTaskRemindersCheckboxDefault,Owner.UserPreferencesReminderSoundOff,Owner.UserPreferencesDisableAllFeedsEmail,Owner.UserPreferencesDisableFollowersEmail,Owner.UserPreferencesDisableProfilePostEmail,Owner.UserPreferencesDisableChangeCommentEmail,Owner.UserPreferencesDisableLaterCommentEmail,Owner.UserPreferencesDisProfPostCommentEmail,Owner.UserPreferencesContentNoEmail,Owner.UserPreferencesContentEmailAsAndWhen,Owner.UserPreferencesApexPagesDeveloperMode,Owner.UserPreferencesHideCSNGetChatterMobileTask,Owner.UserPreferencesDisableMentionsPostEmail,Owner.UserPreferencesDisMentionsCommentEmail,Owner.UserPreferencesHideCSNDesktopTask,Owner.UserPreferencesHideChatterOnboardingSplash,Owner.UserPreferencesHideSecondChatterOnboardingSplash,Owner.UserPreferencesDisCommentAfterLikeEmail,Owner.UserPreferencesDisableLikeEmail,Owner.UserPreferencesSortFeedByComment,Owner.UserPreferencesDisableMessageEmail,Owner.UserPreferencesDisableBookmarkEmail,Owner.UserPreferencesDisableSharePostEmail,Owner.UserPreferencesEnableAutoSubForFeeds,Owner.UserPreferencesDisableFileShareNotificationsForApi,Owner.UserPreferencesShowTitleToExternalUsers,Owner.UserPreferencesShowManagerToExternalUsers,Owner.UserPreferencesShowEmailToExternalUsers,Owner.UserPreferencesShowWorkPhoneToExternalUsers,Owner.UserPreferencesShowMobilePhoneToExternalUsers,Owner.UserPreferencesShowFaxToExternalUsers,Owner.UserPreferencesShowStreetAddressToExternalUsers,Owner.UserPreferencesShowCityToExternalUsers,Owner.UserPreferencesShowStateToExternalUsers,Owner.UserPreferencesShowPostalCodeToExternalUsers,Owner.UserPreferencesShowCountryToExternalUsers,Owner.UserPreferencesShowProfilePicToGuestUsers,Owner.UserPreferencesShowTitleToGuestUsers,Owner.UserPreferencesShowCityToGuestUsers,Owner.UserPreferencesShowStateToGuestUsers,Owner.UserPreferencesShowPostalCodeToGuestUsers,Owner.UserPreferencesShowCountryToGuestUsers,Owner.UserPreferencesPipelineViewHideHelpPopover,Owner.UserPreferencesHideS1BrowserUI,Owner.UserPreferencesDisableEndorsementEmail,Owner.UserPreferencesPathAssistantCollapsed,Owner.UserPreferencesCacheDiagnostics,Owner.UserPreferencesShowEmailToGuestUsers,Owner.UserPreferencesShowManagerToGuestUsers,Owner.UserPreferencesShowWorkPhoneToGuestUsers,Owner.UserPreferencesShowMobilePhoneToGuestUsers,Owner.UserPreferencesShowFaxToGuestUsers,Owner.UserPreferencesShowStreetAddressToGuestUsers,Owner.UserPreferencesLightningExperiencePreferred,Owner.UserPreferencesPreviewLightning,Owner.UserPreferencesHideEndUserOnboardingAssistantModal,Owner.UserPreferencesHideLightningMigrationModal,Owner.UserPreferencesHideSfxWelcomeMat,Owner.UserPreferencesHideBiggerPhotoCallout,Owner.UserPreferencesGlobalNavBarWTShown,Owner.UserPreferencesGlobalNavGridMenuWTShown,Owner.UserPreferencesCreateLEXAppsWTShown,Owner.UserPreferencesFavoritesWTShown,Owner.UserPreferencesRecordHomeSectionCollapseWTShown,Owner.UserPreferencesRecordHomeReservedWTShown,Owner.UserPreferencesFavoritesShowTopFavorites,Owner.UserPreferencesExcludeMailAppAttachments,Owner.UserPreferencesSuppressTaskSFXReminders,Owner.UserPreferencesPreviewCustomTheme,Owner.UserPreferencesHasCelebrationBadge,Owner.UserPreferencesUserDebugModePref,Owner.UserPreferencesNewLightningReportRunPageEnabled,Owner.ContactId,Owner.AccountId,Owner.CallCenterId,Owner.Extension,Owner.PortalRole,Owner.IsPortalEnabled,Owner.FederationIdentifier,Owner.AboutMe,Owner.FullPhotoUrl,Owner.SmallPhotoUrl,Owner.IsExtIndicatorVisible,Owner.OutOfOfficeMessage,Owner.MediumPhotoUrl,Owner.DigestFrequency,Owner.DefaultGroupNotificationFrequency,Owner.LastViewedDate,Owner.LastReferencedDate,Owner.BannerPhotoUrl,Owner.SmallBannerPhotoUrl,Owner.MediumBannerPhotoUrl,Owner.IsProfilePhotoActive,Owner.IndividualId,Owner.copado__API_URL__c,Owner.copado__Hide_Copado_feedback__c,Owner.copado__Show_Copado_Tips__c,Owner.copado__Work_Manager_Panels__c,Owner.S4SARE__c,Owner.S4SBusiness_Segment__c,Owner.S4SBusiness_SubSegment__c,Owner.S4SBusiness_Unit__c,Owner.S4SCompany__c,Owner.S4SCost_Center__c,Owner.S4SDepartment__c,Owner.S4SDirX_Email__c,Owner.S4SDirX_Origin__c,Owner.S4SDivision_Territory__c,Owner.S4SEmailChangedDate__c,Owner.S4SFirst_Name_int__c,Owner.S4SGCK__c,Owner.S4SGID_Technical__c,Owner.S4SGID__c,Owner.S4SIsUserUpdated__c,Owner.S4SLast_Name_int__c,Owner.S4SLead_Country__c,Owner.S4SLocation__c,Owner.S4SManager_SCD_Technical__c,Owner.S4SManager_SCD__c,Owner.S4SOperations_Manager__c,Owner.S4SOrgUnit_SCD__c,Owner.S4SOrg_ID__c,Owner.S4SPrimary__c,Owner.S4SRelated_User_DirX__c,Owner.S4SSCD_Status__c,Owner.S4SSSP_Promotor_Planer__c,Owner.S4SSales_Branch__c,Owner.S4SSales_Department__c,Owner.S4SSales_District__c,Owner.S4SSales_Manager_Email__c,Owner.S4SSales_Office__c,Owner.S4SSales_SubRegion__c,Owner.S4SSales_Territory__c,Owner.S4SSalutation__c,Owner.S4SSiemens_Territory_Structure_Name__c,Owner.S4SSiemens_Territory_Structure__c,Owner.S4SSingle_Sign_On_Only__c,Owner.S4SSponsor_SCD_Technical__c,Owner.S4SSponsor_SCD__c,Owner.S4SSurname__c,Owner.S4SUser_s_Country__c,Owner.S4SUser_s_Division__c,Owner.DB_Region__c,Owner.S4SCurrency__c,Owner.S4SSales_Manager__c from Account where ID='@{xpath(xml(variables('Account')),'.//Id/text()')?[0]}' and recordTypeId ='@{body('Execute_a_SQL_query_fetchOppRecordType')?['records']?[0]?['Id']}'"
              },
              "path": "/soql/executesoqlquery",
              "host": {
                "connection": {
                  "referenceName": "salesForceConnection"
                }
              },
              "method": "post"
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "secureData": {
                "properties": [
                  "inputs",
                  "outputs"
                ]
              }
            },
            "type": "ApiConnection"
          },
          "Response_Invalid_Account": {
            "inputs": {
              "body": "Invalid Account Id",
              "statusCode": 400
            },
            "kind": "Http",
            "runAfter": {
              "Execute_FetchAccount": [
                "Failed"
              ]
            },
            "runtimeConfiguration": {
              "secureData": {
                "properties": [
                  "inputs"
                ]
              }
            },
            "type": "Response"
          },
          "Terminate_-_Invalid_Account": {
            "inputs": {
              "runStatus": "Failed"
            },
            "runAfter": {
              "Response_Invalid_Account": [
                "Succeeded"
              ]
            },
            "type": "Terminate"
          }
        },
        "else": {
          "actions": {
            "Condition_Has_Errors": {
              "actions": {
                "Log_Multiple_Accounts_Found": {
                  "inputs": {
                    "host": {
                      "workflow": {
                        "id": "int_sf4sLog"
                      }
                    },
                    "body": {
                      "message": "@{body('LiquidTransformer')?['Message']}",
                      "severity": "Error"
                    },
                    "headers": {
                      "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                      "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                      "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                    }
                  },
                  "runAfter": {},
                  "type": "Workflow"
                },
                "Response_Multiple_Accounts": {
                  "inputs": {
                    "body": "@body('LiquidTransformer')?['Message']",
                    "statusCode": 400
                  },
                  "kind": "Http",
                  "runAfter": {
                    "Log_Multiple_Accounts_Found": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response"
                }
              },
              "else": {
                "actions": {
                  "Condition_Create_or_Update": {
                    "actions": {
                      "Log_No_Account_Found": {
                        "inputs": {
                          "host": {
                            "workflow": {
                              "id": "int_sf4sLog"
                            }
                          },
                          "body": {
                            "message": "Provided Origination ID/National Company ID and Related IFA doesn't match any Account in SieSales",
                            "severity": "Error"
                          },
                          "headers": {
                            "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                            "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                            "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                          }
                        },
                        "runAfter": {},
                        "type": "Workflow"
                      }
                    },
                    "else": {
                      "actions": {
                        "Append_to_array_variable_AccountId": {
                          "inputs": {
                            "name": "varReplaceVariable",
                            "value": "Id:@{body('LiquidTransformer')?['Id']}"
                          },
                          "runAfter": {},
                          "type": "AppendToArrayVariable"
                        }
                      }
                    },
                    "expression": {
                      "and": [
                        {
                          "equals": [
                            "@body('LiquidTransformer')?['Create']",
                            "@true"
                          ]
                        }
                      ]
                    },
                    "runAfter": {},
                    "type": "If"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@ body('LiquidTransformer')?['Error']",
                      "@true"
                    ]
                  }
                ]
              },
              "runAfter": {
                "LiquidTransformer": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "LiquidTransformer": {
              "inputs": {
                "body": {
                  "NationalCompanyQuery": "@if(equals(outputs('HTTP_Get_Account_From_Nat_Company_ID')['statusCode'],int('200')),body('HTTP_Get_Account_From_Nat_Company_ID')?['records'],variables('emptyArray'))",
                  "OriginationQuery": "@if(equals(outputs('HTTP_Get_Account_From_OriginationID')['statusCode'],int('200')),body('HTTP_Get_Account_From_OriginationID')?['records'],variables('emptyArray'))",
                  "RelatedIFAQuery": "@if(equals(outputs('HTTP_Get_Account_From_Related_IFA')['statusCode'],int('200')),body('HTTP_Get_Account_From_Related_IFA')?['records'],variables('emptyArray'))"
                },
                "function": {
                  "connectionName": "Liquid"
                },
                "headers": {
                  "Accept": "application/json",
                  "Content-Type": "application/json",
                  "Filename": "CheckOrgId_NatId_RelatedIFA"
                },
                "method": "POST"
              },
              "runAfter": {
                "Scope_Deduplication_Logic": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "type": "Function"
            },
            "Scope_Deduplication_Logic": {
              "actions": {
                "HTTP_Get_Account_From_Nat_Company_ID": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{body('HTTP_Get_SF_Token')}"
                    },
                    "method": "GET",
                    "queries": {
                      "q": "SELECT Id from Account where S4SNat_Company_ID__c = '@{if(equals(xpath(xml(variables('Account')),'.//S4SNat_Company_ID__c/text()')?[0],string('')),string('999999'),if(equals(xpath(xml(variables('Account')),'.//S4SNat_Company_ID__c/text()')?[0],null),string('999999'),xpath(xml(variables('Account')),'.//S4SNat_Company_ID__c/text()')?[0]))}' AND Owner.UserRoleId = '@{coalesce(body('HTTP_Get_UserRoleId_From_OwnerId')?['records']?[0]?['UserRoleId'],body('HTTP_Get_UserRoleId_From_defaultOwner')?['records']?[0]?['UserRoleId'],string('999999'))}' AND S4SData_Visibility__c =  'Confidential' AND recordTypeId = '@{body('Execute_a_SQL_query_fetchOppRecordType')?['records']?[0]?['Id']}' and S4SOrigination_ID__c = null LIMIT 2"
                    },
                    "uri": "parameters('instanceURL')/query"
                  },
                  "runAfter": {
                    "HTTP_Get_UserRoleId_From_OwnerId": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs",
                        "outputs"
                      ]
                    }
                  },
                  "type": "Http"
                },
                "HTTP_Get_Account_From_OriginationID": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{body('HTTP_Get_SF_Token')}"
                    },
                    "method": "GET",
                    "queries": {
                      "q": "SELECT Id from Account where S4SOrigination_ID__c = '@{if(equals(xpath(xml(variables('Account')),'.//S4SOrigination_ID__c/text()')?[0],string('')),string('999999'),if(equals(xpath(xml(variables('Account')),'.//S4SOrigination_ID__c/text()')?[0],null),string('999999'),xpath(xml(variables('Account')),'.//S4SOrigination_ID__c/text()')?[0]))}' AND RecordTypeId = '@{body('Execute_a_SQL_query_fetchOppRecordType')?['records']?[0]?['Id']}' AND Owner.UserRoleId = '@{coalesce(body('HTTP_Get_UserRoleId_From_OwnerId')?['records']?[0]?['UserRoleId'],body('HTTP_Get_UserRoleId_From_defaultOwner')?['records']?[0]?['UserRoleId'],string('999999'))}' LIMIT 2"
                    },
                    "uri": "parameters('instanceURL')/query"
                  },
                  "runAfter": {
                    "HTTP_Get_UserRoleId_From_OwnerId": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs",
                        "outputs"
                      ]
                    }
                  },
                  "type": "Http"
                },
                "HTTP_Get_Account_From_Related_IFA": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{body('HTTP_Get_SF_Token')}"
                    },
                    "method": "GET",
                    "queries": {
                      "q": "SELECT Id from Account where S4SRelated_IfA__c= '@{if(equals(xpath(xml(variables('Account')),'.//S4SRelated_IfA__c/text()')?[0],string('')),string('999999'),if(equals(xpath(xml(variables('Account')),'.//S4SRelated_IfA__c/text()')?[0],null),string('999999'),xpath(xml(variables('Account')),'.//S4SRelated_IfA__c/text()')?[0]))}' AND Owner.UserRoleId= '@{coalesce(body('HTTP_Get_UserRoleId_From_OwnerId')?['records']?[0]?['UserRoleId'],body('HTTP_Get_UserRoleId_From_defaultOwner')?['records']?[0]?['UserRoleId'],string('999999'))}' AND S4SData_Visibility__c =  'Confidential' and recordTypeId = '@{body('Execute_a_SQL_query_fetchOppRecordType')?['records']?[0]?['Id']}' and S4SOrigination_ID__c = null LIMIT 2"
                    },
                    "uri": "parameters('instanceURL')/query"
                  },
                  "runAfter": {
                    "HTTP_Get_UserRoleId_From_OwnerId": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs",
                        "outputs"
                      ]
                    }
                  },
                  "type": "Http"
                },
                "HTTP_Get_UserRoleId_From_OwnerId": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{body('HTTP_Get_SF_Token')}"
                    },
                    "method": "GET",
                    "queries": {
                      "q": "SELECT UserRoleId from User where S4SGID_Technical__c = '@{if(equals(xpath(xml(variables('Account')),'.//OwnerId/text()')?[0],string('')),string('999999'),if(equals(xpath(xml(variables('Account')),'.//OwnerId/text()')?[0],null),string('999999'),xpath(xml(variables('Account')),'.//OwnerId/text()')?[0]))}' LIMIT 1"
                    },
                    "uri": "parameters('instanceURL')/query"
                  },
                  "runAfter": {
                    "HTTP_Get_UserRoleId_From_defaultOwner": [
                      "Succeeded"
                    ]
                  },
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs",
                        "outputs"
                      ]
                    }
                  },
                  "type": "Http"
                },
                "HTTP_Get_UserRoleId_From_defaultOwner": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{body('HTTP_Get_SF_Token')}"
                    },
                    "method": "GET",
                    "queries": {
                      "q": "SELECT UserRoleId from User where S4SGID_Technical__c = '@{if(equals(triggerOutputs()['headers']?['defaultOwner'],string('')),string('999999'),if(equals(triggerOutputs()['headers']?['defaultOwner'],null),string('999999'),triggerOutputs()['headers']?['defaultOwner']))}' LIMIT 1"
                    },
                    "uri": "parameters('instanceURL')/query"
                  },
                  "runAfter": {},
                  "runtimeConfiguration": {
                    "secureData": {
                      "properties": [
                        "inputs",
                        "outputs"
                      ]
                    }
                  },
                  "type": "Http"
                }
              },
              "runAfter": {},
              "type": "Scope"
            }
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@xpath(xml(variables('Account')),'.//Id/text()')?[0]",
                  ""
                ]
              }
            },
            {
              "not": {
                "equals": [
                  "@xpath(xml(variables('Account')),'.//Id/text()')?[0]",
                  "@null"
                ]
              }
            }
          ]
        },
        "runAfter": {
          "Condition_to_check_confidentialuser": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Condition_to_check_confidentialuser": {
        "actions": {
          "Append_to_array_variable_Confidential": {
            "inputs": {
              "name": "varReplaceVariable",
              "value": "S4SData_Visibility__c:Confidential"
            },
            "runAfter": {},
            "type": "AppendToArrayVariable"
          },
          "log-S4SDATA_VISIBILITY": {
            "inputs": {
              "host": {
                "workflow": {
                  "id": "int_sf4sLog"
                }
              },
              "body": {
                "message": " S4SDATA_VISIBILITY__C is Confidential for this Account",
                "severity": "INFO"
              },
              "headers": {
                "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
              }
            },
            "runAfter": {
              "Append_to_array_variable_Confidential": [
                "Succeeded"
              ]
            },
            "type": "Workflow"
          }
        },
        "else": {
          "actions": {
            "Append_to_array_variable": {
              "inputs": {
                "name": "varReplaceVariable",
                "value": "S4SData_Visibility__c:Non-Confidential"
              },
              "runAfter": {},
              "type": "AppendToArrayVariable"
            },
            "logic-s4sData_VISIBILITY_false": {
              "inputs": {
                "host": {
                  "workflow": {
                    "id": "int_sf4sLog"
                  }
                },
                "body": {
                  "message": "S4SDATA_VISIBILITY__C is Non-Confidential for this Account",
                  "severity": "INFO"
                },
                "headers": {
                  "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
                  "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
                  "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
                }
              },
              "runAfter": {
                "Append_to_array_variable": [
                  "Succeeded"
                ]
              },
              "type": "Workflow"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@json(body('logic-get-sfs-confidentialUser'))?[variables('UserName')]",
                "@string('true')"
              ]
            }
          ]
        },
        "runAfter": {
          "Condition_to_Check_AccountID": [
            "Succeeded"
          ],
          "log-_UpsertAccount": [
            "Succeeded"
          ],
          "logic-get-sfs-confidentialUser": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "Execute_a_SQL_query_fetchOppRecordType": {
        "inputs": {
          "body": {
            "query": "select Id,Name,Description,IsActive,LastModifiedDate from RecordType  where name ='SFS Account' and SobjectType  ='Account' and isActive = true "
          },
          "path": "/soql/executesoqlquery",
          "host": {
            "connection": {
              "referenceName": "salesForceConnection"
            }
          },
          "method": "post"
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "runtimeConfiguration": {
          "secureData": {
            "properties": [
              "inputs",
              "outputs"
            ]
          }
        },
        "type": "ApiConnection"
      },
      "HTTP_Get_SF_Token": {
        "inputs": {
          "headers": {
            "Ocp-Apim-Subscription-Key": "parameters('apimKey')"
          },
          "method": "POST",
          "uri": "parameters('apimURL')"
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "runtimeConfiguration": {
          "secureData": {
            "properties": [
              "inputs",
              "outputs"
            ]
          }
        },
        "type": "Http"
      },
      "Initialize_variable-Opportunity": {
        "inputs": {
          "variables": [
            {
              "name": "Opportunity",
              "type": "string",
              "value": ""
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-OwnerId": {
        "inputs": {
          "variables": [
            {
              "name": "ownerId",
              "type": "string",
              "value": ""
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-ReplaceVariable": {
        "inputs": {
          "variables": [
            {
              "name": "varReplaceVariable",
              "type": "array"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "Initialize_variable-UserName": {
        "inputs": {
          "variables": [
            {
              "name": "UserName",
              "type": "string",
              "value": "@triggerBody()?['userName']"
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable-varOwnerRoleIds": {
        "inputs": {
          "variables": [
            {
              "name": "varOwnerRoleIds",
              "type": "string",
              "value": ""
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable_-_Account": {
        "inputs": {
          "variables": [
            {
              "name": "Account",
              "type": "string",
              "value": "@triggerBody()?['account']"
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable_-_sfsRecordTypeID": {
        "inputs": {
          "variables": [
            {
              "name": "sfsRecordTypeID",
              "type": "string",
              "value": ""
            }
          ]
        },
        "runAfter": {
          "Initialize_variable-ReplaceVariable": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "Initialize_variable_emptyArray": {
        "inputs": {
          "variables": [
            {
              "name": "emptyArray",
              "type": "array"
            }
          ]
        },
        "runAfter": {},
        "type": "InitializeVariable"
      },
      "RequestUpdate-Modify_Request": {
        "inputs": {
          "body": {
            "ReplaceVaribales": "@{replace(replace(replace(string(variables('varReplaceVariable')),'[',''),']',''),'\"','')}",
            "isUpdateRequest": "yes",
            "requestBody": "@{base64(json(xml(triggerBody()?['account'])))}"
          },
          "function": {
            "connectionName": "Liquid"
          },
          "headers": null,
          "method": "POST"
        },
        "runAfter": {
          "Append_to_array_variable_RecordTypeId": [
            "Succeeded"
          ]
        },
        "type": "Function"
      },
      "RequestUpdate_RemoveElements": {
        "inputs": {
          "body": {
            "ReplaceVaribales": "@{outputs('Compose_Remove_Fields_list')}",
            "isUpdateRequest": "no",
            "requestBody": "@{base64(json(xml(body('RequestUpdate-Modify_Request'))))}"
          },
          "function": {
            "connectionName": "Liquid"
          },
          "headers": null,
          "method": "POST"
        },
        "runAfter": {
          "RequestUpdate-Modify_Request": [
            "Succeeded"
          ]
        },
        "type": "Function"
      },
      "Response_send_Account": {
        "inputs": {
          "body": "@body('RequestUpdate_RemoveElements')",
          "headers": {
            "Content-Type": "text/xml"
          },
          "statusCode": 200
        },
        "kind": "Http",
        "runAfter": {
          "RequestUpdate_RemoveElements": [
            "Succeeded"
          ]
        },
        "runtimeConfiguration": {
          "secureData": {
            "properties": [
              "inputs"
            ]
          }
        },
        "type": "Response"
      },
      "log-_UpsertAccount": {
        "inputs": {
          "host": {
            "workflow": {
              "id": "int_sf4sLog"
            }
          },
          "body": {
            "message": "Map Upsert Account for @{variables('UserName')}",
            "severity": "INFO"
          },
          "headers": {
            "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
            "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
            "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
          }
        },
        "runAfter": {
          "Append_to_array_variable-S4SData_Visibility__c": [
            "Succeeded"
          ]
        },
        "type": "Workflow"
      },
      "logic-get-sfs-confidentialUser": {
        "inputs": {
          "host": {
            "workflow": {
              "id": "getConfiguration"
            }
          },
          "body": {
            "key": "sfs-confidentiality-config"
          },
          "headers": {
            "interfaceName": "@{coalesce(triggerOutputs()?['headers']?['inerfaceName'], 'not-defined')}",
            "username": "@{coalesce(triggerOutputs()?['headers']?['username'], 'not-defined')}",
            "workflowRunId": "@{coalesce(triggerOutputs()?['headers']?['workflowRunId'], triggerOutputs()?['headers']?['x-ms-workflow-name'])}"
          }
        },
        "runAfter": {
          "Append_to_array_variable-S4SData_Visibility__c": [
            "Succeeded"
          ]
        },
        "type": "Workflow"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "manual": {
        "inputs": {
          "schema": {
            "properties": {
              "account": {
                "description": "The Account used in the Interface",
                "required": "true",
                "type": "string"
              },
              "userName": {
                "description": "The userName for the source system",
                "required": "true",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "kind": "Http",
        "runtimeConfiguration": {
          "secureData": {
            "properties": [
              "inputs",
              "outputs"
            ]
          }
        },
        "type": "Request"
      }
    }
  },
  "kind": "Stateful"
}
