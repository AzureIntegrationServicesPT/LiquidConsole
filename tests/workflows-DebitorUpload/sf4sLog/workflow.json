{
  "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "actions": {
          "HTTP-Get_ReferenceData": {
              "inputs": {
                  "body": {
                      "key": "non-sfs-Logging-Config"
                  },
                  "headers": null,
                  "host": {
                      "workflow": {
                          "id": "getConfiguration"
                      }
                  }
              },
              "runAfter": {
                  "Response_3": [
                      "Succeeded"
                  ]
              },
              "type": "Workflow"
          },
          "Response_3": {
              "inputs": {
                  "statusCode": 201
              },
              "kind": "Http",
              "runAfter": {},
              "type": "Response"
          },
          "Scope-catch": {
              "actions": {
                  "Terminate_2": {
                      "inputs": {
                          "runStatus": "Failed"
                      },
                      "type": "Terminate"
                  }
              },
              "runAfter": {
                  "Scope-try": [
                      "Failed",
                      "Skipped",
                      "TimedOut"
                  ]
              },
              "type": "Scope"
          },
          "Scope-try": {
              "actions": {
                  "Condition-index_checking": {
                      "actions": {
                          "Build_JSON": {
                              "inputs": {
                                  "ClientTrackingId": "@{triggerOutputs()['headers']?['x-ms-client-tracking-id']}",
                                  "InterfaceName": "@{triggerOutputs()['headers']?['interfaceName']}",
                                  "LogLevel": "@{triggerBody()?['severity']}",
                                  "LogMessage": "@{triggerBody()?['message']}",
                                  "WorkflowName": "@{triggerOutputs()['headers']?['x-ms-workflow-name']}",
                                  "WorkflowRunId": "@{triggerOutputs()['headers']?['x-ms-workflow-run-id']}"
                              },
                              "type": "Compose"
                          },
                          "Send_Data": {
                              "inputs": {
                                  "body": "@{outputs('Build_JSON')}",
                                  "headers": {
                                      "Log-Type": "NonSFSLog"
                                  },
                                  "host": {
                                      "connection": {
                                          "referenceName": "nonsfs_log_connection"
                                      }
                                  },
                                  "method": "post",
                                  "path": "/api/logs"
                              },
                              "runAfter": {
                                  "Build_JSON": [
                                      "SUCCEEDED"
                                  ]
                              },
                              "type": "ApiConnection"
                          }
                      },
                      "else": {
                          "actions": {}
                      },
                      "expression": {
                          "and": [
                              {
                                  "contains": [
                                      "@json(body('HTTP-Get_ReferenceData'))['SIE_SF4S_Logging']",
                                      "@triggerBody()?['severity']"
                                  ]
                              }
                          ]
                      },
                      "type": "If"
                  },
                  "Terminate": {
                      "inputs": {
                          "runStatus": "Succeeded"
                      },
                      "runAfter": {
                          "Condition-index_checking": [
                              "Succeeded"
                          ]
                      },
                      "type": "Terminate"
                  }
              },
              "runAfter": {
                  "HTTP-Get_ReferenceData": [
                      "Succeeded"
                  ]
              },
              "trackedProperties": {
                  "apimRouting": "external",
                  "citizenName": "c00031",
                  "correlationId": "not-defined",
                  "interfaceName": "SFS",
                  "interfacePartner": "not-defined",
                  "interfaceVersion": "not-defined",
                  "operationName": "sf4slog",
                  "parentWorkflow": "not-defined"
              },
              "type": "Scope"
          }
      },
      "contentVersion": "1.0.0.0",
      "outputs": {},
      "triggers": {
          "manual": {
              "inputs": {
                  "schema": {
                      "properties": {
                          "message": {
                              "description": "The message for the log",
                              "required": "false",
                              "type": "string"
                          },
                          "severity": {
                              "description": "The severity used in the Interface",
                              "required": "false",
                              "type": "string"
                          }
                      },
                      "type": "object"
                  }
              },
              "kind": "Http",
              "runtimeConfiguration": {
                  "secureData": {
                      "properties": [
                          "inputs",
                          "outputs"
                      ]
                  }
              },
              "type": "Request"
          }
      }
  },
  "kind": "Stateful"
}